
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define Draw_Point	0
  #define Draw_Sphere	1
  #define Draw_Line	2
  #define Draw_Arrow	3
  #define Draw_Signal	4
  #define Draw_LineSegment	5
  #define Draw_Texture_2D	6
  #define Draw_Quad	7
  #define Draw_WebCam	8
  #define Draw_Mesh	9
  #define Draw_Number	10
  #define Draw_N	11
  #define TextAlignment_BottomLeft	0
  #define TextAlignment_CenterLeft	1
  #define TextAlignment_TopLeft	2
  #define TextAlignment_BottomCenter	3
  #define TextAlignment_CenterCenter	4
  #define TextAlignment_TopCenter	5
  #define TextAlignment_BottomRight	6
  #define TextAlignment_CenterRight	7
  #define TextAlignment_TopRight	8
  #define Text_QuadType_FrontOnly	0
  #define Text_QuadType_FrontBack	1
  #define Text_QuadType_Switch	2
  #define Text_QuadType_Arrow	3
  #define Text_QuadType_Billboard	4
  #define Draw_Text3D 12
  #define LF 10
  #define TB 9
  #define ZERO 48
  #define NINE 57
  #define PERIOD 46
  #define COMMA 44
  #define PLUS 43
  #define MINUS 45
  #define SPACE 32
  #define g gADraw[0]
  #pragma use_dxc
  struct GADraw
  {
    uint omitText, includeUnicode, fontInfoN, textN, textCharN, boxEdgeN, AAppendBuff_IndexN, AAppendBuff_BitN, AAppendBuff_N, AAppendBuff_BitRowN, AAppendBuff_BitColN;
    float fontSize, boxThickness;
    float4 boxColor;
  };
  struct FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  RWStructuredBuffer<GADraw> gADraw;
  RWStructuredBuffer<uint> tab_delimeted_text, AAppendBuff_Bits, AAppendBuff_Sums, AAppendBuff_Indexes, AAppendBuff_ColN_Sums;
  RWStructuredBuffer<TextInfo> textInfos;
  RWStructuredBuffer<FontInfo> fontInfos;
  [numthreads(numthreads1, 1, 1)] void AAppendBuff_CalcIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.AAppendBuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : AAppendBuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = AAppendBuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); AAppendBuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads2, numthreads2, 1)] void AAppendBuff_CalcSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.AAppendBuff_BitColN * (g.AAppendBuff_BitColN - 1) / 2 && id.x < g.AAppendBuff_BitRowN) { uint i = id.x, k = id.y, j = i * g.AAppendBuff_BitColN; uint2 u = upperTriangularIndex(k, g.AAppendBuff_BitColN) + u11 * j; if (u.x < g.AAppendBuff_BitN && u.y < g.AAppendBuff_BitN) InterlockedAdd(AAppendBuff_Sums, u.y, countbits(AAppendBuff_Bits[u.x])); } } }
  [numthreads(numthreads1, 1, 1)] void AAppendBuff_InitSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.AAppendBuff_BitN) { AAppendBuff_Sums[id.x] = countbits(AAppendBuff_Bits[id.x]); } } }
  [numthreads(numthreads1, 1, 1)] void AAppendBuff_Init_Bits_32(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.AAppendBuff_BitN) { AAppendBuff_Bits[id.x] = 0; } } }
  TextInfo textInfo(uint i) { return textInfos[i]; }
	
  void textInfo(uint i, TextInfo t) { textInfos[i] = t; }
	
  uint2 Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : AAppendBuff_Indexes[textI - 1] + 1, textI < g.AAppendBuff_IndexN ? AAppendBuff_Indexes[textI] : g.textCharN); }
	
  uint Byte(uint i) { return TextByte(tab_delimeted_text, i); }
	
  [numthreads(numthreads1, 1, 1)] void getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.textN)
	{
		uint i = id.x;
		TextInfo ti = textInfo(i);
		ti.textI = i;
		ti.uvSize = f01;
		uint2 textIs = Get_text_indexes(i);
		float2 t = ti.uvSize;
		for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = Byte(j); if (byteI >= 32) { byteI -= 32; t.x += fontInfos[byteI].advance; } }
		t.x /= g.fontSize;
		ti.uvSize = t;
		textInfo(i, ti);
	}
	
    }
  }
  uint AAppendBuff_SumI(uint rowI, uint colJ) { return rowI * g.AAppendBuff_BitColN + colJ; }
  [numthreads(numthreads2, numthreads2, 1)] void AAppendBuff_Add_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.AAppendBuff_BitColN && id.x < g.AAppendBuff_BitRowN - 1) { uint rowI = id.x + 1, i = AAppendBuff_SumI(rowI, id.y); if (i < g.AAppendBuff_BitN) InterlockedAdd(AAppendBuff_Sums, i, AAppendBuff_ColN_Sums[rowI - 1]); } } }
  [numthreads(numthreads1, 1, 1)] void AAppendBuff_Calc_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.AAppendBuff_BitRowN * (g.AAppendBuff_BitRowN - 1) / 2) { uint2 u = upperTriangularIndex(id.x, g.AAppendBuff_BitColN); if (u.x < g.AAppendBuff_BitRowN) InterlockedAdd(AAppendBuff_ColN_Sums, u.y, AAppendBuff_Sums[min(AAppendBuff_SumI(u.x, g.AAppendBuff_BitColN - 1), g.AAppendBuff_BitN - 1)]); } } }
  [numthreads(numthreads1, 1, 1)] void AAppendBuff_Init_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.AAppendBuff_BitRowN) { AAppendBuff_ColN_Sums[id.x] = AAppendBuff_Sums[min(AAppendBuff_SumI(id.x, g.AAppendBuff_BitColN - 1), g.AAppendBuff_BitN - 1)]; } } }
  bool AAppendBuff_IsBitOn(uint i) { uint c = Byte(i); return c == TB || c == LF; }
	
  uint AAppendBuff_Assign_Bit(uint i, uint j) { return Is(i < g.AAppendBuff_N && AAppendBuff_IsBitOn(i)) << (int)j; }
  [numthreads(numthreads2, numthreads2, 1)] void AAppendBuff_Get_Bits_32(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < 32 && id.x < g.AAppendBuff_BitN) { uint i = id.x, j = id.y, k = i * 32 + j, bits; if (i < g.AAppendBuff_BitN && (bits = AAppendBuff_Assign_Bit(k, j)) != 0) InterlockedOr(AAppendBuff_Bits, i, bits); } } }
  uint AAppendBuff_Assign_Bits(uint i, uint j, uint bits) { return bits | AAppendBuff_Assign_Bit(i, j); }
  [numthreads(numthreads1, 1, 1)] void AAppendBuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.AAppendBuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.AAppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = AAppendBuff_Assign_Bits(k + j, j, bits); AAppendBuff_Bits[i] = bits; } } } }
  [numthreads(numthreads1, 1, 1)] void setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.textN)
	{
		uint i = id.x;
		if (i > 0)
		{
			TextInfo t = textInfo(0), ti = textInfo(i);
			ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
			ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
			textInfo(i, ti);
		}
	}
	
    }
  }
  #pragma kernel setDefaultTextInfo
  #pragma kernel getTextInfo
  #pragma kernel AAppendBuff_CalcIndexes
  #pragma kernel AAppendBuff_Add_ColN_Sums
  #pragma kernel AAppendBuff_Calc_ColN_Sums
  #pragma kernel AAppendBuff_Init_ColN_Sums
  #pragma kernel AAppendBuff_CalcSums
  #pragma kernel AAppendBuff_InitSums
  #pragma kernel AAppendBuff_Get_Bits_32
  #pragma kernel AAppendBuff_Init_Bits_32
  #pragma kernel AAppendBuff_Get_Bits