
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define DrawGroup_None	0
  #define DrawGroup_D1	1
  #define DrawGroup_D2	2
  #define DrawGroup_D3	3
  #define Axes_Lib_BDraw_Draw_Point	0
  #define Axes_Lib_BDraw_Draw_Sphere	1
  #define Axes_Lib_BDraw_Draw_Line	2
  #define Axes_Lib_BDraw_Draw_Arrow	3
  #define Axes_Lib_BDraw_Draw_Signal	4
  #define Axes_Lib_BDraw_Draw_LineSegment	5
  #define Axes_Lib_BDraw_Draw_Texture_2D	6
  #define Axes_Lib_BDraw_Draw_Quad	7
  #define Axes_Lib_BDraw_Draw_WebCam	8
  #define Axes_Lib_BDraw_Draw_Mesh	9
  #define Axes_Lib_BDraw_Draw_Number	10
  #define Axes_Lib_BDraw_Draw_N	11
  #define Axes_Lib_BDraw_TextAlignment_BottomLeft	0
  #define Axes_Lib_BDraw_TextAlignment_CenterLeft	1
  #define Axes_Lib_BDraw_TextAlignment_TopLeft	2
  #define Axes_Lib_BDraw_TextAlignment_BottomCenter	3
  #define Axes_Lib_BDraw_TextAlignment_CenterCenter	4
  #define Axes_Lib_BDraw_TextAlignment_TopCenter	5
  #define Axes_Lib_BDraw_TextAlignment_BottomRight	6
  #define Axes_Lib_BDraw_TextAlignment_CenterRight	7
  #define Axes_Lib_BDraw_TextAlignment_TopRight	8
  #define Axes_Lib_BDraw_Text_QuadType_FrontOnly	0
  #define Axes_Lib_BDraw_Text_QuadType_FrontBack	1
  #define Axes_Lib_BDraw_Text_QuadType_Switch	2
  #define Axes_Lib_BDraw_Text_QuadType_Arrow	3
  #define Axes_Lib_BDraw_Text_QuadType_Billboard	4
  #define Axes_Lib_PaletteType_Rainbow	0
  #define Axes_Lib_PaletteType_GradientRainbow	1
  #define Axes_Lib_PaletteType_GradientRainbow10	2
  #define Axes_Lib_PaletteType_GradientRainbow20	3
  #define Axes_Lib_PaletteType_Heat	4
  #define Axes_Lib_PaletteType_GradientHeat	5
  #define Axes_Lib_PaletteType_WhiteRainbow	6
  #define Axes_Lib_PaletteType_invRainbow	7
  #define Axes_Lib_PaletteType_Green	8
  #define Axes_Lib_PaletteType_Gray	9
  #define Axes_Lib_PaletteType_DarkGray	10
  #define Axes_Lib_PaletteType_CT	11
  #define Axes_Lib_BDraw_Draw_Text3D 12
  #define Axes_Lib_BDraw_LF 10
  #define Axes_Lib_BDraw_TB 9
  #define Axes_Lib_BDraw_ZERO 48
  #define Axes_Lib_BDraw_NINE 57
  #define Axes_Lib_BDraw_PERIOD 46
  #define Axes_Lib_BDraw_COMMA 44
  #define Axes_Lib_BDraw_PLUS 43
  #define Axes_Lib_BDraw_MINUS 45
  #define Axes_Lib_BDraw_SPACE 32
  #define g gBrownian[0]
  #pragma use_dxc
  struct GBrownian
  {
    uint pntN, stepN, drawGroup, Rand_N, Rand_I, Rand_J, Axes_Lib_BDraw_ABuff_IndexN, Axes_Lib_BDraw_ABuff_BitN, Axes_Lib_BDraw_ABuff_N, Axes_Lib_BDraw_ABuff_BitN1, Axes_Lib_BDraw_ABuff_BitN2, Axes_Lib_BDraw_omitText, Axes_Lib_BDraw_includeUnicode, Axes_Lib_BDraw_fontInfoN, Axes_Lib_BDraw_textN, Axes_Lib_BDraw_textCharN, Axes_Lib_BDraw_boxEdgeN, Axes_Lib_drawGrid, Axes_Lib_drawBox, Axes_Lib_drawAxes, Axes_Lib_customAxesRangeN, Axes_Lib_zeroOrigin, Axes_Lib_buildText, Axes_Lib_showAxes, Axes_Lib_showOutline, Axes_Lib_showNormalizedAxes;
    float price0, gainSD, lineThickness, Axes_Lib_BDraw_fontSize, Axes_Lib_BDraw_boxThickness, Axes_Lib_boxLineThickness, Axes_Lib_axesOpacity;
    float2 priceRange, Axes_Lib_GridX, Axes_Lib_GridY, Axes_Lib_GridZ, Axes_Lib_textSize;
    uint4 Rand_seed4;
    float4 Axes_Lib_BDraw_boxColor;
    float3 Axes_Lib_axesRangeMin, Axes_Lib_axesRangeMax, Axes_Lib_axesRangeMin1, Axes_Lib_axesRangeMax1, Axes_Lib_axesRangeMin2, Axes_Lib_axesRangeMax2, Axes_Lib_axesColor;
  };
  struct Axes_Lib_BDraw_FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct Axes_Lib_BDraw_TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  groupshared uint4 Rand_grp[1024];
  groupshared uint Axes_Lib_BDraw_ABuff_grp[1024];
  groupshared uint Axes_Lib_BDraw_ABuff_grp0[1024];
  RWStructuredBuffer<GBrownian> gBrownian;
  RWStructuredBuffer<uint4> Rand_rs;
  RWStructuredBuffer<uint> Axes_Lib_BDraw_tab_delimeted_text, Axes_Lib_BDraw_ABuff_Bits, Axes_Lib_BDraw_ABuff_Sums, Axes_Lib_BDraw_ABuff_Indexes, Axes_Lib_BDraw_ABuff_Fills1, Axes_Lib_BDraw_ABuff_Fills2;
  RWStructuredBuffer<Axes_Lib_BDraw_TextInfo> Axes_Lib_BDraw_textInfos;
  RWStructuredBuffer<Axes_Lib_BDraw_FontInfo> Axes_Lib_BDraw_fontInfos;
  RWStructuredBuffer<int> vs, vs0;
  [numthreads(numthreads2, numthreads2, 1)] void CalcPntSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.stepN * (g.stepN - 1) / 2 && id.x < g.pntN) { uint2 u = upperTriangularIndex(id.y, g.stepN) + id.x * g.stepN * u11; InterlockedAdd(vs, u.y, vs0[u.x]); } } }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Axes_Lib_BDraw_ABuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : Axes_Lib_BDraw_ABuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = Axes_Lib_BDraw_ABuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); Axes_Lib_BDraw_ABuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Axes_Lib_BDraw_ABuff_BitN) { uint i = id.x; if (i >= numthreads1) Axes_Lib_BDraw_ABuff_Sums[i] += Axes_Lib_BDraw_ABuff_Fills1[i / numthreads1 - 1]; if (i == g.Axes_Lib_BDraw_ABuff_BitN - 1) g.Axes_Lib_BDraw_ABuff_IndexN = Axes_Lib_BDraw_ABuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Axes_Lib_BDraw_ABuff_BitN1) { uint i = id.x; if (i >= numthreads1) Axes_Lib_BDraw_ABuff_Fills1[i] += Axes_Lib_BDraw_ABuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.Axes_Lib_BDraw_ABuff_BitN2 - 1 ? Axes_Lib_BDraw_ABuff_Fills1[j] : i < g.Axes_Lib_BDraw_ABuff_BitN2 ? Axes_Lib_BDraw_ABuff_Fills1[g.Axes_Lib_BDraw_ABuff_BitN1 - 1] : 0, s;
    Axes_Lib_BDraw_ABuff_grp0[grpI] = c; Axes_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Axes_Lib_BDraw_ABuff_BitN2) Axes_Lib_BDraw_ABuff_grp[grpI] = Axes_Lib_BDraw_ABuff_grp0[grpI] + Axes_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Axes_Lib_BDraw_ABuff_grp0[grpI] = Axes_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Axes_Lib_BDraw_ABuff_BitN2) Axes_Lib_BDraw_ABuff_Fills2[i] = Axes_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.Axes_Lib_BDraw_ABuff_BitN1 - 1 ? Axes_Lib_BDraw_ABuff_Sums[j] : i < g.Axes_Lib_BDraw_ABuff_BitN1 ? Axes_Lib_BDraw_ABuff_Sums[g.Axes_Lib_BDraw_ABuff_BitN - 1] : 0, s;
    Axes_Lib_BDraw_ABuff_grp0[grpI] = c; Axes_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Axes_Lib_BDraw_ABuff_BitN1) Axes_Lib_BDraw_ABuff_grp[grpI] = Axes_Lib_BDraw_ABuff_grp0[grpI] + Axes_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Axes_Lib_BDraw_ABuff_grp0[grpI] = Axes_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Axes_Lib_BDraw_ABuff_BitN1) Axes_Lib_BDraw_ABuff_Fills1[i] = Axes_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.Axes_Lib_BDraw_ABuff_BitN ? countbits(Axes_Lib_BDraw_ABuff_Bits[i]) : 0, s;
    Axes_Lib_BDraw_ABuff_grp0[grpI] = c; Axes_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Axes_Lib_BDraw_ABuff_BitN) Axes_Lib_BDraw_ABuff_grp[grpI] = Axes_Lib_BDraw_ABuff_grp0[grpI] + Axes_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Axes_Lib_BDraw_ABuff_grp0[grpI] = Axes_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Axes_Lib_BDraw_ABuff_BitN) Axes_Lib_BDraw_ABuff_Sums[i] = Axes_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Rand_initSeed(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Rand_N) { uint i = id.x; Rand_rs[i] = i == 0 ? g.Rand_seed4 : u0000; } } }
  [numthreads(numthreads1, 1, 1)] void Rand_grp_init_1M(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
  [numthreads(numthreads1, 1, 1)] void Rand_grp_init_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void Rand_grp_fill_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  uint vI(uint2 pntI_stepI) { return pntI_stepI.x * g.stepN + pntI_stepI.y; }
  Axes_Lib_BDraw_TextInfo Axes_Lib_BDraw_textInfo(uint i) { return Axes_Lib_BDraw_textInfos[i]; }
  void Axes_Lib_BDraw_textInfo(uint i, Axes_Lib_BDraw_TextInfo t) { Axes_Lib_BDraw_textInfos[i] = t; }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.Axes_Lib_BDraw_textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        Axes_Lib_BDraw_TextInfo t = Axes_Lib_BDraw_textInfo(0), ti = Axes_Lib_BDraw_textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        Axes_Lib_BDraw_textInfo(i, ti);
      }
    }
    }
  }
  uint2 Axes_Lib_BDraw_Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : Axes_Lib_BDraw_ABuff_Indexes[textI - 1] + 1, textI < g.Axes_Lib_BDraw_ABuff_IndexN ? Axes_Lib_BDraw_ABuff_Indexes[textI] : g.Axes_Lib_BDraw_textCharN); }
  uint Axes_Lib_BDraw_Byte(uint i) { return TextByte(Axes_Lib_BDraw_tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.Axes_Lib_BDraw_textN)
    {
      uint i = id.x;
      Axes_Lib_BDraw_TextInfo ti = Axes_Lib_BDraw_textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = Axes_Lib_BDraw_Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = Axes_Lib_BDraw_Byte(j); if (byteI >= 32) { byteI -= 32; t.x += Axes_Lib_BDraw_fontInfos[byteI].advance; } }
      t.x /= g.Axes_Lib_BDraw_fontSize;
      ti.uvSize = t;
      Axes_Lib_BDraw_textInfo(i, ti);
    }
    }
  }
  bool Axes_Lib_BDraw_ABuff_IsBitOn(uint i) { uint c = Axes_Lib_BDraw_Byte(i); return c == Axes_Lib_BDraw_TB || c == Axes_Lib_BDraw_LF; }
  uint Axes_Lib_BDraw_ABuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.Axes_Lib_BDraw_ABuff_N && Axes_Lib_BDraw_ABuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.Axes_Lib_BDraw_ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Axes_Lib_BDraw_ABuff_Assign_Bits(k + j, j, bits); Axes_Lib_BDraw_ABuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    Axes_Lib_BDraw_ABuff_grp0[grpI] = c; Axes_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Axes_Lib_BDraw_ABuff_BitN) Axes_Lib_BDraw_ABuff_grp[grpI] = Axes_Lib_BDraw_ABuff_grp0[grpI] + Axes_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Axes_Lib_BDraw_ABuff_grp0[grpI] = Axes_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Axes_Lib_BDraw_ABuff_BitN) Axes_Lib_BDraw_ABuff_Sums[i] = Axes_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Axes_Lib_BDraw_ABuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Axes_Lib_BDraw_ABuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.Axes_Lib_BDraw_ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Axes_Lib_BDraw_ABuff_Assign_Bits(k + j, j, bits); Axes_Lib_BDraw_ABuff_Bits[i] = bits; } } } }
  uint Rand_UV(uint4 r) { return cxor(r); }
  float Rand_FV(uint4 r) { return 2.3283064365387e-10f * Rand_UV(r); }
  uint Rand_u(uint a, int b, int c, int d, uint e) { return ((a & e) << d) ^ (((a << b) ^ a) >> c); }
  uint4 Rand_U4(uint4 r) { return uint4(Rand_u(r.x, 13, 19, 12, 4294967294u), Rand_u(r.y, 2, 25, 4, 4294967288u), Rand_u(r.z, 3, 11, 17, 4294967280u), r.w * 1664525 + 1013904223u); }
  uint4 Rand_rUInt4(uint i) { return Rand_U4(Rand_rs[i]); }
  uint4 Rand_UInt4(uint i) { return Rand_rs[i] = Rand_rUInt4(i); }
  float Rand_Float(uint i) { return Rand_FV(Rand_UInt4(i)); }
  float Rand_gauss(uint i) { uint j = i * 2; return sqrt(-2 * ln(1 - Rand_Float(j))) * cos(TwoPI * (1 - Rand_Float(j + 1))); }
  float Rand_gauss(uint i, float mean, float standardDeviation) { return standardDeviation * Rand_gauss(i) + mean; }
  float Rand_Float(uint i, float A, float B) { return lerp(A, B, Rand_Float(i)); }
  uint Rand_UInt(uint i, uint A, uint B) { return flooru(Rand_Float(i, A, B)); }
  [numthreads(numthreads1, 1, 1)] void Rand_initState(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Rand_I) { uint i = id.x + g.Rand_I; if (i < g.Rand_N) Rand_rs[i] = index(Rand_rs[i], g.Rand_J, Rand_UInt(id.x, 0, uint_max)); } } }
  [numthreads(numthreads2, numthreads2, 1)] void Init_1D_Motion(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.stepN && id.x < g.pntN) { uint i = vI(id.xy); vs0[i] = vs[i] = roundi(100 * Rand_gauss(i, 0, g.gainSD * 100 / 2)); } } }
  #pragma kernel CalcPntSums
  #pragma kernel Init_1D_Motion
  #pragma kernel Axes_Lib_BDraw_ABuff_GetIndexes
  #pragma kernel Axes_Lib_BDraw_ABuff_IncSums
  #pragma kernel Axes_Lib_BDraw_ABuff_IncFills1
  #pragma kernel Axes_Lib_BDraw_ABuff_GetFills2
  #pragma kernel Axes_Lib_BDraw_ABuff_GetFills1
  #pragma kernel Axes_Lib_BDraw_ABuff_Get_Bits_Sums
  #pragma kernel Axes_Lib_BDraw_ABuff_GetSums
  #pragma kernel Axes_Lib_BDraw_ABuff_Get_Bits
  #pragma kernel Axes_Lib_BDraw_setDefaultTextInfo
  #pragma kernel Axes_Lib_BDraw_getTextInfo
  #pragma kernel Rand_initState
  #pragma kernel Rand_initSeed
  #pragma kernel Rand_grp_init_1M
  #pragma kernel Rand_grp_init_1K
  #pragma kernel Rand_grp_fill_1K