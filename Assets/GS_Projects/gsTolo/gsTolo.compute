
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define PickType_P_Wave_Compression	0
  #define PickType_P_Wave_Tension	1
  #define PickType_S_Wave	2
  #define PickType_Surface_Wave	3
  #define UInts_timeChanged	0
  #define UInts_N	1
  #define VGrid_Lib_BDraw_Draw_Point	0
  #define VGrid_Lib_BDraw_Draw_Sphere	1
  #define VGrid_Lib_BDraw_Draw_Line	2
  #define VGrid_Lib_BDraw_Draw_Arrow	3
  #define VGrid_Lib_BDraw_Draw_Signal	4
  #define VGrid_Lib_BDraw_Draw_LineSegment	5
  #define VGrid_Lib_BDraw_Draw_Texture_2D	6
  #define VGrid_Lib_BDraw_Draw_Quad	7
  #define VGrid_Lib_BDraw_Draw_WebCam	8
  #define VGrid_Lib_BDraw_Draw_Mesh	9
  #define VGrid_Lib_BDraw_Draw_Number	10
  #define VGrid_Lib_BDraw_Draw_N	11
  #define VGrid_Lib_BDraw_TextAlignment_BottomLeft	0
  #define VGrid_Lib_BDraw_TextAlignment_CenterLeft	1
  #define VGrid_Lib_BDraw_TextAlignment_TopLeft	2
  #define VGrid_Lib_BDraw_TextAlignment_BottomCenter	3
  #define VGrid_Lib_BDraw_TextAlignment_CenterCenter	4
  #define VGrid_Lib_BDraw_TextAlignment_TopCenter	5
  #define VGrid_Lib_BDraw_TextAlignment_BottomRight	6
  #define VGrid_Lib_BDraw_TextAlignment_CenterRight	7
  #define VGrid_Lib_BDraw_TextAlignment_TopRight	8
  #define VGrid_Lib_BDraw_Text_QuadType_FrontOnly	0
  #define VGrid_Lib_BDraw_Text_QuadType_FrontBack	1
  #define VGrid_Lib_BDraw_Text_QuadType_Switch	2
  #define VGrid_Lib_BDraw_Text_QuadType_Arrow	3
  #define VGrid_Lib_BDraw_Text_QuadType_Billboard	4
  #define VGrid_Lib_PaletteType_Rainbow	0
  #define VGrid_Lib_PaletteType_GradientRainbow	1
  #define VGrid_Lib_PaletteType_GradientRainbow10	2
  #define VGrid_Lib_PaletteType_GradientRainbow20	3
  #define VGrid_Lib_PaletteType_Heat	4
  #define VGrid_Lib_PaletteType_GradientHeat	5
  #define VGrid_Lib_PaletteType_WhiteRainbow	6
  #define VGrid_Lib_PaletteType_invRainbow	7
  #define VGrid_Lib_PaletteType_Green	8
  #define VGrid_Lib_PaletteType_Gray	9
  #define VGrid_Lib_PaletteType_DarkGray	10
  #define VGrid_Lib_PaletteType_CT	11
  #define Views_Lib_ProjectionMode_Automatic	0
  #define Views_Lib_ProjectionMode_Perspective	1
  #define Views_Lib_ProjectionMode_Orthographic	2
  #define GEM_Lib_BasisType_Pow2	0
  #define GEM_Lib_BasisType_Linear	1
  #define GEM_Lib_BasisType_Cubic	2
  #define GEM_Lib_BasisType_Exp	3
  #define GEM_Lib_UInts_missingInputs	0
  #define GEM_Lib_UInts_missingOutputs	1
  #define GEM_Lib_UInts_best_score	2
  #define GEM_Lib_UInts_best_scoreI	3
  #define GEM_Lib_UInts_mxScore	4
  #define GEM_Lib_UInts_mnScore	5
  #define GEM_Lib_UInts_mxScoreI	6
  #define GEM_Lib_UInts_mnScoreI	7
  #define GEM_Lib_UInts_sum_w	8
  #define GEM_Lib_UInts_maxError	9
  #define GEM_Lib_UInts_maxErrorI	10
  #define GEM_Lib_UInts_maxOutlier	11
  #define GEM_Lib_UInts_maxOutlierI	12
  #define GEM_Lib_UInts_max_fp	13
  #define GEM_Lib_UInts_max_fpI	14
  #define GEM_Lib_UInts_N	15
  #define GEM_Lib_Find_Mode_Unknowns	0
  #define GEM_Lib_Find_Mode_K_U	1
  #define GEM_Lib_Find_Mode_Outliers	2
  #define panel_w 0.39f
  #define VGrid_Lib_BDraw_Draw_Text3D 12
  #define VGrid_Lib_BDraw_LF 10
  #define VGrid_Lib_BDraw_TB 9
  #define VGrid_Lib_BDraw_ZERO 48
  #define VGrid_Lib_BDraw_NINE 57
  #define VGrid_Lib_BDraw_PERIOD 46
  #define VGrid_Lib_BDraw_COMMA 44
  #define VGrid_Lib_BDraw_PLUS 43
  #define VGrid_Lib_BDraw_MINUS 45
  #define VGrid_Lib_BDraw_SPACE 32
  #define g gTolo[0]
  #pragma use_dxc
  struct GTolo
  {
    uint isValidLicense, iterationN, showTime, showDist, showVel, showPaintSpheres, showWavefront, paintEditN, channelN, sourceN, sampleN, samplesPerSec, showSegYFolders, pickSetI, pickSetN, nearestTraceN, trainPickN, selectedLine, displayRcvSmps, selectedSrc, displaySrcSmps, selectedRcv, normalizeSignals, useVelocityFilter, segy_uintN, segy_lineI, segy_srcI, segy_rcvI, segy_traceN, segy_sample_interval_us, segy_smpN, totalSrcN, totalRcvN, srcN, rcvN, display_rcvI0, display_srcI0, display_signals_rcvN, display_signals_srcN, wave_isSelected, showBrush, addPaintN, smpN, smpPerSec, chN, VGrid_Lib_BDraw_AppendBuff_IndexN, VGrid_Lib_BDraw_AppendBuff_BitN, VGrid_Lib_BDraw_AppendBuff_N, VGrid_Lib_BDraw_AppendBuff_BitN1, VGrid_Lib_BDraw_AppendBuff_BitN2, VGrid_Lib_BDraw_omitText, VGrid_Lib_BDraw_includeUnicode, VGrid_Lib_BDraw_fontInfoN, VGrid_Lib_BDraw_textN, VGrid_Lib_BDraw_textCharN, VGrid_Lib_BDraw_boxEdgeN, VGrid_Lib_drawGrid, VGrid_Lib_drawBox, VGrid_Lib_drawAxes, VGrid_Lib_customAxesRangeN, VGrid_Lib_zeroOrigin, VGrid_Lib_drawSurface, VGrid_Lib_GridDrawFront, VGrid_Lib_GridDrawBack, VGrid_Lib_show_slices, VGrid_Lib_paletteType, VGrid_Lib_twoSided, VGrid_Lib_reCalc, VGrid_Lib_buildText, VGrid_Lib_isOrtho, VGrid_Lib_showMeshVal, VGrid_Lib_showMeshRange, VGrid_Lib_showOutline, VGrid_Lib_showSurface, VGrid_Lib_showAxes, VGrid_Lib_showNormalizedAxes, VGrid_Lib_retrace, GEM_Lib_AppendBuff_IndexN, GEM_Lib_AppendBuff_BitN, GEM_Lib_AppendBuff_N, GEM_Lib_AppendBuff_BitN1, GEM_Lib_AppendBuff_BitN2, GEM_Lib_Rand_N, GEM_Lib_Rand_I, GEM_Lib_Rand_J, GEM_Lib_xN, GEM_Lib_yN, GEM_Lib_tstN, GEM_Lib_trnN, GEM_Lib_levelI, GEM_Lib_levelN, GEM_Lib_searchPntN, GEM_Lib_basisType, GEM_Lib_findMode, GEM_Lib_unknownN, GEM_Lib_K_UN, GEM_Lib_outlierN, GEM_Lib_outlier_errorN, GEM_Lib_outlier_y_error_IndexN, GEM_Lib_fpN;
    float3 mouse_pnt, sourceOffset, minCoords, maxCoords, mouseRay_origin, mouseRay_direction, wind, mouse_paint_pnt, mouse_ray_origin, mouse_ray_direction, camDirection, VGrid_Lib_axesRangeMin, VGrid_Lib_axesRangeMax, VGrid_Lib_axesRangeMin1, VGrid_Lib_axesRangeMax1, VGrid_Lib_axesRangeMin2, VGrid_Lib_axesRangeMax2, VGrid_Lib_axesColor, VGrid_Lib_slices, VGrid_Lib_sliceRotation;
    float2 timeRange, distRange, velRange, velocity_filter_range, panelSize, VGrid_Lib_GridX, VGrid_Lib_GridY, VGrid_Lib_GridZ, VGrid_Lib_textSize, VGrid_Lib_paletteRange, VGrid_Lib_meshRange;
    float brushSize, paintVel, channelSpacing, sourceSpacing, stationRadius, signalPanelLength, signalPanelWidth, signalThickness, fillCrest, signalDisplayAmplification, totalWaveTime, VGrid_Lib_BDraw_fontSize, VGrid_Lib_BDraw_boxThickness, VGrid_Lib_resolution, VGrid_Lib_boxLineThickness, VGrid_Lib_axesOpacity, VGrid_Lib_GridLineThickness, VGrid_Lib_opacity, VGrid_Lib_meshVal, VGrid_Lib_orthoSize, VGrid_Lib_maxDist, VGrid_Lib_minResolution, GEM_Lib_tolerance, GEM_Lib_minBasisWidth, GEM_Lib_maxBasisWidth, GEM_Lib_basisStep, GEM_Lib_basisWidth, GEM_Lib_searchRadius, GEM_Lib_searchStep, GEM_Lib_bestScore, GEM_Lib_bestIterationScore, GEM_Lib_outlier_tolerance, GEM_Lib_fp_tolerance;
    uint2 smpDisplayRange, vel_smp_flat_ramp, screenSize, VGrid_Lib_viewSize;
    float4 VGrid_Lib_BDraw_boxColor;
    uint3 VGrid_Lib_nodeN;
    uint4 VGrid_Lib_viewRect, GEM_Lib_Rand_seed4;
    Matrix4x4 VGrid_Lib_camToWorld, VGrid_Lib_cameraInvProjection;
  };
  struct Src { uint source_Line_ID, source_ID; float3 source_Location; };
  struct Rcv { uint receiver_Line_ID, receiver_Channel; float3 receiver_Location; };
  struct PickSet { uint pickSet_select; uint pickSet_pickType; float2 pickSet_VelRange; uint2 pickSet_smpFlatRamp; float2 pickSet_freqRange; };
  struct TrainPick { uint trainPick_Line_ID, trainPick_source_ID, trainPick_Channel; uint trainPick_pickType; float trainPick_ArrialTime; };
  struct RayPick { uint rayPick_Line_ID, rayPick_source_ID, rayPick_Channel; uint rayPick_pickType; float rayPick_ArrialTime, rayPick_Amplitude; };
  struct WaveNode { float time, rayDist; float2 AP; };
  struct PropNode { float3 vel, att; };
  struct Paint { float3 p; float r, v; };
  struct VGrid_Lib_BDraw_FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct VGrid_Lib_BDraw_TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  struct VGrid_Lib_TRay { float3 origin, direction; float4 color; float dist; };
  struct SegYFolder { uint segy_include; string segy_folderName; uint segy_srcN, segy_rcvN; };
  struct Views_Lib_CamView { string viewName; float3 viewCenter; float viewDist; float2 viewTiltSpin; uint viewProjection; uint view_selectedLine; };
  groupshared uint4 GEM_Lib_Rand_grp[1024];
  groupshared uint VGrid_Lib_BDraw_AppendBuff_grp[1024];
  groupshared uint VGrid_Lib_BDraw_AppendBuff_grp0[1024];
  groupshared uint GEM_Lib_AppendBuff_grp[1024];
  groupshared uint GEM_Lib_AppendBuff_grp0[1024];
  RWStructuredBuffer<GTolo> gTolo;
  RWStructuredBuffer<uint> VGrid_Lib_BDraw_tab_delimeted_text, nearestTraceI, traceMouseDist, traceAbsMax, segy_uints, segy_uints0, uints, VGrid_Lib_BDraw_AppendBuff_Bits, VGrid_Lib_BDraw_AppendBuff_Sums, VGrid_Lib_BDraw_AppendBuff_Indexes, VGrid_Lib_BDraw_AppendBuff_Fills1, VGrid_Lib_BDraw_AppendBuff_Fills2, GEM_Lib_AppendBuff_Bits, GEM_Lib_AppendBuff_Sums, GEM_Lib_AppendBuff_Indexes, GEM_Lib_AppendBuff_Fills1, GEM_Lib_AppendBuff_Fills2, GEM_Lib_uints, GEM_Lib_scores, GEM_Lib_maxErrors, GEM_Lib_unknowns, GEM_Lib_K_Us, GEM_Lib_outliers, GEM_Lib_outlier_errors, GEM_Lib_fps;
  RWStructuredBuffer<VGrid_Lib_BDraw_TextInfo> VGrid_Lib_BDraw_textInfos;
  RWStructuredBuffer<VGrid_Lib_BDraw_FontInfo> VGrid_Lib_BDraw_fontInfos;
  RWStructuredBuffer<uint2> VGrid_Lib_depthColors;
  RWStructuredBuffer<Color32> VGrid_Lib_paletteBuffer;
  RWStructuredBuffer<uint4> GEM_Lib_Rand_rs;
  RWStructuredBuffer<Src> srcs;
  RWStructuredBuffer<Rcv> rcvs;
  RWStructuredBuffer<PickSet> pickSets;
  RWStructuredBuffer<TrainPick> trainPicks;
  RWStructuredBuffer<RayPick> rayPicks;
  RWStructuredBuffer<float> smps, smps0, VGrid_Lib_Vals, GEM_Lib_tstXs, GEM_Lib_tstYs, GEM_Lib_trnXYs, GEM_Lib_trnCs, GEM_Lib_searchPnts, GEM_Lib_bestInputs, GEM_Lib_tstXs0, GEM_Lib_tstYs0, GEM_Lib_trnXs0, GEM_Lib_trnYs0, GEM_Lib_w_avg_Xs;
  RWStructuredBuffer<WaveNode> waveNodes;
  RWStructuredBuffer<PropNode> propNodes;
  RWStructuredBuffer<Paint> paints, paints0;
  RWStructuredBuffer<int> GEM_Lib_ys, GEM_Lib_Ranges, GEM_Lib_wx;
  RWStructuredBuffer<float2> GEM_Lib_ranges, GEM_Lib_desiredValWeights;
  [numthreads(numthreads3, numthreads3, numthreads3)] void calc_traceAbsMax(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.z < g.smpN && id.y < g.rcvN && id.x < g.srcN)
	{
		uint srcI = id.x, rcvI = id.y, smpI = id.z, j = srcI * g.rcvN + rcvI;
		uint V = ceilu(abs(smps[j * g.smpN + smpI]) * 1e6f);
		InterlockedMax(traceAbsMax, j, V);
	}
	
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void init_traceAbsMax(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.rcvN && id.x < g.srcN) { traceAbsMax[id.x * g.rcvN + id.y] = 0; } } }
  [numthreads(numthreads3, numthreads3, numthreads3)] void copy_nodes(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN)) { uint i = id_to_i(id, g.VGrid_Lib_nodeN); waveNodes[i] = waveNodes[i + product(g.VGrid_Lib_nodeN)]; }
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void add_paint(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.paintEditN + 1)
	{
		uint i = id.x;
		if (i < g.paintEditN) paints[i] = paints0[i];
		else if (i == g.paintEditN)
		{
			Paint p = paints[i], p0 = paints0[i == 0 ? 0 : i - 1];
			if (any(p0.p != g.mouse_paint_pnt) || p0.r != g.brushSize || p0.v != g.paintVel) { p.p = g.mouse_paint_pnt; p.r = g.brushSize; p.v = g.paintVel; paints[i] = p; g.addPaintN = true; }
			else g.addPaintN = false;
		}
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void init_nearestTraceI(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < 1) { nearestTraceI[0] = uint_max; } } }
  [numthreads(numthreads1, 1, 1)] void init_traceMouseDist(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < 1) { traceMouseDist[0] = uint_max; } } }
  [numthreads(numthreads2, numthreads2, 1)] void reverse_segy_uints(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < 4 && id.x < g.segy_uintN)
	{
		uint i = id.x, j = id.y;
		if (j == 0) InterlockedOr(segy_uints, i, (segy_uints0[i] & 0xff) << 24);
		else if (j == 1) InterlockedOr(segy_uints, i, (segy_uints0[i] & 0xff00) << 8);
		else if (j == 2) InterlockedOr(segy_uints, i, (segy_uints0[i] & 0xff0000) >> 8);
		else InterlockedOr(segy_uints, i, segy_uints0[i] >> 24);
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void zero_segy_uints(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.segy_uintN) { segy_uints[id.x] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Rand_initSeed(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_Rand_N) { uint i = id.x; GEM_Lib_Rand_rs[i] = i == 0 ? g.GEM_Lib_Rand_seed4 : u0000; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_AppendBuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : GEM_Lib_AppendBuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = GEM_Lib_AppendBuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); GEM_Lib_AppendBuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_AppendBuff_BitN) { uint i = id.x; if (i >= numthreads1) GEM_Lib_AppendBuff_Sums[i] += GEM_Lib_AppendBuff_Fills1[i / numthreads1 - 1]; if (i == g.GEM_Lib_AppendBuff_BitN - 1) g.GEM_Lib_AppendBuff_IndexN = GEM_Lib_AppendBuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_AppendBuff_BitN1) { uint i = id.x; if (i >= numthreads1) GEM_Lib_AppendBuff_Fills1[i] += GEM_Lib_AppendBuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.GEM_Lib_AppendBuff_BitN2 - 1 ? GEM_Lib_AppendBuff_Fills1[j] : i < g.GEM_Lib_AppendBuff_BitN2 ? GEM_Lib_AppendBuff_Fills1[g.GEM_Lib_AppendBuff_BitN1 - 1] : 0, s;
    GEM_Lib_AppendBuff_grp0[grpI] = c; GEM_Lib_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.GEM_Lib_AppendBuff_BitN2) GEM_Lib_AppendBuff_grp[grpI] = GEM_Lib_AppendBuff_grp0[grpI] + GEM_Lib_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      GEM_Lib_AppendBuff_grp0[grpI] = GEM_Lib_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.GEM_Lib_AppendBuff_BitN2) GEM_Lib_AppendBuff_Fills2[i] = GEM_Lib_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.GEM_Lib_AppendBuff_BitN1 - 1 ? GEM_Lib_AppendBuff_Sums[j] : i < g.GEM_Lib_AppendBuff_BitN1 ? GEM_Lib_AppendBuff_Sums[g.GEM_Lib_AppendBuff_BitN - 1] : 0, s;
    GEM_Lib_AppendBuff_grp0[grpI] = c; GEM_Lib_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.GEM_Lib_AppendBuff_BitN1) GEM_Lib_AppendBuff_grp[grpI] = GEM_Lib_AppendBuff_grp0[grpI] + GEM_Lib_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      GEM_Lib_AppendBuff_grp0[grpI] = GEM_Lib_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.GEM_Lib_AppendBuff_BitN1) GEM_Lib_AppendBuff_Fills1[i] = GEM_Lib_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.GEM_Lib_AppendBuff_BitN ? countbits(GEM_Lib_AppendBuff_Bits[i]) : 0, s;
    GEM_Lib_AppendBuff_grp0[grpI] = c; GEM_Lib_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.GEM_Lib_AppendBuff_BitN) GEM_Lib_AppendBuff_grp[grpI] = GEM_Lib_AppendBuff_grp0[grpI] + GEM_Lib_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      GEM_Lib_AppendBuff_grp0[grpI] = GEM_Lib_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.GEM_Lib_AppendBuff_BitN) GEM_Lib_AppendBuff_Sums[i] = GEM_Lib_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_findMaxErrorI(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_tstN) { uint tst_PntI = id.x; if (GEM_Lib_maxErrors[tst_PntI] == GEM_Lib_uints[GEM_Lib_UInts_maxError]) GEM_Lib_uints[GEM_Lib_UInts_maxErrorI] = tst_PntI; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_findMaxError(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_tstN) { uint tst_PntI = id.x; InterlockedMax(GEM_Lib_uints, GEM_Lib_UInts_maxError, GEM_Lib_maxErrors[tst_PntI]); } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_initMaxError(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_tstN) { uint tst_PntI = id.x; GEM_Lib_maxErrors[tst_PntI] = 0; if (tst_PntI == 0) GEM_Lib_uints[GEM_Lib_UInts_maxError] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_update_w_avg_Xs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_xN) { uint xI = id.x; GEM_Lib_w_avg_Xs[xI] = (GEM_Lib_wx[xI] / 1e6f) + GEM_Lib_bestInputs[xI]; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_update_best_Score(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < 1) { g.GEM_Lib_bestIterationScore = GEM_Lib_scores[GEM_Lib_uints[GEM_Lib_UInts_mxScoreI]] / 1e6f; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_init_w(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_xN + 1) { uint xI = id.x; if (xI < g.GEM_Lib_xN) GEM_Lib_wx[xI] = 0; else GEM_Lib_uints[GEM_Lib_UInts_sum_w] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_calc_sum_w(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.GEM_Lib_searchPntN)
    {
      uint searchI = id.x;
      uint score = GEM_Lib_scores[searchI], mnScore = GEM_Lib_scores[GEM_Lib_uints[GEM_Lib_UInts_mnScoreI]], mxScore = GEM_Lib_scores[GEM_Lib_uints[GEM_Lib_UInts_mxScoreI]], avgScore = mxScore / 2 + mnScore / 2;
      if (score > avgScore) InterlockedAdd(GEM_Lib_uints, GEM_Lib_UInts_sum_w, score - avgScore);
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_find_mn_mx_ScoreIs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < 2 && id.x < g.GEM_Lib_searchPntN)
    {
      uint searchI = id.x, mI = id.y;
      if (mI == 0) { if (GEM_Lib_scores[searchI] == GEM_Lib_uints[GEM_Lib_UInts_mxScore]) GEM_Lib_uints[GEM_Lib_UInts_mxScoreI] = searchI; }
      else { if (GEM_Lib_scores[searchI] == GEM_Lib_uints[GEM_Lib_UInts_mnScore]) GEM_Lib_uints[GEM_Lib_UInts_mnScoreI] = searchI; }
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_find_mn_mx_Scores(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < 2 && id.x < g.GEM_Lib_searchPntN)
    {
      uint searchI = id.x, mI = id.y;
      if (mI == 0) InterlockedMax(GEM_Lib_uints, GEM_Lib_UInts_mxScore, GEM_Lib_scores[searchI]); else InterlockedMin(GEM_Lib_uints, GEM_Lib_UInts_mnScore, GEM_Lib_scores[searchI]);
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_inv_Scores(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.GEM_Lib_searchPntN)
    {
      uint searchI = id.x, mI = id.y;
      uint Score = roundu(rcp(1e-6f * (GEM_Lib_scores[searchI] + 1)));
      GEM_Lib_scores[searchI] = Score;
      InterlockedMax(GEM_Lib_uints, GEM_Lib_UInts_mxScore, Score);
      InterlockedMin(GEM_Lib_uints, GEM_Lib_UInts_mnScore, Score);
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_init_search(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.GEM_Lib_searchPntN + 3)
    {
      uint i = id.x;
      if (i < g.GEM_Lib_searchPntN) GEM_Lib_scores[i] = 0;
      else
      {
        i -= g.GEM_Lib_searchPntN;
        if (i == 0) GEM_Lib_uints[GEM_Lib_UInts_mxScore] = 0; else if (i == 1) GEM_Lib_uints[GEM_Lib_UInts_mnScore] = uint_max; else GEM_Lib_uints[GEM_Lib_UInts_best_score] = 0;
      }
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_init_search_inputs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < 2 && id.x < g.GEM_Lib_xN)
    {
      uint xI = id.x, j = id.y;
      float2 dw = GEM_Lib_desiredValWeights[xI];
      if (j == 0) GEM_Lib_bestInputs[xI] = dw.y >= 0.99f ? dw.x : 0.5f;
      else GEM_Lib_w_avg_Xs[xI] = dw.x;
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_initMissingEntries(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < 2) { GEM_Lib_uints[id.x] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Copy_Ranges_To_ranges(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_xN + g.GEM_Lib_yN) { uint i = id.x; GEM_Lib_ranges[i] = float2(GEM_Lib_Ranges[i * 2], GEM_Lib_Ranges[i * 2 + 1]) / 100000.0f; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Init_Ranges(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_xN + g.GEM_Lib_yN) { uint i = id.x; GEM_Lib_Ranges[i * 2] = int_max; GEM_Lib_Ranges[i * 2 + 1] = int_min; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_assign_outliers(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_outlierN) { uint i = id.x; GEM_Lib_outliers[i] = GEM_Lib_AppendBuff_Indexes[i]; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_assign_K_Us(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_K_UN) { uint i = id.x; GEM_Lib_K_Us[i] = GEM_Lib_AppendBuff_Indexes[i]; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_assign_unknowns(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_unknownN) { uint i = id.x; GEM_Lib_unknowns[i] = GEM_Lib_AppendBuff_Indexes[i]; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_find_max_fpI(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_tstN) { uint i = id.x; if (GEM_Lib_uints[GEM_Lib_UInts_maxOutlier] == GEM_Lib_outlier_errors[i]) GEM_Lib_uints[GEM_Lib_UInts_maxOutlierI] = i; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_calc_max_fp(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_tstN) { uint i = id.x; InterlockedMax(GEM_Lib_uints, GEM_Lib_UInts_maxOutlier, GEM_Lib_outlier_errors[i]); } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_init_max_fp(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < 1) { GEM_Lib_uints[GEM_Lib_UInts_maxOutlier] = 0; GEM_Lib_uints[GEM_Lib_UInts_maxOutlierI] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_init_fp_errors(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_tstN) { GEM_Lib_outlier_errors[id.x] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.VGrid_Lib_BDraw_AppendBuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : VGrid_Lib_BDraw_AppendBuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = VGrid_Lib_BDraw_AppendBuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); VGrid_Lib_BDraw_AppendBuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.VGrid_Lib_BDraw_AppendBuff_BitN) { uint i = id.x; if (i >= numthreads1) VGrid_Lib_BDraw_AppendBuff_Sums[i] += VGrid_Lib_BDraw_AppendBuff_Fills1[i / numthreads1 - 1]; if (i == g.VGrid_Lib_BDraw_AppendBuff_BitN - 1) g.VGrid_Lib_BDraw_AppendBuff_IndexN = VGrid_Lib_BDraw_AppendBuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.VGrid_Lib_BDraw_AppendBuff_BitN1) { uint i = id.x; if (i >= numthreads1) VGrid_Lib_BDraw_AppendBuff_Fills1[i] += VGrid_Lib_BDraw_AppendBuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.VGrid_Lib_BDraw_AppendBuff_BitN2 - 1 ? VGrid_Lib_BDraw_AppendBuff_Fills1[j] : i < g.VGrid_Lib_BDraw_AppendBuff_BitN2 ? VGrid_Lib_BDraw_AppendBuff_Fills1[g.VGrid_Lib_BDraw_AppendBuff_BitN1 - 1] : 0, s;
    VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = c; VGrid_Lib_BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.VGrid_Lib_BDraw_AppendBuff_BitN2) VGrid_Lib_BDraw_AppendBuff_grp[grpI] = VGrid_Lib_BDraw_AppendBuff_grp0[grpI] + VGrid_Lib_BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = VGrid_Lib_BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.VGrid_Lib_BDraw_AppendBuff_BitN2) VGrid_Lib_BDraw_AppendBuff_Fills2[i] = VGrid_Lib_BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.VGrid_Lib_BDraw_AppendBuff_BitN1 - 1 ? VGrid_Lib_BDraw_AppendBuff_Sums[j] : i < g.VGrid_Lib_BDraw_AppendBuff_BitN1 ? VGrid_Lib_BDraw_AppendBuff_Sums[g.VGrid_Lib_BDraw_AppendBuff_BitN - 1] : 0, s;
    VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = c; VGrid_Lib_BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.VGrid_Lib_BDraw_AppendBuff_BitN1) VGrid_Lib_BDraw_AppendBuff_grp[grpI] = VGrid_Lib_BDraw_AppendBuff_grp0[grpI] + VGrid_Lib_BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = VGrid_Lib_BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.VGrid_Lib_BDraw_AppendBuff_BitN1) VGrid_Lib_BDraw_AppendBuff_Fills1[i] = VGrid_Lib_BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.VGrid_Lib_BDraw_AppendBuff_BitN ? countbits(VGrid_Lib_BDraw_AppendBuff_Bits[i]) : 0, s;
    VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = c; VGrid_Lib_BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.VGrid_Lib_BDraw_AppendBuff_BitN) VGrid_Lib_BDraw_AppendBuff_grp[grpI] = VGrid_Lib_BDraw_AppendBuff_grp0[grpI] + VGrid_Lib_BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = VGrid_Lib_BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.VGrid_Lib_BDraw_AppendBuff_BitN) VGrid_Lib_BDraw_AppendBuff_Sums[i] = VGrid_Lib_BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Rand_grp_fill_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Rand_grp_init_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Rand_grp_init_1M(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void Read_segy_smps(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.segy_smpN) { }
     
    }
  }
  WaveNode waveNode(uint i) { return waveNodes[i]; }
  WaveNode waveNode(uint3 id) { return waveNode(id_to_i(id, g.VGrid_Lib_nodeN)); }
  PropNode propNode(uint i) { return propNodes[i]; }
  PropNode propNode_id(uint3 id) { return propNode(id_to_i(id, g.VGrid_Lib_nodeN)); }
  float3 GetWavefront(uint3 id, float n1_t, float3 p1)
	{
		float3 w = f000, wN = f000;
		if (id.x > 0) { w.x -= waveNode(id - u100).time - n1_t; wN.x++; }
		if (id.x < g.VGrid_Lib_nodeN.x - 1) { w.x += waveNode(id + u100).time - n1_t; wN.x++; }
		if (id.y > 0) { w.y -= waveNode(id - u010).time - n1_t; wN.y++; }
		if (id.y < g.VGrid_Lib_nodeN.y - 1) { w.y += waveNode(id + u010).time - n1_t; wN.y++; }
		if (id.z > 0) { w.z -= waveNode(id - u001).time - n1_t; wN.z++; }
		if (id.z < g.VGrid_Lib_nodeN.z - 1) { w.z += waveNode(id + u001).time - n1_t; wN.z++; }
		return normalize(w / max(f111, wN));
	}
	
  void waveNode(uint i, WaveNode node) { waveNodes[i + product(g.VGrid_Lib_nodeN)] = node; }
  void waveNode_id(uint3 id, WaveNode node) { waveNode(id_to_i(id, g.VGrid_Lib_nodeN), node); }
  float3 GetStationSignal_p0(uint i) { return (i < g.display_signals_rcvN ? rcvs[g.display_rcvI0 + i].receiver_Location : srcs[g.display_srcI0 + i - g.display_signals_rcvN].source_Location).xzy - g.stationRadius * f010; }
  float3 GetStationSignal_p1(float3 p0) { return p0 + g.signalPanelLength * f0_0; }
  [numthreads(numthreads1, 1, 1)] void calc_nearestTraceI(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.display_signals_rcvN + g.display_signals_srcN)
	{
		uint i = id.x;
		float3 p0 = GetStationSignal_p0(i), p1 = GetStationSignal_p1(p0);
		float4 pd = GetSkewRayNearestIntersectionDist(g.mouseRay_origin, g.mouseRay_direction, p0, p1 - p0);
		if (roundu(pd.w * 1e6f) == traceMouseDist[0]) nearestTraceI[0] = i;
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void calc_traceMouseDist(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.display_signals_rcvN + g.display_signals_srcN)
	{
		uint i = id.x;
		float3 p0 = GetStationSignal_p0(i), p1 = GetStationSignal_p1(p0);
		float4 pd = GetSkewRayNearestIntersectionDist(g.mouseRay_origin, g.mouseRay_direction, p0, p1 - p0);
		InterlockedMin(traceMouseDist, 0, roundu(pd.w * 1e6f));
	}
	
    }
  }
  uint GEM_Lib_tstXI(uint _tst_PntI, uint xI) { return _tst_PntI * g.GEM_Lib_xN + xI; }
  void GEM_Lib_tstX(uint _tstI, uint xI, float v) { GEM_Lib_tstXs[GEM_Lib_tstXI(_tstI, xI)] = v; }
  uint GEM_Lib_tstYI(uint _tst_PntI, uint yI) { return _tst_PntI * g.GEM_Lib_yN + yI; }
  [numthreads(numthreads3, numthreads3, numthreads3)] void GEM_Lib_zero_output_ys(uint3 id : SV_DispatchThreadID) { unchecked { if (id.z < 2 && id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN) { uint _tst_PntI = id.x, yI = id.y, outI = GEM_Lib_tstYI(_tst_PntI, yI) * 2 + id.z; GEM_Lib_ys[outI] = 0; } } }
  void GEM_Lib_tstY(uint _tstI, uint yI, float v) { GEM_Lib_tstYs[GEM_Lib_tstYI(_tstI, yI)] = v; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_remove_maxError_tst_Pnt(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint tst_PntI = id.x, i = id.y, tst_PntJ = tst_PntI + Is(tst_PntI >= GEM_Lib_uints[GEM_Lib_UInts_maxErrorI]);
      if (i < g.GEM_Lib_xN) GEM_Lib_tstX(tst_PntI, i, GEM_Lib_tstXs0[GEM_Lib_tstXI(tst_PntJ, i)]); else GEM_Lib_tstY(tst_PntI, i - g.GEM_Lib_xN, GEM_Lib_tstYs0[GEM_Lib_tstYI(tst_PntJ, i - g.GEM_Lib_xN)]);
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_zero_outputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN) { uint _tst_PntI = id.x, yI = id.y; GEM_Lib_tstY(_tst_PntI, yI, 0); } } }
  float GEM_Lib_tstX_01(uint _tstI, uint xI) { return GEM_Lib_tstXs[GEM_Lib_tstXI(_tstI, xI)]; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_normalize_inputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_xN && id.x < g.GEM_Lib_tstN) { uint _tst_PntI = id.x, xI = id.y; GEM_Lib_tstX(_tst_PntI, xI, lerp1(GEM_Lib_ranges[xI], GEM_Lib_tstX_01(_tst_PntI, xI))); } } }
  float GEM_Lib_tstY(uint _tstI, uint yI) { return GEM_Lib_tstYs[GEM_Lib_tstYI(_tstI, yI)]; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_copy_tst_Pnts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint tst_PntI = id.x, i = id.y;
      if (i < g.GEM_Lib_xN) GEM_Lib_tstXs0[GEM_Lib_tstXI(tst_PntI, i)] = GEM_Lib_tstX_01(tst_PntI, i); else GEM_Lib_tstYs0[GEM_Lib_tstYI(tst_PntI, i - g.GEM_Lib_xN)] = GEM_Lib_tstY(tst_PntI, i - g.GEM_Lib_xN);
    }
    }
  }
  uint GEM_Lib_trnXI(uint pntI, uint xI) { return pntI * g.GEM_Lib_xN + xI; }
  void GEM_Lib_trnX(uint pntI, uint xI, float v) { GEM_Lib_trnXYs[GEM_Lib_trnXI(pntI, xI)] = v; }
  uint GEM_Lib_trnCI(uint _levelI, uint pntI, uint yI) { return (_levelI * g.GEM_Lib_trnN + pntI) * g.GEM_Lib_yN + yI; }
  void GEM_Lib_trnC(uint _levelI, uint pntI, uint yI, float v) { GEM_Lib_trnCs[GEM_Lib_trnCI(_levelI, pntI, yI)] = v; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_move_tst_Pnt_to_pnt(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN)
    {
      uint pntI = id.x, i = id.y;
      if (i < g.GEM_Lib_xN) GEM_Lib_trnX(pntI, i, pntI < g.GEM_Lib_trnN - 1 ? GEM_Lib_trnXs0[GEM_Lib_trnXI(pntI, i)] : GEM_Lib_tstXs0[GEM_Lib_trnXI(GEM_Lib_uints[GEM_Lib_UInts_maxErrorI], i)]);
      else GEM_Lib_trnC(0, pntI, i - g.GEM_Lib_xN, pntI < g.GEM_Lib_trnN - 1 ? GEM_Lib_trnYs0[GEM_Lib_trnCI(0, pntI, i - g.GEM_Lib_xN)] : GEM_Lib_tstYs0[GEM_Lib_trnCI(0, GEM_Lib_uints[GEM_Lib_UInts_maxErrorI], i - g.GEM_Lib_xN)]);
    }
    }
  }
  float GEM_Lib_trnX(uint pntI, uint xI) { return GEM_Lib_trnXYs[GEM_Lib_trnXI(pntI, xI)]; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_copy_pntXs_inputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_xN && id.x < g.GEM_Lib_trnN) { uint pntI = id.x, xI = id.y; GEM_Lib_tstX(pntI, xI, GEM_Lib_trnX(pntI, xI)); } } }
  float GEM_Lib_trnC(uint _levelI, uint pntI, uint yI) { return GEM_Lib_trnCs[GEM_Lib_trnCI(_levelI, pntI, yI)]; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_copy_pnts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN)
    {
      uint pntI = id.x, i = id.y;
      if (i < g.GEM_Lib_xN) GEM_Lib_trnXs0[GEM_Lib_trnXI(pntI, i)] = GEM_Lib_trnX(pntI, i); else GEM_Lib_trnYs0[GEM_Lib_trnCI(0, pntI, i - g.GEM_Lib_xN)] = GEM_Lib_trnC(0, pntI, i - g.GEM_Lib_xN);
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_copy_pnts_to_tst_Pnts(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN) { uint pntI = id.x, i = id.y; if (i < g.GEM_Lib_xN) GEM_Lib_tstX(pntI, i, GEM_Lib_trnX(pntI, i)); else GEM_Lib_tstY(pntI, i - g.GEM_Lib_xN, GEM_Lib_trnC(0, pntI, i - g.GEM_Lib_xN)); } } }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_detectMissingEntries(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN)
    {
      uint pntI = id.x, i = id.y;
      if (i < g.GEM_Lib_xN) { if (IsNegInf(GEM_Lib_trnX(pntI, i))) InterlockedOr(GEM_Lib_uints, GEM_Lib_UInts_missingInputs, 1); }
      else { if (IsNegInf(GEM_Lib_trnC(0, pntI, i - g.GEM_Lib_xN))) InterlockedOr(GEM_Lib_uints, GEM_Lib_UInts_missingOutputs, 1); }
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_copy_outputs_pntYs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN) { uint pntI = id.x, yI = id.y; if (g.GEM_Lib_levelI + 1 < g.GEM_Lib_levelN) GEM_Lib_trnC(g.GEM_Lib_levelI + 1, pntI, yI, GEM_Lib_trnC(g.GEM_Lib_levelI, pntI, yI) - GEM_Lib_tstY(pntI, yI)); } } }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_copy_pntYs_outputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN) { uint pntI = id.x, yI = id.y; GEM_Lib_tstY(pntI, yI, GEM_Lib_trnC(g.GEM_Lib_levelI, pntI, yI)); } } }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_normalize_trn_Points(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN)
    {
      uint pntI = id.x, xI = id.y, yI = xI - g.GEM_Lib_xN;
      if (xI < g.GEM_Lib_xN) { float v = GEM_Lib_trnX(pntI, xI); if (IsNotNegInf(v)) GEM_Lib_trnX(pntI, xI, lerp1(GEM_Lib_ranges[xI], v)); }
      else { float v = GEM_Lib_trnC(0, pntI, yI); if (IsNotNegInf(v)) GEM_Lib_trnC(0, pntI, yI, lerp1(GEM_Lib_ranges[yI + g.GEM_Lib_xN], v)); }
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Get_ranges(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.GEM_Lib_xN + g.GEM_Lib_yN)
    {
      float2 r = initRange;
      if (id.x < g.GEM_Lib_xN) { uint xI = id.x; for (uint pntI = 0; pntI < g.GEM_Lib_trnN; pntI++) { float v = GEM_Lib_trnX(pntI, xI); if (IsNotNegInf(v)) r = SetRange(r, v); } }
      else { uint yI = id.x - g.GEM_Lib_xN; for (uint pntI = 0; pntI < g.GEM_Lib_trnN; pntI++) { float v = GEM_Lib_trnC(0, pntI, yI); if (IsNotNegInf(v)) r = SetRange(r, v); } }
      GEM_Lib_ranges[id.x] = r;
    }
    }
  }
  uint GEM_Lib_f2u(float f) { return roundu(f * 1e6f); }
  uint GEM_Lib_searchPntI(uint pntI, uint xI) { return pntI * g.GEM_Lib_xN + xI; }
  float GEM_Lib_searchPntX(uint pntI, uint xI) { return GEM_Lib_searchPnts[GEM_Lib_searchPntI(pntI, xI)]; }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_update_best_x(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_xN) { uint xI = id.x; GEM_Lib_bestInputs[xI] = GEM_Lib_searchPntX(GEM_Lib_uints[GEM_Lib_UInts_mxScoreI], xI); } } }
  void GEM_Lib_searchPntX(uint pntI, uint xI, float v) { GEM_Lib_searchPnts[GEM_Lib_searchPntI(pntI, xI)] = v; }
  float GEM_Lib_tstY_v(uint _tstI, uint yI) { return lerp(GEM_Lib_ranges[g.GEM_Lib_xN + yI], GEM_Lib_tstY(_tstI, yI)); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_unNormalize_outputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN) { uint _tst_PntI = id.x, yI = id.y; GEM_Lib_tstY(_tst_PntI, yI, GEM_Lib_tstY_v(_tst_PntI, yI)); } } }
  float GEM_Lib_Basis(float dst, float width)
  {
    float v = dst * rcp(width), h = 0.1f, d = 1 - h;
    switch ((uint)g.GEM_Lib_basisType)
    {
      case GEM_Lib_BasisType_Pow2: v = max(0.001f, pow2(-sqr(v))); break;
      case GEM_Lib_BasisType_Exp: v = max(0.001f, exp(-sqr(v))); break;
      case GEM_Lib_BasisType_Cubic: v = max(h, d - v * (d - 0.5f)); v = v * v * (3 - 2 * v); break;
      case GEM_Lib_BasisType_Linear: v = max(h, d - v * (d - 0.5f)); break;
    }
    return v;
  }
  [numthreads(numthreads3, numthreads3, numthreads3)] void GEM_Lib_calc_output_ys(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.z < g.GEM_Lib_yN && id.y < g.GEM_Lib_trnN && id.x < g.GEM_Lib_tstN)
    {
      uint _tst_PntI = id.x, pntI = id.y, yI = id.z, xI;
      float dst2;
      for (dst2 = 0, xI = 0; xI < g.GEM_Lib_xN; xI++) dst2 += sqr(GEM_Lib_trnX(pntI, xI) - GEM_Lib_tstX_01(_tst_PntI, xI));
      float weight = GEM_Lib_Basis(sqrt(dst2), g.GEM_Lib_basisWidth), y = GEM_Lib_trnC(g.GEM_Lib_levelI, pntI, yI);
      float2 valWeight = float2(y * weight, weight);
      int2 V = roundi(valWeight * 1e6f);
      uint outI = GEM_Lib_tstYI(_tst_PntI, yI) * 2;
      InterlockedAdd(GEM_Lib_ys, outI, V.x);
      InterlockedAdd(GEM_Lib_ys, outI + 1, V.y);
    }
    }
  }
  float GEM_Lib_calc_dist2_trn_trn(uint i1, uint i2) { float d = 0; for (uint xI = 0; xI < g.GEM_Lib_xN; xI++) d += sqr(GEM_Lib_trnX(i1, xI) - GEM_Lib_trnX(i2, xI)); return d; }
  float GEM_Lib_Calc_Output_v(float yw, float w) { bool lev0 = g.GEM_Lib_levelI == 0; return lev0 && w == 0 ? 0 : yw * rcp(lev0 ? w : max(w, 1)); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_pntHs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN)
    {
      uint pntI0 = id.x, yI = id.y;
      float y0 = GEM_Lib_trnC(g.GEM_Lib_levelI, pntI0, yI), y1, dst2, weight, y;
      float2 valWeight = f00;
      for (uint pntI = 0; pntI < g.GEM_Lib_trnN; pntI++)
        if (pntI != pntI0)
        {
          dst2 = GEM_Lib_calc_dist2_trn_trn(pntI0, pntI);
          weight = GEM_Lib_Basis(sqrt(dst2), g.GEM_Lib_basisWidth); y = GEM_Lib_trnC(g.GEM_Lib_levelI, pntI, yI);
          valWeight += float2(y * weight, weight);
        }
      weight = GEM_Lib_Basis(0, g.GEM_Lib_basisWidth); y = GEM_Lib_trnC(g.GEM_Lib_levelI, pntI0, yI);
      valWeight += float2(y * weight, weight);
      y1 = GEM_Lib_Calc_Output_v(valWeight.x, valWeight.y);
      float GEM_Lib_error = y0 - y1;
      GEM_Lib_trnC(g.GEM_Lib_levelI + 1, pntI0, yI, GEM_Lib_error);
    }
    }
  }
  float GEM_Lib_Calc_Output_v(uint outputI) { return GEM_Lib_Calc_Output_v(GEM_Lib_ys[outputI * 2] * 1e-6f, GEM_Lib_ys[outputI * 2 + 1] * 1e-6f); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_output_sums(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint _tst_PntI = id.x, yI = id.y, outputI = GEM_Lib_tstYI(_tst_PntI, yI);
      float v = GEM_Lib_Calc_Output_v(outputI);
      if (g.GEM_Lib_levelI > 0) v += GEM_Lib_tstY(_tst_PntI, yI);
      GEM_Lib_tstY(_tst_PntI, yI, v);
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_outputs_01(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint _tst_PntI = id.x, yI = id.y, outputI = GEM_Lib_tstYI(_tst_PntI, yI);
      float v = GEM_Lib_Calc_Output_v(outputI);
      GEM_Lib_tstY(_tst_PntI, yI, v);
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_outputs_v(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint _tst_PntI = id.x, yI = id.y, outputI = GEM_Lib_tstYI(_tst_PntI, yI);
      float v = GEM_Lib_Calc_Output_v(outputI);
      v = lerp(GEM_Lib_ranges[g.GEM_Lib_xN + yI], v);
      GEM_Lib_tstY(_tst_PntI, yI, v);
    }
    }
  }
  uint GEM_Lib_trnYI(uint pntI, uint yI) { return g.GEM_Lib_trnN * g.GEM_Lib_xN + pntI * g.GEM_Lib_yN + yI; }
  float GEM_Lib_Get_tstInput(uint tstI, uint xI) { return tstI / (g.GEM_Lib_tstN - 1.0f); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_assign_tst_Inputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_xN && id.x < g.GEM_Lib_tstN) { uint _tstI = id.x, xI = id.y; GEM_Lib_tstX(_tstI, xI, GEM_Lib_Get_tstInput(_tstI, xI)); } } }
  float GEM_Lib_trnY(uint pntI, uint yI) { return GEM_Lib_trnXYs[GEM_Lib_trnYI(pntI, yI)]; }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_fp_errors(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint i = id.x, yI = id.y;
      float trn_y = GEM_Lib_trnY(i, yI), tst_y = GEM_Lib_tstY(i, yI), e = abs(trn_y - tst_y) / g.GEM_Lib_yN;
      uint E = roundu(e * 1e6f);
      InterlockedAdd(GEM_Lib_outlier_errors, i, E);
    }
    }
  }
  VGrid_Lib_BDraw_TextInfo VGrid_Lib_BDraw_textInfo(uint i) { return VGrid_Lib_BDraw_textInfos[i]; }
  void VGrid_Lib_BDraw_textInfo(uint i, VGrid_Lib_BDraw_TextInfo t) { VGrid_Lib_BDraw_textInfos[i] = t; }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.VGrid_Lib_BDraw_textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        VGrid_Lib_BDraw_TextInfo t = VGrid_Lib_BDraw_textInfo(0), ti = VGrid_Lib_BDraw_textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        VGrid_Lib_BDraw_textInfo(i, ti);
      }
    }
    }
  }
  uint2 VGrid_Lib_BDraw_Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : VGrid_Lib_BDraw_AppendBuff_Indexes[textI - 1] + 1, textI < g.VGrid_Lib_BDraw_AppendBuff_IndexN ? VGrid_Lib_BDraw_AppendBuff_Indexes[textI] : g.VGrid_Lib_BDraw_textCharN); }
  uint VGrid_Lib_BDraw_Byte(uint i) { return TextByte(VGrid_Lib_BDraw_tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.VGrid_Lib_BDraw_textN)
    {
      uint i = id.x;
      VGrid_Lib_BDraw_TextInfo ti = VGrid_Lib_BDraw_textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = VGrid_Lib_BDraw_Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = VGrid_Lib_BDraw_Byte(j); if (byteI >= 32) { byteI -= 32; t.x += VGrid_Lib_BDraw_fontInfos[byteI].advance; } }
      t.x /= g.VGrid_Lib_BDraw_fontSize;
      ti.uvSize = t;
      VGrid_Lib_BDraw_textInfo(i, ti);
    }
    }
  }
  void setPropNode(uint i, PropNode node) { propNodes[i] = node; }
  void propNode(uint3 id, PropNode node) { setPropNode(id_to_i(id, g.VGrid_Lib_nodeN), node); }
  [numthreads(numthreads3, numthreads3, numthreads3)] void init_v(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN))
	{
		WaveNode wn = waveNode(id); wn.time = fPosInf; waveNode_id(id, wn);
		PropNode pn = propNode_id(id); pn.vel = f111 * Temp_C_to_SoundSpeed_mps(22); propNode(id, pn);
	}
	
    }
  }
  void VGrid_Lib_Val(uint i, float v) { VGrid_Lib_Vals[i] = v; }
  uint VGrid_Lib_NodeI(uint3 id) { return id_to_i(id, g.VGrid_Lib_nodeN); }
  uint3 GetCorner_I(float3 q) { return clamp(flooru(q), u000, g.VGrid_Lib_nodeN - u111); }
  float3 VGrid_Lib_gridMin() { return float3(g.VGrid_Lib_GridX.x, g.VGrid_Lib_GridY.x, g.VGrid_Lib_GridZ.x); }
  float3 nodeLocation(float3 p) { return p * g.VGrid_Lib_resolution + VGrid_Lib_gridMin(); }
  [numthreads(numthreads3, numthreads3, numthreads3)] void init_td(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN))
	{
		WaveNode wn = waveNode(id);
		wn.rayDist = distance(nodeLocation(id), g.mouse_pnt);
		wn.time = wn.rayDist / Temp_C_to_SoundSpeed_mps(22);
		waveNode_id(id, wn);
	}
	
    }
  }
  float3 nodeLocation_u(uint i) { return nodeLocation(i_to_id(i, g.VGrid_Lib_nodeN)); }
  float3 VGrid_Lib_NodeLocation3(uint3 id) { return id * g.VGrid_Lib_resolution + VGrid_Lib_gridMin(); }
  float3 nodeLocation(float i, float j, float k) { return nodeLocation(new float3(i, j, k)); }
  float3 nodeLocation_id(uint3 id) { return nodeLocation(id.x, id.y, id.z); }
  uint Read_uint(uint byteI) { return segy_uints[(byteI - 1) / 4]; }
  int Read_int(uint byteI) { return (int)Read_uint(byteI); }
  uint Read_ushort(uint byteI) { return Is((byteI - 1) % 4) ? Read_uint(byteI) & 0xffff : Read_uint(byteI) >> 16; }
  [numthreads(numthreads1, 1, 1)] void Read_segy_header(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		g.segy_traceN = Read_ushort(3213);
		g.segy_sample_interval_us = Read_ushort(3217);
		g.segy_smpN = Read_ushort(3221);
		g.sampleN = g.segy_smpN;
		g.samplesPerSec = (uint)(1e6f / g.segy_sample_interval_us);
	}
	
    }
  }
  int Read_short(uint byteI) { return (int)Read_ushort(byteI); }
  [numthreads(numthreads1, 1, 1)] void Read_segy_trace_header(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.segy_traceN)
	{
		uint i = id.x, j = 3600 / 4 + i * (240 / 4 + g.segy_smpN);
		int rcv_elevation = Read_int(j + 41), source_surface_elevation = Read_int(j + 45), source_depth = Read_int(j + 49);
		int elevation_scalar = Read_short(j + 69);
		float elevScalar = elevation_scalar > 0 ? elevation_scalar : rcp(-elevation_scalar);
		float source_elevation = (source_surface_elevation - source_depth) * elevScalar;
		int coordinate_scalar = Read_short(j + 71);
		float coordScalar = coordinate_scalar > 0 ? coordinate_scalar : rcp(-coordinate_scalar);
		int source_x = Read_int(j + 73), source_y = Read_int(j + 77), rcv_x = Read_int(j + 81), rcv_y = Read_int(j + 85);
		float3 src_location = float3(source_x * coordScalar, source_y * coordScalar, source_elevation);
		float3 rcv_location = float3(rcv_x * coordScalar, rcv_y * coordScalar, rcv_elevation * elevScalar);
		int trace_sample_N = Read_short(j + 115);
		int trace_sample_interval = Read_short(j + 117);
	}
	
    }
  }
  float GEM_Lib_Get_tst_Pnt_Output(uint _levelI, float width, uint _tst_PntI, uint yI)
  {
    float2 vw = f00;
    for (uint pntI = 0; pntI < g.GEM_Lib_trnN; pntI++)
    {
      float dst2 = 0;
      for (uint xI = 0; xI < g.GEM_Lib_xN; xI++) dst2 += sqr(GEM_Lib_trnX(pntI, xI) - GEM_Lib_tstX_01(_tst_PntI, xI));
      float w = GEM_Lib_Basis(sqrt(dst2), width), y = GEM_Lib_trnC(_levelI, pntI, yI);
      vw += float2(y * w, w);
    }
    return vw.y == 0 ? 0 : vw.x * rcp(vw.y);
  }
  float GEM_Lib_Get_tst_Pnt_Output(uint _tst_PntI, uint yI)
  {
    float y = 0, width = g.GEM_Lib_maxBasisWidth;
    for (uint _levelI = 0; _levelI < g.GEM_Lib_levelN; _levelI++, width *= g.GEM_Lib_basisStep) y += GEM_Lib_Get_tst_Pnt_Output(_levelI, width, _tst_PntI, yI);
    return y;
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calcMaxError(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_yN && id.x < g.GEM_Lib_tstN)
    {
      uint tst_PntI = id.x, yI = id.y;
      InterlockedMax(GEM_Lib_maxErrors, tst_PntI, GEM_Lib_f2u(g.GEM_Lib_trnN == 0 ? GEM_Lib_tstY(tst_PntI, yI) : g.GEM_Lib_trnN == 1 ? abs(1 - GEM_Lib_tstY(tst_PntI, yI)) : abs(GEM_Lib_Get_tst_Pnt_Output(tst_PntI, yI) - GEM_Lib_tstY(tst_PntI, yI))));
    }
    }
  }
  bool GEM_Lib_isInf(float v) { return v == fNegInf || v == fPosInf; }
  bool GEM_Lib_isNotInf(float v) { return !GEM_Lib_isInf(v); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_Find_Ranges(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN)
    {
      uint pntI = id.x, fldI = id.y, j = fldI * 2;
      float v = fldI < g.GEM_Lib_xN ? GEM_Lib_trnXYs[GEM_Lib_trnXI(pntI, fldI)] : GEM_Lib_trnXYs[GEM_Lib_trnYI(pntI, fldI - g.GEM_Lib_xN)];
      if (GEM_Lib_isNotInf(v))
      {
        int V = roundi(v * 100000);
        InterlockedMin(GEM_Lib_Ranges, j, V);
        InterlockedMax(GEM_Lib_Ranges, j + 1, V);
      }
    }
    }
  }
  void GEM_Lib_Set_trnInput(uint trnI, uint xI, float v) { GEM_Lib_trnXYs[trnI * g.GEM_Lib_xN + xI] = v; }
  float GEM_Lib_Get_trnInput(uint trnI, uint xI) { return trnI; }
  void GEM_Lib_assign_trnInput(uint trnI, uint xI) { GEM_Lib_Set_trnInput(trnI, xI, GEM_Lib_Get_trnInput(trnI, xI)); }
  void GEM_Lib_Set_trnOutput(uint trnI, uint yI, float v) { uint j = trnI * g.GEM_Lib_yN + yI; GEM_Lib_trnXYs[g.GEM_Lib_trnN * g.GEM_Lib_xN + j] = v; GEM_Lib_trnCs[j] = v; }
  float GEM_Lib_Get_trnOutput(uint trnI, uint yI) { return trnI; }
  void GEM_Lib_assign_trnOutput(uint trnI, uint yI) { GEM_Lib_Set_trnOutput(trnI, yI, GEM_Lib_Get_trnOutput(trnI, yI)); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_assign_trn_Inputs_Outputs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_trnN) { uint trnI = id.x, xI = id.y, yI = id.y - g.GEM_Lib_xN; if (xI < g.GEM_Lib_xN) GEM_Lib_assign_trnInput(trnI, xI); else GEM_Lib_assign_trnOutput(trnI, yI); } } }
  bool VGrid_Lib_BDraw_AppendBuff_IsBitOn(uint i) { uint c = VGrid_Lib_BDraw_Byte(i); return c == VGrid_Lib_BDraw_TB || c == VGrid_Lib_BDraw_LF; }
  uint VGrid_Lib_BDraw_AppendBuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.VGrid_Lib_BDraw_AppendBuff_N && VGrid_Lib_BDraw_AppendBuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.VGrid_Lib_BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = VGrid_Lib_BDraw_AppendBuff_Assign_Bits(k + j, j, bits); VGrid_Lib_BDraw_AppendBuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = c; VGrid_Lib_BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.VGrid_Lib_BDraw_AppendBuff_BitN) VGrid_Lib_BDraw_AppendBuff_grp[grpI] = VGrid_Lib_BDraw_AppendBuff_grp0[grpI] + VGrid_Lib_BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      VGrid_Lib_BDraw_AppendBuff_grp0[grpI] = VGrid_Lib_BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.VGrid_Lib_BDraw_AppendBuff_BitN) VGrid_Lib_BDraw_AppendBuff_Sums[i] = VGrid_Lib_BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void VGrid_Lib_BDraw_AppendBuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.VGrid_Lib_BDraw_AppendBuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.VGrid_Lib_BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = VGrid_Lib_BDraw_AppendBuff_Assign_Bits(k + j, j, bits); VGrid_Lib_BDraw_AppendBuff_Bits[i] = bits; } } } }
  VGrid_Lib_TRay VGrid_Lib_CreateRayHit() { VGrid_Lib_TRay hit; hit.origin = f000; hit.dist = fPosInf; hit.direction = f000; hit.color = f0000; return hit; }
  float3 VGrid_Lib_gridMax() { return float3(g.VGrid_Lib_GridX.y, g.VGrid_Lib_GridY.y, g.VGrid_Lib_GridZ.y); }
  void VGrid_Lib_Assign(inout VGrid_Lib_TRay hit, float3 position, float3 normal, float4 color, float dist) { hit.origin = position; hit.direction = normal; hit.color = color; hit.dist = dist; }
  void VGrid_Lib_pixDepthColor(uint i, float d, float4 c) { VGrid_Lib_depthColors[i] = uint2((uint)(d / g.VGrid_Lib_maxDist * uint_max), c32_u(f4_c32(c))); }
  void VGrid_Lib_pixDepthColor(uint2 id, float d, float4 c) { VGrid_Lib_pixDepthColor(id_to_i(id, g.VGrid_Lib_viewSize), d, c); }
  float VGrid_Lib_Val(uint i) { return VGrid_Lib_Vals[i]; }
  float3 VGrid_Lib_gridCenter() { return (VGrid_Lib_gridMax() + VGrid_Lib_gridMin()) / 2; }
  float3 GetCorner_q(float3 p) { return (p - VGrid_Lib_gridCenter()) / g.VGrid_Lib_resolution; }
  float nodeT(uint i) { return waveNodes[i].time; }
  float InterpolateT(float3 fq, uint4 c0, uint4 c1) { float t0 = nodeT(c0.x), t1 = nodeT(c0.y), t2 = nodeT(c0.z), t3 = nodeT(c0.w); float t4 = nodeT(c1.x), t5 = nodeT(c1.y), t6 = nodeT(c1.z), t7 = nodeT(c1.w); return Interpolate(t0, t1, t2, t3, t4, t5, t6, t7, fq); }
	
  float nodeV(uint i) { return propNodes[i].vel.x; }
  float InterpolateV(float3 fq, uint4 c0, uint4 c1) { float t0 = nodeV(c0.x), t1 = nodeV(c0.y), t2 = nodeV(c0.z), t3 = nodeV(c0.w); float t4 = nodeV(c1.x), t5 = nodeV(c1.y), t6 = nodeV(c1.z), t7 = nodeV(c1.w); return Interpolate(t0, t1, t2, t3, t4, t5, t6, t7, fq); }
	
  float nodeD(uint i) { return waveNodes[i].rayDist; }
  float InterpolateD(float3 fq, uint4 c0, uint4 c1) { float t0 = nodeD(c0.x), t1 = nodeD(c0.y), t2 = nodeD(c0.z), t3 = nodeD(c0.w); float t4 = nodeD(c1.x), t5 = nodeD(c1.y), t6 = nodeD(c1.z), t7 = nodeD(c1.w); return Interpolate(t0, t1, t2, t3, t4, t5, t6, t7, fq); }
	
  float GEM_Lib_trnXY(uint pntI, uint xyI) { return xyI < g.GEM_Lib_xN ? GEM_Lib_trnX(pntI, xyI) : GEM_Lib_trnY(pntI, xyI - g.GEM_Lib_xN); }
  float GEM_Lib_trnX_01(uint pntI, uint xI) { return GEM_Lib_trnXYs[GEM_Lib_trnXI(pntI, xI)]; }
  float GEM_Lib_trnY_01(uint pntI, uint yI) { return lerp1(GEM_Lib_ranges[g.GEM_Lib_xN + yI], GEM_Lib_trnXYs[GEM_Lib_trnYI(pntI, yI)]); }
  float GEM_Lib_tstY_01(uint _tstI, uint yI) { return lerp1(GEM_Lib_ranges[g.GEM_Lib_xN + yI], GEM_Lib_tstY(_tstI, yI)); }
  bool GEM_Lib_AppendBuff_IsBitOn(uint i)
  {
    switch ((uint)g.GEM_Lib_findMode)
    {
      case GEM_Lib_Find_Mode_Unknowns: { uint n = g.GEM_Lib_xN + g.GEM_Lib_yN, pntI = i / n, xyI = i % n; return GEM_Lib_isInf(GEM_Lib_trnXY(pntI, xyI)); }
      case GEM_Lib_Find_Mode_K_U: { bool on = false; for (uint xI = 0; !on && xI < g.GEM_Lib_xN; xI++) on = GEM_Lib_isInf(GEM_Lib_trnXY(i, xI)); if (!(on = !on)) { for (uint yI = 0; on && yI < g.GEM_Lib_yN; yI++) on = GEM_Lib_isNotInf(GEM_Lib_trnXY(i, g.GEM_Lib_xN + yI)); on = !on; } return on; }
      case GEM_Lib_Find_Mode_Outliers: default: { uint n = g.GEM_Lib_xN + g.GEM_Lib_yN, pntI = i / n, xyI = i % n, yI = xyI - g.GEM_Lib_xN; return abs(xyI < g.GEM_Lib_xN ? GEM_Lib_trnX_01(pntI, xyI) - GEM_Lib_tstX_01(pntI, xyI) : GEM_Lib_trnY_01(pntI, yI) - GEM_Lib_tstY_01(pntI, yI)) > g.GEM_Lib_outlier_tolerance; }
    }
  }
  uint GEM_Lib_AppendBuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.GEM_Lib_AppendBuff_N && GEM_Lib_AppendBuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.GEM_Lib_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = GEM_Lib_AppendBuff_Assign_Bits(k + j, j, bits); GEM_Lib_AppendBuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    GEM_Lib_AppendBuff_grp0[grpI] = c; GEM_Lib_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.GEM_Lib_AppendBuff_BitN) GEM_Lib_AppendBuff_grp[grpI] = GEM_Lib_AppendBuff_grp0[grpI] + GEM_Lib_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      GEM_Lib_AppendBuff_grp0[grpI] = GEM_Lib_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.GEM_Lib_AppendBuff_BitN) GEM_Lib_AppendBuff_Sums[i] = GEM_Lib_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_AppendBuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_AppendBuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.GEM_Lib_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = GEM_Lib_AppendBuff_Assign_Bits(k + j, j, bits); GEM_Lib_AppendBuff_Bits[i] = bits; } } } }
  float GEM_Lib_getSearchOutput(uint _levelI, float width, uint searchI, uint yI)
  {
    float2 vw = f00;
    for (uint pntI = 0; pntI < g.GEM_Lib_trnN; pntI++)
    {
      float dst2 = 0;
      for (uint xI = 0; xI < g.GEM_Lib_xN; xI++) dst2 += sqr(GEM_Lib_trnX(pntI, xI) - GEM_Lib_searchPntX(searchI, xI));
      float w = GEM_Lib_Basis(sqrt(dst2), width), y = GEM_Lib_trnC(_levelI, pntI, yI);
      vw += float2(y * w, w);
    }
    bool lev0 = _levelI == 0;
    return lev0 && vw.y == 0 ? 0 : vw.x * rcp(lev0 ? vw.y : max(vw.y, 1));
  }
  float GEM_Lib_getSearchOutput(uint searchI, uint yI)
  {
    float y = 0, width = g.GEM_Lib_maxBasisWidth;
    for (uint _levelI = 0; _levelI < g.GEM_Lib_levelN; _levelI++, width *= g.GEM_Lib_basisStep) y += GEM_Lib_getSearchOutput(_levelI, width, searchI, yI);
    return y;
  }
  float GEM_Lib_searchPnt_v(uint pntI, uint xI) { return xI < g.GEM_Lib_xN ? GEM_Lib_searchPnts[GEM_Lib_searchPntI(pntI, xI)] : GEM_Lib_getSearchOutput(pntI, xI - g.GEM_Lib_xN); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_wx(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_searchPntN && id.x < g.GEM_Lib_xN)
    {
      uint xI = id.x, searchI = id.y;
      float dx = GEM_Lib_bestInputs[xI];
      uint score = GEM_Lib_scores[searchI], mnScore = GEM_Lib_scores[GEM_Lib_uints[GEM_Lib_UInts_mnScoreI]], mxScore = GEM_Lib_scores[GEM_Lib_uints[GEM_Lib_UInts_mxScoreI]], avgScore = mxScore / 2 + mnScore / 2;
      if (score > avgScore)
      {
        score -= avgScore;
        float x = GEM_Lib_searchPnt_v(searchI, xI) - dx, w = score / 1e6f, sum_w = GEM_Lib_uints[GEM_Lib_UInts_sum_w] / 1e6f;
        int WX = roundi(w * x / sum_w * 1e6f);
        InterlockedAdd(GEM_Lib_wx, xI, WX);
      }
    }
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_calc_Scores(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN + g.GEM_Lib_yN && id.x < g.GEM_Lib_searchPntN)
    {
      uint searchI = id.x, xyI = id.y;
      float2 vw = GEM_Lib_desiredValWeights[xyI];
      float v = abs(GEM_Lib_searchPnt_v(searchI, xyI) - vw.x) * vw.y;
      uint Score = roundu(v * 1e6f);
      InterlockedAdd(GEM_Lib_scores, searchI, Score);
    }
    }
  }
  VGrid_Lib_TRay VGrid_Lib_CreateShaderCameraRay(float2 _uv)
  {
    VGrid_Lib_TRay ray;
    ray.origin = mul(g.VGrid_Lib_camToWorld, g.VGrid_Lib_isOrtho ? float4(g.VGrid_Lib_orthoSize * _uv / float2(aspect(g.VGrid_Lib_viewSize), 1), 0, 1) : f0001).xyz;
    ray.direction = normalize(mul(g.VGrid_Lib_camToWorld, float4(mul(g.VGrid_Lib_cameraInvProjection, float4(_uv, 0, 1)).xyz, 0)).xyz);
    ray.color = f0000;
    ray.dist = 0;
    return ray;
  }
  VGrid_Lib_TRay VGrid_Lib_CreateRay(float3 origin, float3 direction) { VGrid_Lib_TRay ray; ray.origin = origin; ray.direction = direction; ray.color = f0000; ray.dist = 0; return ray; }
  VGrid_Lib_TRay VGrid_Lib_CreateCameraRay(float2 _uv) { VGrid_Lib_TRay ray = VGrid_Lib_CreateShaderCameraRay(_uv); return VGrid_Lib_CreateRay(ray.origin, ray.direction); }
  float4 VGrid_Lib_DrawSliceColor(float4 color, float3 q) { return g.showBrush && distance(q, g.mouse_paint_pnt) < g.brushSize ? (color + RED) / 2 : color; }
  float3 VGrid_Lib_GetCorner_q(float3 p) { return clamp((p - VGrid_Lib_gridMin()) / g.VGrid_Lib_resolution, f000, (int3)g.VGrid_Lib_nodeN - f111); }
  uint3 VGrid_Lib_GetCorner_I(float3 q) { return (uint3)q; }
  float VGrid_Lib_Interpolate_Val(float3 fq, uint4 c0, uint4 c1) { return Interpolate(VGrid_Lib_Val(c0.x), VGrid_Lib_Val(c0.y), VGrid_Lib_Val(c0.z), VGrid_Lib_Val(c0.w), VGrid_Lib_Val(c1.x), VGrid_Lib_Val(c1.y), VGrid_Lib_Val(c1.z), VGrid_Lib_Val(c1.w), fq); }
  uint GEM_Lib_Rand_UV(uint4 r) { return cxor(r); }
  float GEM_Lib_Rand_FV(uint4 r) { return 2.3283064365387e-10f * GEM_Lib_Rand_UV(r); }
  uint3 nodeN1() { return max(u000, g.VGrid_Lib_nodeN - u111); }
  uint GridToIndex(int3 I) { return id_to_i(clamp(I, u000, nodeN1()), g.VGrid_Lib_nodeN); }
  uint4 GetFaceI(uint3 I, int3 x, int3 y, int3 z, int3 w) { return new uint4(GridToIndex((int3)I + x), GridToIndex((int3)I + y), GridToIndex((int3)I + z), GridToIndex((int3)I + w)); }
  uint4 GetXFaceI(uint3 I, int3 d) { return GetFaceI(I, i000 + d, i001 + d, i010 + d, i011 + d); }
  float GetT(float3 p) { float3 q = GetCorner_q(p); uint3 I = GetCorner_I(q); return InterpolateT(frac(q), GetXFaceI(I, i000), GetXFaceI(I, i100)); }
	
  float GetV(float3 p) { float3 q = GetCorner_q(p); uint3 I = GetCorner_I(q); return InterpolateV(frac(q), GetXFaceI(I, i000), GetXFaceI(I, i100)); }
	
  float GetD(float3 p) { float3 q = GetCorner_q(p); uint3 I = GetCorner_I(q); return InterpolateD(frac(q), GetXFaceI(I, i000), GetXFaceI(I, i100)); }
	
  [numthreads(numthreads3, numthreads3, numthreads3)] void calc_wavefronts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN))
	{
		uint nodeI = id_to_i(id, g.VGrid_Lib_nodeN); WaveNode wn1 = waveNode(nodeI); PropNode pn1 = propNode(nodeI); float3 p1 = nodeLocation_u(nodeI), p; float d = distance(p1, g.mouse_pnt), t;
		if (d >= g.VGrid_Lib_resolution * Sqrt2)
		{
			p = p1 - GetWavefront(id, wn1.time, p1) * g.VGrid_Lib_resolution; t = GetT(p) + g.VGrid_Lib_resolution / ((GetV(p) + pn1.vel.x) / 2);
			if (wn1.time - t > 1e-6f) { InterlockedOr(uints, UInts_timeChanged, uTrue); wn1.time = t; wn1.rayDist = GetD(p) + g.VGrid_Lib_resolution; waveNode(id_to_i(id, g.VGrid_Lib_nodeN), wn1); }
		}
		else { t = d / ((GetV(g.mouse_pnt) + pn1.vel.x) / 2); if (t < wn1.time) { wn1.time = t; wn1.rayDist = d; waveNode_id(id, wn1); } }
	}
	
    }
  }
  float4 VGrid_Lib_paletteBufferColor(float v) { return c32_f4(VGrid_Lib_paletteBuffer[roundu(clamp(v * 255, 0, 255))]); }
  float4 VGrid_Lib_GetPointColor(float3 p, float val) { return VGrid_Lib_paletteBufferColor(lerp1(g.VGrid_Lib_paletteRange, val)); }
  float4 VGrid_Lib_GetNormalColor(VGrid_Lib_TRay ray, float3 normal, float val, float3 p)
  {
    float3 lightDirection = _WorldSpaceLightPos0.xyz;
    float3 h = (lightDirection - ray.direction) / 2;
    float v = 1, gloss = 0.5f, s = sqr(abs(dot(normal, h))) * gloss, NdotL = abs(dot(normal, lightDirection));
    if (g.VGrid_Lib_GridLineThickness > 0)
    {
      float w = 1 / max(0.00001f, g.VGrid_Lib_GridLineThickness);
      p /= g.VGrid_Lib_resolution;
      float3 blend = normalize(max((abs(normal) - 0.2f) * 7, 0.0f));
      v = csum(blend * saturate(0.5f * float3(product((1 - abs(1 - 2 * frac(p.yz))) * w), product((1 - abs(1 - 2 * frac(p.xz))) * w), product((1 - abs(1 - 2 * frac(p.xy))) * w))));
    }
    return float4(saturate((VGrid_Lib_GetPointColor(p, val).xyz * (NdotL + 0.5f) + s) * v), g.VGrid_Lib_opacity);
  }
  uint GEM_Lib_Rand_u(uint a, int b, int c, int d, uint e) { return ((a & e) << d) ^ (((a << b) ^ a) >> c); }
  uint4 GEM_Lib_Rand_U4(uint4 r) { return uint4(GEM_Lib_Rand_u(r.x, 13, 19, 12, 4294967294u), GEM_Lib_Rand_u(r.y, 2, 25, 4, 4294967288u), GEM_Lib_Rand_u(r.z, 3, 11, 17, 4294967280u), r.w * 1664525 + 1013904223u); }
  uint4 GEM_Lib_Rand_rUInt4(uint i) { return GEM_Lib_Rand_U4(GEM_Lib_Rand_rs[i]); }
  uint4 GEM_Lib_Rand_UInt4(uint i) { return GEM_Lib_Rand_rs[i] = GEM_Lib_Rand_rUInt4(i); }
  float GEM_Lib_Rand_Float(uint i) { return GEM_Lib_Rand_FV(GEM_Lib_Rand_UInt4(i)); }
  float GEM_Lib_Rand_Float(uint i, float A, float B) { return lerp(A, B, GEM_Lib_Rand_Float(i)); }
  [numthreads(numthreads2, numthreads2, 1)] void GEM_Lib_find_search_Pnts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.GEM_Lib_xN && id.x < g.GEM_Lib_searchPntN)
    {
      uint searchI = id.x, xI = id.y;
      if (searchI == 0) GEM_Lib_searchPntX(searchI, xI, GEM_Lib_w_avg_Xs[xI]);
      else
      {
        float2 dw = GEM_Lib_desiredValWeights[xI];
        float v = GEM_Lib_bestInputs[xI], r = g.GEM_Lib_searchRadius, x = dw.y >= 0.99f ? dw.x : GEM_Lib_Rand_Float(GEM_Lib_searchPntI(searchI, xI), max(0, v - r), min(1, v + r));
        GEM_Lib_searchPntX(searchI, xI, x);
      }
    }
    }
  }
  uint GEM_Lib_Rand_UInt(uint i, uint A, uint B) { return flooru(GEM_Lib_Rand_Float(i, A, B)); }
  [numthreads(numthreads1, 1, 1)] void GEM_Lib_Rand_initState(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.GEM_Lib_Rand_I) { uint i = id.x + g.GEM_Lib_Rand_I; if (i < g.GEM_Lib_Rand_N) GEM_Lib_Rand_rs[i] = index(GEM_Lib_Rand_rs[i], g.GEM_Lib_Rand_J, GEM_Lib_Rand_UInt(id.x, 0, uint_max)); } } }
  uint3 VGrid_Lib_nodeN1() { return max(g.VGrid_Lib_nodeN, u111) - u111; }
  uint VGrid_Lib_GridToIndex(int3 _I) { return id_to_i(clamp(_I, u000, VGrid_Lib_nodeN1()), g.VGrid_Lib_nodeN); }
  uint4 VGrid_Lib_GetFaceI(uint3 _I, int3 x, int3 y, int3 z, int3 w) { return new uint4(VGrid_Lib_GridToIndex((int3)_I + x), VGrid_Lib_GridToIndex((int3)_I + y), VGrid_Lib_GridToIndex((int3)_I + z), VGrid_Lib_GridToIndex((int3)_I + w)); }
  uint4 VGrid_Lib_GetFaceI(uint3 _I, int3 d) { return VGrid_Lib_GetFaceI(_I, i000 + d, i001 + d, i010 + d, i011 + d); }
  float VGrid_Lib_Val(float3 p) { float3 q = VGrid_Lib_GetCorner_q(p); uint3 _I = VGrid_Lib_GetCorner_I(q); return VGrid_Lib_Interpolate_Val(frac(q), VGrid_Lib_GetFaceI(_I, i000), VGrid_Lib_GetFaceI(_I, i100)); }
  float3 VGrid_Lib_Val(float3 p, float d) { return float3(VGrid_Lib_Val(p + f100 * d), VGrid_Lib_Val(p + f010 * d), VGrid_Lib_Val(p + f001 * d)); }
  void VGrid_Lib_Val3(uint3 id, float v) { VGrid_Lib_Val(VGrid_Lib_NodeI(id), v); }
  [numthreads(numthreads3, numthreads3, numthreads3)] void paint_vels(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN))
	{
		if (g.paintEditN == 0) return;
		if (g.showVel)
		{
			float3 np = nodeLocation_id(id);
			PropNode pn = propNode_id(id);
			Paint p = paints[0];
			VGrid_Lib_Val3(id, p.v / g.velRange.y);
			for (int i = (int)g.paintEditN - 1; i >= 0; i--)
			{
				p = paints[i];
				if (distance(np, p.p) < p.r) { pn.vel.x = p.v; propNode(id, pn); VGrid_Lib_Val3(id, p.v / g.velRange.y); break; }
			}
		}
		else { WaveNode wNode = waveNode(id); VGrid_Lib_Val3(id, g.showTime ? wNode.time / g.timeRange.y : wNode.rayDist / g.distRange.y); }
	}
	
    }
  }
  [numthreads(numthreads3, numthreads3, numthreads3)] void VGrid_Lib_Grid_Calc_Vals(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN))
    {
      float3 p = VGrid_Lib_NodeLocation3(id);
      float R = 0.3333f, v = sqr(length(p.xz) - R) + sqr(p.y);
      VGrid_Lib_Val3(id, v * 10);
    }
    }
  }
  float VGrid_Lib_setDepth(float depth, VGrid_Lib_TRay ray, inout float3 p, inout float val) { p = depth * ray.direction + ray.origin; val = VGrid_Lib_Val(p); return depth; }
  void VGrid_Lib_DrawSlice(float3 axis, VGrid_Lib_TRay ray, inout VGrid_Lib_TRay hit, inout float3 p, inout float val, inout float depth, inout bool found, inout float4 color, float3 normal)
  {
    float depth_slice;
    float3 axis2 = rotateZYXDeg(axis, g.VGrid_Lib_sliceRotation), q = PlaneLineIntersectionPoint(axis2, g.VGrid_Lib_slices, ray.origin, ray.direction);
    if (q.x != fNegInf && IsNotOutside(q, VGrid_Lib_gridMin(), VGrid_Lib_gridMax()))
    {
      depth_slice = VGrid_Lib_setDepth(max(distance(q, ray.origin), 0.018f), ray, p, val);
      if (depth_slice < depth) { found = true; depth = depth_slice; color = VGrid_Lib_DrawSliceColor(VGrid_Lib_GetNormalColor(ray, axis2, val, p), q); VGrid_Lib_Assign(hit, p, normal, color, depth); }
    }
  }
  float3 VGrid_Lib_Normal(float3 p)
  {
    float r = g.VGrid_Lib_resolution * 0.5f, margin = r * 0.02f;
    float3 normal = p <= VGrid_Lib_gridMin() + margin;
    if (all(normal == f000)) normal = p >= VGrid_Lib_gridMax() - margin;
    if (all(normal == f000)) normal = normalize(VGrid_Lib_Val(p, r) - VGrid_Lib_Val(p, -r));
    return normal;
  }
  float4 VGrid_Lib_GetColor(VGrid_Lib_TRay ray, inout float3 normal, float val, float3 p) { return VGrid_Lib_GetNormalColor(ray, normal = VGrid_Lib_Normal(p), val, p); }
  void VGrid_Lib_TraceRay(uint3 id, bool isSimple)
  {
    VGrid_Lib_TRay ray = VGrid_Lib_CreateCameraRay(2.0f * id.xy / g.VGrid_Lib_viewSize - 1), hit = VGrid_Lib_CreateRayHit();
    float3 mn = VGrid_Lib_gridMin(), mx = max(mn + 0.001f, VGrid_Lib_gridMax());
    float2 dst = HitGridBox(mn, mx, ray.origin, ray.direction);
    bool hitOutside = HitOutsideGrid(dst), hitInside = HitInsideGrid(dst);
    if (hitOutside || hitInside)
    {
      float3 p = f000, normal = f100;
      float val = 0, depth = VGrid_Lib_setDepth(max(dst.x, 0.018f), ray, p, val), depth2 = dst.y, step = g.VGrid_Lib_resolution, d0, d2;
      bool found = false;
      float4 color = f0000;
      if (g.VGrid_Lib_GridDrawFront && hitOutside) { color = VGrid_Lib_GetColor(ray, normal, val, p); VGrid_Lib_Assign(hit, p, normal, color, depth); }
      else
      {
        float val0 = val;
        if (isSimple)
        {
          float v = g.VGrid_Lib_meshVal;
          for (uint i = 0, n = csum(g.VGrid_Lib_nodeN); i < n && !found; i++)
          {
            if (val0 > v && val <= v)
            {
              val0 = val;
              for (d0 = max(0, depth - step), d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val > v) d0 = depth; else d2 = depth; }
              color = VGrid_Lib_GetColor(ray, normal, val, p);
              VGrid_Lib_Assign(hit, p, normal, color, depth); found = true;
            }
            else if (val0 < v && val >= v)
            {
              val0 = val;
              for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val < v) d0 = depth; else d2 = depth; }
              if (depth + step < depth2)
              {
                color = VGrid_Lib_GetColor(ray, normal, val, p);
                VGrid_Lib_Assign(hit, p, normal, color, depth); found = true;
              }
            }
            else val0 = val;
            if (depth + step > depth2) { depth = VGrid_Lib_setDepth(depth2, ray, p, val); break; }
            depth = VGrid_Lib_setDepth(depth + step, ray, p, val);
          }
        }
        else
        {
          for (uint i = 0, n = csum(g.VGrid_Lib_nodeN); i < n && (g.VGrid_Lib_opacity < 0.999f || !found); i++)
          {
            if (i == 0 && hitOutside && val <= g.VGrid_Lib_meshRange.y && val >= g.VGrid_Lib_meshRange.x)
            {
              val0 = val;
              color = VGrid_Lib_GetColor(ray, normal, val, p);
              VGrid_Lib_Assign(hit, p, normal, color, depth);
              found = true;
            }
            else if (val0 > g.VGrid_Lib_meshRange.y && val <= g.VGrid_Lib_meshRange.y)
            {
              val0 = val;
              for (d0 = max(0, depth - step), d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val > g.VGrid_Lib_meshRange.y) d0 = depth; else d2 = depth; }
              color = VGrid_Lib_GetColor(ray, normal, val, p);
              if (!found) { VGrid_Lib_Assign(hit, p, normal, color, depth); found = true; }
              else hit.color.xyz = g.VGrid_Lib_opacity * hit.color.xyz + (1 - g.VGrid_Lib_opacity) * color.xyz;
            }
            else if (val0 < g.VGrid_Lib_meshRange.x && val >= g.VGrid_Lib_meshRange.x)
            {
              val0 = val;
              for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val < g.VGrid_Lib_meshRange.x) d0 = depth; else d2 = depth; }
              if (depth + step < depth2)
              {
                color = VGrid_Lib_GetColor(ray, normal, val, p);
                if (!found) { VGrid_Lib_Assign(hit, p, normal, color, depth); found = true; }
                else hit.color.xyz = g.VGrid_Lib_opacity * hit.color.xyz + (1 - g.VGrid_Lib_opacity) * color.xyz;
              }
            }
            else if (val0 > g.VGrid_Lib_meshRange.x && val <= g.VGrid_Lib_meshRange.x)
            {
              val0 = val;
              for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val > g.VGrid_Lib_meshRange.x) d0 = depth; else d2 = depth; }
              color = VGrid_Lib_GetColor(ray, normal, val, p);
              if (!found) { VGrid_Lib_Assign(hit, p, normal, color, depth); found = true; }
              else hit.color.xyz = g.VGrid_Lib_opacity * hit.color.xyz + (1 - g.VGrid_Lib_opacity) * color.xyz;
            }
            else if (val0 < g.VGrid_Lib_meshRange.y && val >= g.VGrid_Lib_meshRange.y)
            {
              val0 = val;
              for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val < g.VGrid_Lib_meshRange.y) d0 = depth; else d2 = depth; }
              color = VGrid_Lib_GetColor(ray, normal, val, p);
              if (!found) { VGrid_Lib_Assign(hit, p, normal, color, depth); found = true; }
              else hit.color.xyz = g.VGrid_Lib_opacity * hit.color.xyz + (1 - g.VGrid_Lib_opacity) * color.xyz;
            }
            else if (hitInside && depth > step / 2 && val0 > g.VGrid_Lib_meshRange.x && val <= g.VGrid_Lib_meshRange.x)
            {
              val0 = val;
              for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = VGrid_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val > g.VGrid_Lib_meshRange.x) d0 = depth; else d2 = depth; }
              color = VGrid_Lib_GetColor(ray, normal, val, p);
              if (!found) { VGrid_Lib_Assign(hit, p, normal, color, depth); found = true; }
              else hit.color.xyz = g.VGrid_Lib_opacity * hit.color.xyz + (1 - g.VGrid_Lib_opacity) * color.xyz;
            }
            else val0 = val;
            if (depth + step > depth2) { depth = VGrid_Lib_setDepth(depth2, ray, p, val); break; }
            depth = VGrid_Lib_setDepth(depth + step, ray, p, val);
          }
        }
        if (g.VGrid_Lib_show_slices) for (uint i = 0; i < 3; i++) VGrid_Lib_DrawSlice(index(f000, i, 1.0f), ray, hit, p, val, depth, found, color, normal);
        if (g.VGrid_Lib_GridDrawBack)
        {
          color = VGrid_Lib_GetColor(ray, normal, val, p);
          if (!found) VGrid_Lib_Assign(hit, p, normal, color, depth);
          else hit.color.xyz = g.VGrid_Lib_opacity * hit.color.xyz + (1 - g.VGrid_Lib_opacity) * color.xyz;
        }
      }
    }
    VGrid_Lib_pixDepthColor(id.xy, hit.dist, hit.color);
  }
  [numthreads(numthreads2, numthreads2, 1)] void VGrid_Lib_Grid_Simple_TraceRay(uint3 id : SV_DispatchThreadID) { unchecked { if (all(id.xy < g.VGrid_Lib_viewSize)) { VGrid_Lib_TraceRay(id, true); } } }
  [numthreads(numthreads2, numthreads2, 1)] void VGrid_Lib_Grid_TraceRay(uint3 id : SV_DispatchThreadID) { unchecked { if (all(id.xy < g.VGrid_Lib_viewSize)) { VGrid_Lib_TraceRay(id, false); } } }
  [numthreads(numthreads3, numthreads3, numthreads3)] void blend_vels(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.VGrid_Lib_nodeN))
	{
		if (g.paintEditN == 0) return;
		if (g.showVel)
		{
			float3 np = nodeLocation_id(id);
			PropNode pn = propNode_id(id);
			for (int i = (int)g.paintEditN - 1; i >= 0; i--)
			{
				Paint p = paints[i];
				float d = (distance(np, p.p) - p.r) / g.VGrid_Lib_resolution;
				if (d >= 0 && d <= 1)
				{
					pn.vel.x = lerp(p.v, pn.vel.x, d);
					propNode(id, pn);
					VGrid_Lib_Val3(id, pn.vel.x / g.velRange.y);
					break;
				}
				else if (d < 0)
				{
					pn.vel.x = p.v; propNode(id, pn); VGrid_Lib_Val3(id, p.v / g.velRange.y); break;
				}
			}
		}
	}
    }
  }
  #pragma kernel blend_vels
  #pragma kernel paint_vels
  #pragma kernel calc_traceAbsMax
  #pragma kernel init_traceAbsMax
  #pragma kernel calc_wavefronts
  #pragma kernel init_td
  #pragma kernel init_v
  #pragma kernel copy_nodes
  #pragma kernel add_paint
  #pragma kernel calc_nearestTraceI
  #pragma kernel init_nearestTraceI
  #pragma kernel calc_traceMouseDist
  #pragma kernel init_traceMouseDist
  #pragma kernel Read_segy_trace_header
  #pragma kernel reverse_segy_uints
  #pragma kernel zero_segy_uints
  #pragma kernel Read_segy_header
  #pragma kernel GEM_Lib_Rand_initState
  #pragma kernel GEM_Lib_Rand_initSeed
  #pragma kernel GEM_Lib_AppendBuff_GetIndexes
  #pragma kernel GEM_Lib_AppendBuff_IncSums
  #pragma kernel GEM_Lib_AppendBuff_IncFills1
  #pragma kernel GEM_Lib_AppendBuff_GetFills2
  #pragma kernel GEM_Lib_AppendBuff_GetFills1
  #pragma kernel GEM_Lib_AppendBuff_Get_Bits_Sums
  #pragma kernel GEM_Lib_AppendBuff_GetSums
  #pragma kernel GEM_Lib_AppendBuff_Get_Bits
  #pragma kernel GEM_Lib_remove_maxError_tst_Pnt
  #pragma kernel GEM_Lib_copy_tst_Pnts
  #pragma kernel GEM_Lib_move_tst_Pnt_to_pnt
  #pragma kernel GEM_Lib_copy_pnts
  #pragma kernel GEM_Lib_findMaxErrorI
  #pragma kernel GEM_Lib_findMaxError
  #pragma kernel GEM_Lib_calcMaxError
  #pragma kernel GEM_Lib_initMaxError
  #pragma kernel GEM_Lib_copy_pnts_to_tst_Pnts
  #pragma kernel GEM_Lib_update_w_avg_Xs
  #pragma kernel GEM_Lib_update_best_x
  #pragma kernel GEM_Lib_update_best_Score
  #pragma kernel GEM_Lib_calc_wx
  #pragma kernel GEM_Lib_init_w
  #pragma kernel GEM_Lib_calc_sum_w
  #pragma kernel GEM_Lib_find_mn_mx_ScoreIs
  #pragma kernel GEM_Lib_find_mn_mx_Scores
  #pragma kernel GEM_Lib_inv_Scores
  #pragma kernel GEM_Lib_calc_Scores
  #pragma kernel GEM_Lib_find_search_Pnts
  #pragma kernel GEM_Lib_init_search
  #pragma kernel GEM_Lib_init_search_inputs
  #pragma kernel GEM_Lib_detectMissingEntries
  #pragma kernel GEM_Lib_initMissingEntries
  #pragma kernel GEM_Lib_copy_outputs_pntYs
  #pragma kernel GEM_Lib_copy_pntYs_outputs
  #pragma kernel GEM_Lib_copy_pntXs_inputs
  #pragma kernel GEM_Lib_unNormalize_outputs
  #pragma kernel GEM_Lib_calc_output_sums
  #pragma kernel GEM_Lib_calc_outputs_01
  #pragma kernel GEM_Lib_calc_outputs_v
  #pragma kernel GEM_Lib_calc_output_ys
  #pragma kernel GEM_Lib_zero_output_ys
  #pragma kernel GEM_Lib_zero_outputs
  #pragma kernel GEM_Lib_normalize_inputs
  #pragma kernel GEM_Lib_calc_pntHs
  #pragma kernel GEM_Lib_normalize_trn_Points
  #pragma kernel GEM_Lib_Get_ranges
  #pragma kernel GEM_Lib_Copy_Ranges_To_ranges
  #pragma kernel GEM_Lib_Find_Ranges
  #pragma kernel GEM_Lib_Init_Ranges
  #pragma kernel GEM_Lib_assign_trn_Inputs_Outputs
  #pragma kernel GEM_Lib_assign_tst_Inputs
  #pragma kernel GEM_Lib_assign_outliers
  #pragma kernel GEM_Lib_assign_K_Us
  #pragma kernel GEM_Lib_assign_unknowns
  #pragma kernel GEM_Lib_find_max_fpI
  #pragma kernel GEM_Lib_calc_max_fp
  #pragma kernel GEM_Lib_init_max_fp
  #pragma kernel GEM_Lib_calc_fp_errors
  #pragma kernel GEM_Lib_init_fp_errors
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_GetIndexes
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_IncSums
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_IncFills1
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_GetFills2
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_GetFills1
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_Get_Bits_Sums
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_GetSums
  #pragma kernel VGrid_Lib_BDraw_AppendBuff_Get_Bits
  #pragma kernel VGrid_Lib_BDraw_setDefaultTextInfo
  #pragma kernel VGrid_Lib_BDraw_getTextInfo
  #pragma kernel VGrid_Lib_Grid_Simple_TraceRay
  #pragma kernel VGrid_Lib_Grid_TraceRay
  #pragma kernel VGrid_Lib_Grid_Calc_Vals
  #pragma kernel GEM_Lib_Rand_grp_fill_1K
  #pragma kernel GEM_Lib_Rand_grp_init_1K
  #pragma kernel GEM_Lib_Rand_grp_init_1M
  #pragma kernel Read_segy_smps