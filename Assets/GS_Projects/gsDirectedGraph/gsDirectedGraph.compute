
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define ADraw_Draw_Point	0
  #define ADraw_Draw_Sphere	1
  #define ADraw_Draw_Line	2
  #define ADraw_Draw_Arrow	3
  #define ADraw_Draw_Signal	4
  #define ADraw_Draw_LineSegment	5
  #define ADraw_Draw_Texture_2D	6
  #define ADraw_Draw_Quad	7
  #define ADraw_Draw_WebCam	8
  #define ADraw_Draw_Mesh	9
  #define ADraw_Draw_Number	10
  #define ADraw_Draw_N	11
  #define ADraw_TextAlignment_BottomLeft	0
  #define ADraw_TextAlignment_CenterLeft	1
  #define ADraw_TextAlignment_TopLeft	2
  #define ADraw_TextAlignment_BottomCenter	3
  #define ADraw_TextAlignment_CenterCenter	4
  #define ADraw_TextAlignment_TopCenter	5
  #define ADraw_TextAlignment_BottomRight	6
  #define ADraw_TextAlignment_CenterRight	7
  #define ADraw_TextAlignment_TopRight	8
  #define ADraw_Text_QuadType_FrontOnly	0
  #define ADraw_Text_QuadType_FrontBack	1
  #define ADraw_Text_QuadType_Switch	2
  #define ADraw_Text_QuadType_Arrow	3
  #define ADraw_Text_QuadType_Billboard	4
  #define Palette_Type_Rainbow	0
  #define Palette_Type_GradientRainbow	1
  #define Palette_Type_GradientRainbow10	2
  #define Palette_Type_GradientRainbow20	3
  #define Palette_Type_Heat	4
  #define Palette_Type_GradientHeat	5
  #define Palette_Type_WhiteRainbow	6
  #define Palette_Type_invRainbow	7
  #define Palette_Type_Green	8
  #define Palette_Type_Gray	9
  #define Palette_Type_DarkGray	10
  #define CalcMode_Min	0
  #define CalcMode_Max	1
  #define ADraw_Draw_Text3D 12
  #define ADraw_LF 10
  #define ADraw_TB 9
  #define ADraw_ZERO 48
  #define ADraw_NINE 57
  #define ADraw_PERIOD 46
  #define ADraw_COMMA 44
  #define ADraw_PLUS 43
  #define ADraw_MINUS 45
  #define ADraw_SPACE 32
  #define g gDirectedGraph[0]
  #pragma use_dxc
  struct GDirectedGraph
  {
    uint ADraw_ABuff_IndexN, ADraw_ABuff_BitN, ADraw_ABuff_N, ADraw_ABuff_BitN1, ADraw_ABuff_BitN2, ADraw_omitText, ADraw_includeUnicode, ADraw_fontInfoN, ADraw_textN, ADraw_textCharN, ADraw_boxEdgeN, notepad, excel, visual_studio, palette_Type, stageI, calcMode, stageN, nodeN, edgeN, ARand_N, ARand_I, ARand_J;
    float ADraw_fontSize, ADraw_boxThickness, plotScale;
    float4 ADraw_boxColor;
    uint4 ARand_seed4;
  };
  struct ADraw_FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct ADraw_TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  struct Edge { uint stage, node0, node1; float cost; };
  struct uiEdge { uint stage, node0, node1; float cost; };
  groupshared uint4 ARand_grp[1024];
  groupshared uint ADraw_ABuff_grp[1024];
  groupshared uint ADraw_ABuff_grp0[1024];
  RWStructuredBuffer<GDirectedGraph> gDirectedGraph;
  RWStructuredBuffer<uint> ADraw_tab_delimeted_text, bestPath, ADraw_ABuff_Bits, ADraw_ABuff_Sums, ADraw_ABuff_Indexes, ADraw_ABuff_Fills1, ADraw_ABuff_Fills2, stages, stageNodeNs, stageSums;
  RWStructuredBuffer<ADraw_TextInfo> ADraw_textInfos;
  RWStructuredBuffer<ADraw_FontInfo> ADraw_fontInfos;
  RWStructuredBuffer<int> NodeCosts;
  RWStructuredBuffer<Edge> edges;
  RWStructuredBuffer<uint4> ARand_rs;
  RWStructuredBuffer<float3> nodePs;
  [numthreads(numthreads1, 1, 1)] void init_NodeCosts(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.nodeN) { NodeCosts[id.x] = id.x == 0 ? 0 : g.calcMode == CalcMode_Min ? int_max : int_min; } } }
  [numthreads(numthreads1, 1, 1)] void calc_Nodes(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.edgeN)
	{
		uint i = id.x;
		Edge e = edges[i];
		uint d_node0 = e.stage == 0 ? 0 : stageSums[e.stage - 1];
		if (i == g.edgeN - 1) nodePs[g.nodeN - 1] = f100;
		nodePs[d_node0 + e.node0] = float3(e.stage, -0.5f * (e.node0 - (stageNodeNs[e.stage] - 1) / 2.0f), 0) / (g.stageN - 1.0f);
		e.node0 += d_node0; e.node1 += stageSums[e.stage];
		edges[i] = e;
	}
	
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void calc_stageSums(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.stageN && id.x < g.stageN) { uint i = id.x, j = id.y; if (i >= j) InterlockedAdd(stageSums, i, stageNodeNs[j]); }
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void init_stageSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.stageN) { stageSums[id.x] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void calc_stageNodeNs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.edgeN) { InterlockedMax(stageNodeNs, edges[id.x].stage, edges[id.x].node0 + 1); } } }
  [numthreads(numthreads1, 1, 1)] void init_stageNodeNs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.stageN) { stageNodeNs[id.x] = id.x < g.stageN - 1 ? 0 : 1u; } } }
  [numthreads(numthreads1, 1, 1)] void calc_stages(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.edgeN) { InterlockedMax(stages, 0, edges[id.x].stage + 2); } } }
  [numthreads(numthreads1, 1, 1)] void init_stages(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < 1) { stages[id.x] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void ARand_initSeed(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ARand_N) { uint i = id.x; ARand_rs[i] = i == 0 ? g.ARand_seed4 : u0000; } } }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ADraw_ABuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : ADraw_ABuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = ADraw_ABuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); ADraw_ABuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ADraw_ABuff_BitN) { uint i = id.x; if (i >= numthreads1) ADraw_ABuff_Sums[i] += ADraw_ABuff_Fills1[i / numthreads1 - 1]; if (i == g.ADraw_ABuff_BitN - 1) g.ADraw_ABuff_IndexN = ADraw_ABuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ADraw_ABuff_BitN1) { uint i = id.x; if (i >= numthreads1) ADraw_ABuff_Fills1[i] += ADraw_ABuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.ADraw_ABuff_BitN2 - 1 ? ADraw_ABuff_Fills1[j] : i < g.ADraw_ABuff_BitN2 ? ADraw_ABuff_Fills1[g.ADraw_ABuff_BitN1 - 1] : 0, s;
    ADraw_ABuff_grp0[grpI] = c; ADraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ADraw_ABuff_BitN2) ADraw_ABuff_grp[grpI] = ADraw_ABuff_grp0[grpI] + ADraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ADraw_ABuff_grp0[grpI] = ADraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ADraw_ABuff_BitN2) ADraw_ABuff_Fills2[i] = ADraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.ADraw_ABuff_BitN1 - 1 ? ADraw_ABuff_Sums[j] : i < g.ADraw_ABuff_BitN1 ? ADraw_ABuff_Sums[g.ADraw_ABuff_BitN - 1] : 0, s;
    ADraw_ABuff_grp0[grpI] = c; ADraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ADraw_ABuff_BitN1) ADraw_ABuff_grp[grpI] = ADraw_ABuff_grp0[grpI] + ADraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ADraw_ABuff_grp0[grpI] = ADraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ADraw_ABuff_BitN1) ADraw_ABuff_Fills1[i] = ADraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.ADraw_ABuff_BitN ? countbits(ADraw_ABuff_Bits[i]) : 0, s;
    ADraw_ABuff_grp0[grpI] = c; ADraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ADraw_ABuff_BitN) ADraw_ABuff_grp[grpI] = ADraw_ABuff_grp0[grpI] + ADraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ADraw_ABuff_grp0[grpI] = ADraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ADraw_ABuff_BitN) ADraw_ABuff_Sums[i] = ADraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ARand_grp_init_1M(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
  [numthreads(numthreads1, 1, 1)] void ARand_grp_init_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void ARand_grp_fill_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  int f2i(float v) { return roundi(v * 1e6f); }
  [numthreads(numthreads1, 1, 1)] void calc_NodeCosts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.edgeN)
	{
		Edge e = edges[id.x];
		if (e.stage == g.stageI)
			if (g.calcMode == CalcMode_Min) InterlockedMin(NodeCosts, e.node1, f2i(e.cost) + NodeCosts[e.node0]);
			else InterlockedMax(NodeCosts, e.node1, f2i(e.cost) + NodeCosts[e.node0]);
	}
	
    }
  }
  ADraw_TextInfo ADraw_textInfo(uint i) { return ADraw_textInfos[i % g.ADraw_textN]; }
  void ADraw_textInfo(uint i, ADraw_TextInfo t) { ADraw_textInfos[i % g.ADraw_textN] = t; }
  [numthreads(numthreads1, 1, 1)] void ADraw_setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.ADraw_textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        ADraw_TextInfo t = ADraw_textInfo(0), ti = ADraw_textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        ADraw_textInfo(i, ti);
      }
    }
    }
  }
  uint2 ADraw_Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : ADraw_ABuff_Indexes[textI - 1] + 1, textI < g.ADraw_ABuff_IndexN ? ADraw_ABuff_Indexes[textI] : g.ADraw_textCharN); }
  uint ADraw_Byte(uint i) { return TextByte(ADraw_tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void ADraw_getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.ADraw_textN)
    {
      uint i = id.x;
      ADraw_TextInfo ti = ADraw_textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = ADraw_Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = ADraw_Byte(j); if (byteI >= 32) { byteI -= 32; t.x += ADraw_fontInfos[byteI].advance; } }
      t.x /= g.ADraw_fontSize;
      ti.uvSize = t;
      ADraw_textInfo(i, ti);
    }
    }
  }
  bool ADraw_ABuff_IsBitOn(uint i) { uint c = ADraw_Byte(i); return c == ADraw_TB || c == ADraw_LF; }
  uint ADraw_ABuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.ADraw_ABuff_N && ADraw_ABuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.ADraw_ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ADraw_ABuff_Assign_Bits(k + j, j, bits); ADraw_ABuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    ADraw_ABuff_grp0[grpI] = c; ADraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ADraw_ABuff_BitN) ADraw_ABuff_grp[grpI] = ADraw_ABuff_grp0[grpI] + ADraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ADraw_ABuff_grp0[grpI] = ADraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ADraw_ABuff_BitN) ADraw_ABuff_Sums[i] = ADraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ADraw_ABuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ADraw_ABuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.ADraw_ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ADraw_ABuff_Assign_Bits(k + j, j, bits); ADraw_ABuff_Bits[i] = bits; } } } }
  uint ARand_UV(uint4 r) { return cxor(r); }
  float ARand_FV(uint4 r) { return 2.3283064365387e-10f * ARand_UV(r); }
  uint ARand_u(uint a, int b, int c, int d, uint e) { return ((a & e) << d) ^ (((a << b) ^ a) >> c); }
  uint4 ARand_U4(uint4 r) { return uint4(ARand_u(r.x, 13, 19, 12, 4294967294u), ARand_u(r.y, 2, 25, 4, 4294967288u), ARand_u(r.z, 3, 11, 17, 4294967280u), r.w * 1664525 + 1013904223u); }
  uint4 ARand_rUInt4(uint i) { return ARand_U4(ARand_rs[i]); }
  uint4 ARand_UInt4(uint i) { return ARand_rs[i] = ARand_rUInt4(i); }
  float ARand_Float(uint i) { return ARand_FV(ARand_UInt4(i)); }
  float ARand_Float(uint i, float A, float B) { return lerp(A, B, ARand_Float(i)); }
  uint ARand_UInt(uint i, uint A, uint B) { return flooru(ARand_Float(i, A, B)); }
  [numthreads(numthreads1, 1, 1)] void ARand_initState(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ARand_I) { uint i = id.x + g.ARand_I; if (i < g.ARand_N) ARand_rs[i] = index(ARand_rs[i], g.ARand_J, ARand_UInt(id.x, 0, uint_max)); } } }
  [numthreads(numthreads1, 1, 1)] void find_BestPath(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.edgeN)
	{
		uint eI = id.x;
		Edge e = edges[eI];
		if (g.stageI == g.stageN - 1 && eI == 0) bestPath[g.stageI] = g.nodeN - 1;
		else if (e.stage == g.stageI && e.node1 == bestPath[g.stageI + 1] && NodeCosts[e.node1] - f2i(e.cost) == NodeCosts[e.node0]) bestPath[g.stageI] = e.node0;
	}
    }
  }
  #pragma kernel find_BestPath
  #pragma kernel calc_NodeCosts
  #pragma kernel init_NodeCosts
  #pragma kernel calc_Nodes
  #pragma kernel calc_stageSums
  #pragma kernel init_stageSums
  #pragma kernel calc_stageNodeNs
  #pragma kernel init_stageNodeNs
  #pragma kernel calc_stages
  #pragma kernel init_stages
  #pragma kernel ARand_initState
  #pragma kernel ARand_initSeed
  #pragma kernel ADraw_ABuff_GetIndexes
  #pragma kernel ADraw_ABuff_IncSums
  #pragma kernel ADraw_ABuff_IncFills1
  #pragma kernel ADraw_ABuff_GetFills2
  #pragma kernel ADraw_ABuff_GetFills1
  #pragma kernel ADraw_ABuff_Get_Bits_Sums
  #pragma kernel ADraw_ABuff_GetSums
  #pragma kernel ADraw_ABuff_Get_Bits
  #pragma kernel ADraw_setDefaultTextInfo
  #pragma kernel ADraw_getTextInfo
  #pragma kernel ARand_grp_init_1M
  #pragma kernel ARand_grp_init_1K
  #pragma kernel ARand_grp_fill_1K