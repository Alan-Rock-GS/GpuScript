
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define RunOn_Gpu	0
  #define RunOn_Cpu	1
  #define UInts_maxAbs	0
  #define UInts_maxElementRow	1
  #define UInts_maxElementVal	2
  #define UInts_N	3
  #define g gFR_Smart[0]
  #pragma use_dxc
  struct GFR_Smart
  {
    uint runOn, useInterlocked, debug, repeatN, record_Report_Info, N, focusedColumn, focusedRow;
    uint4 LowerTriangleBounds;
    float maxAbs, rowMultiplier, scale;
  };
  groupshared float grp_f_4096[4096];
  RWStructuredBuffer<GFR_Smart> gFR_Smart;
  RWStructuredBuffer<float> a, X, Y, b, row_maxAbs;
  RWStructuredBuffer<int> ia, sums;
  RWStructuredBuffer<uint> P, uints;
  [numthreads(numthreads1, 1, 1)] void InitP(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.N) { } } }
  [numthreads(numthreads1, 1, 1)] void Find_maxAbs(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Find_maxElementRow(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Interlock_Find_maxElementVal(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Interlock_Find_maxElementRow(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void MakeLowerTriangleZeroAndFillWithL(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Divide_by_maxAbs(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N * g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Find_rowMultiplier(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void MakeElementZeroAndFillWithLowerMatrixElement(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Set_rowMultiplier(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void SolveYfromLYequalB(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void SolveXfromUXequalY(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Interlock_Sum_SolveYfromLYequalB(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Interlock_Sum_SolveXfromUXequalY(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Interlock_SolveYfromLYequalB(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Interlock_SolveXfromUXequalY(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < 1) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Zero_B(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void A_times_B_to_X(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  [numthreads(numthreads1, 1, 1)] void Find_row_maxAbs(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.x < g.N) { }
		   
		}
	}
  #pragma kernel InitP
  #pragma kernel Find_row_maxAbs
  #pragma kernel Find_maxAbs
  #pragma kernel Find_maxElementRow
  #pragma kernel Interlock_Find_maxElementVal
  #pragma kernel Interlock_Find_maxElementRow
  #pragma kernel MakeLowerTriangleZeroAndFillWithL
  #pragma kernel Divide_by_maxAbs
  #pragma kernel Find_rowMultiplier
  #pragma kernel MakeElementZeroAndFillWithLowerMatrixElement
  #pragma kernel Set_rowMultiplier
  #pragma kernel SolveYfromLYequalB
  #pragma kernel SolveXfromUXequalY
  #pragma kernel Interlock_Sum_SolveYfromLYequalB
  #pragma kernel Interlock_Sum_SolveXfromUXequalY
  #pragma kernel Interlock_SolveYfromLYequalB
  #pragma kernel Interlock_SolveXfromUXequalY
  #pragma kernel Zero_B
  #pragma kernel A_times_B_to_X