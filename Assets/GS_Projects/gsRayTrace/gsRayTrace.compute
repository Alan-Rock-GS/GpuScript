
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define Views_Lib_ProjectionMode_Automatic	0
  #define Views_Lib_ProjectionMode_Perspective	1
  #define Views_Lib_ProjectionMode_Orthographic	2
  #define BDraw_Draw_Point	0
  #define BDraw_Draw_Sphere	1
  #define BDraw_Draw_Line	2
  #define BDraw_Draw_Arrow	3
  #define BDraw_Draw_Signal	4
  #define BDraw_Draw_LineSegment	5
  #define BDraw_Draw_Texture_2D	6
  #define BDraw_Draw_Quad	7
  #define BDraw_Draw_WebCam	8
  #define BDraw_Draw_Mesh	9
  #define BDraw_Draw_Number	10
  #define BDraw_Draw_N	11
  #define BDraw_TextAlignment_BottomLeft	0
  #define BDraw_TextAlignment_CenterLeft	1
  #define BDraw_TextAlignment_TopLeft	2
  #define BDraw_TextAlignment_BottomCenter	3
  #define BDraw_TextAlignment_CenterCenter	4
  #define BDraw_TextAlignment_TopCenter	5
  #define BDraw_TextAlignment_BottomRight	6
  #define BDraw_TextAlignment_CenterRight	7
  #define BDraw_TextAlignment_TopRight	8
  #define BDraw_Text_QuadType_FrontOnly	0
  #define BDraw_Text_QuadType_FrontBack	1
  #define BDraw_Text_QuadType_Switch	2
  #define BDraw_Text_QuadType_Arrow	3
  #define BDraw_Text_QuadType_Billboard	4
  #define BDraw_Draw_Text3D 12
  #define BDraw_maxByteN 2097152
  #define BDraw_LF 10
  #define BDraw_TB 9
  #define BDraw_ZERO 48
  #define BDraw_NINE 57
  #define BDraw_PERIOD 46
  #define BDraw_COMMA 44
  #define BDraw_PLUS 43
  #define BDraw_MINUS 45
  #define BDraw_SPACE 32
  #define g gRayTrace[0]
  #pragma use_dxc
  struct GRayTrace
  {
    float sphereRadius, diffuseLight, shadows, orthoSize, maxDist, BDraw_fontSize, BDraw_boxThickness;
    uint sphereN, depthColorN, shapeN, boxN, isOrtho, useGroundPlane, retrace, BDraw_AppendBuff_IndexN, BDraw_AppendBuff_BitN, BDraw_AppendBuff_N, BDraw_AppendBuff_BitN1, BDraw_AppendBuff_BitN2, BDraw_omitText, BDraw_includeUnicode, BDraw_fontInfoN, BDraw_textN, BDraw_textCharN, BDraw_boxEdgeN;
    float3 objectColor;
    uint2 screenSize, skyboxSize;
    Matrix4x4 camToWorld, camInvProjection;
    float4 directionalLight, BDraw_boxColor;
  };
  struct TRay { float3 origin, direction, energy, specular; float diffuse; };
  struct TRayHit { float3 position, normal, specular; float distance, diffuse; };
  struct TSphere { float3 position, color; float radius, diffuse; };
  struct TBox { float3 mn, mx, color; float diffuse; };
  struct TTriangle { float3 a, b, c, color; float diffuse; };
  struct BDraw_FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct BDraw_TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  struct Views_Lib_CamView { string viewName; float3 viewCenter; float viewDist; float2 viewTiltSpin; uint viewProjection; float view_sphereRadius; uint view_sphereN; float3 view_objectColor; float view_diffuseLight, view_shadows; };
  groupshared uint BDraw_AppendBuff_grp[1024];
  groupshared uint BDraw_AppendBuff_grp0[1024];
  RWStructuredBuffer<GRayTrace> gRayTrace;
  RWStructuredBuffer<uint> depthColor, BDraw_tab_delimeted_text, BDraw_AppendBuff_Bits, BDraw_AppendBuff_Sums, BDraw_AppendBuff_Indexes, BDraw_AppendBuff_Fills1, BDraw_AppendBuff_Fills2;
  RWStructuredBuffer<BDraw_TextInfo> BDraw_textInfos;
  RWStructuredBuffer<BDraw_FontInfo> BDraw_fontInfos;
  RWStructuredBuffer<Color32> skyboxBuffer;
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetIndexes(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_AppendBuff_BitN)
    {
      uint i = id.x, j, sum = i == 0 ? 0 : BDraw_AppendBuff_Sums[i - 1], b, i32 = i << 5, k;
      for (k = 0, b = BDraw_AppendBuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); BDraw_AppendBuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); }
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN) { uint i = id.x; if (i >= numthreads1) BDraw_AppendBuff_Sums[i] += BDraw_AppendBuff_Fills1[i / numthreads1 - 1]; if (i == g.BDraw_AppendBuff_BitN - 1) g.BDraw_AppendBuff_IndexN = BDraw_AppendBuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN1) { uint i = id.x; if (i >= numthreads1) BDraw_AppendBuff_Fills1[i] += BDraw_AppendBuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.BDraw_AppendBuff_BitN2 - 1 ? BDraw_AppendBuff_Fills1[j] : i < g.BDraw_AppendBuff_BitN2 ? BDraw_AppendBuff_Fills1[g.BDraw_AppendBuff_BitN1 - 1] : 0, s;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN2) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN2) BDraw_AppendBuff_Fills2[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.BDraw_AppendBuff_BitN1 - 1 ? BDraw_AppendBuff_Sums[j] : i < g.BDraw_AppendBuff_BitN1 ? BDraw_AppendBuff_Sums[g.BDraw_AppendBuff_BitN - 1] : 0, s;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN1) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN1) BDraw_AppendBuff_Fills1[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.BDraw_AppendBuff_BitN ? countbits(BDraw_AppendBuff_Bits[i]) : 0, s;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_Sums[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Existing_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x;
    if (i < g.BDraw_AppendBuff_BitN)
    {
      uint s, j, k, bits = BDraw_AppendBuff_Bits[i], c = countbits(bits);
      BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
      for (s = 1; s < numthreads1; s *= 2)
      {
        if (grpI >= s && i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
        BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
      }
      if (i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_Sums[i] = BDraw_AppendBuff_grp[grpI];
    }
  }
  BDraw_TextInfo BDraw_textInfo(uint i) { return BDraw_textInfos[i]; }
  void BDraw_textInfo(uint i, BDraw_TextInfo t) { BDraw_textInfos[i] = t; }
  [numthreads(numthreads1, 1, 1)] void BDraw_setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        BDraw_TextInfo t = BDraw_textInfo(0), ti = BDraw_textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        BDraw_textInfo(i, ti);
      }
    }
    }
  }
  uint2 BDraw_Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : BDraw_AppendBuff_Indexes[textI - 1] + 1, textI < g.BDraw_AppendBuff_IndexN ? BDraw_AppendBuff_Indexes[textI] : g.BDraw_textCharN); }
  uint BDraw_Byte(uint i) { return TextByte(BDraw_tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void BDraw_getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_textN)
    {
      uint i = id.x;
      BDraw_TextInfo ti = BDraw_textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = BDraw_Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = BDraw_Byte(j); if (byteI >= 32) { byteI -= 32; t.x += BDraw_fontInfos[byteI].advance; } }
      t.x /= g.BDraw_fontSize;
      ti.uvSize = t;
      BDraw_textInfo(i, ti);
    }
    }
  }
  TRay CreateRay(float3 origin, float3 direction) { TRay ray; ray.origin = origin; ray.direction = direction; ray.energy = f111; ray.specular = f000; ray.diffuse = 0; return ray; }
	
  TRay CreateCameraRay(float2 uv) { return CreateRay(mul(g.camToWorld, g.isOrtho ? float4(g.orthoSize * uv * float2(raspect(g.screenSize), 1), 0, 1) : f0001).xyz, normalize(mul(g.camToWorld, float4(mul(g.camInvProjection, float4(uv, 0, 1)).xyz, 0)).xyz)); }
  TRayHit CreateRayHit() { TRayHit hit; hit.position = f000; hit.distance = fPosInf; hit.normal = hit.specular = f000; hit.diffuse = 0; return hit; }
	
  TRayHit IntersectGroundPlane(TRay ray, TRayHit bestHit)
	{
		float t = ray.direction.y == 0 ? fPosInf : -ray.origin.y / ray.direction.y;
		if (t > 0 && t < bestHit.distance)
		{
			bestHit.distance = t; bestHit.position = t * ray.direction + ray.origin; bestHit.normal = f010;
			bestHit.specular = g.objectColor; bestHit.diffuse = g.diffuseLight;
		}
		return bestHit;
	}
	
  void pixDepth_u(uint2 id, uint d) { depthColor[id_to_i(id, g.screenSize)] = d; }
  void pixDepth_f(uint2 id, float d) { pixDepth_u(id, (uint)(d / g.maxDist * uint_max)); }
  bool BDraw_AppendBuff_IsBitOn(uint i) { uint c = BDraw_Byte(i); return c == BDraw_TB || c == BDraw_LF; }
  uint BDraw_AppendBuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.BDraw_AppendBuff_N && BDraw_AppendBuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = BDraw_AppendBuff_Assign_Bits(k + j, j, bits); BDraw_AppendBuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_Sums[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Existing_Bits(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_AppendBuff_BitN)
    {
      uint i = id.x, j, k, bits = BDraw_AppendBuff_Bits[i];
      if (i < g.BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = BDraw_AppendBuff_Assign_Bits(k + j, j, bits); BDraw_AppendBuff_Bits[i] = bits; }
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Bits(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_AppendBuff_BitN)
    {
      uint i = id.x, j, k, bits = 0;
      if (i < g.BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = BDraw_AppendBuff_Assign_Bits(k + j, j, bits); BDraw_AppendBuff_Bits[i] = bits; }
    }
    }
  }
  void pix_u(uint2 id, uint c) { depthColor[id_to_i(id, g.screenSize) + product(g.screenSize)] = c; }
  void pix_c32(uint2 id, Color32 c) { pix_u(id, c32_u(c)); }
  void pix_f3(uint2 id, float3 c) { pix_c32(id, f4_c32(float4(c, 1))); }
  TSphere GetSphere(float radius, float3 position, float diffuse, float3 color) { TSphere sphere; sphere.radius = radius; sphere.position = position; sphere.diffuse = diffuse; sphere.color = color; return sphere; }
	
  TSphere GetSphere(uint i)
	{
		uint n = roundu(sqrt(g.sphereN)); uint2 id = i_to_id(i, u11 * n); float2 d = f11 * 3, p1 = n / 2u * d, p0 = -p1, p = p0 + id * d;
		return GetSphere(g.sphereRadius, float3(p.x, g.sphereRadius, p.y), g.diffuseLight, g.objectColor);
	}
	
  TRayHit IntersectSphere(TRay ray, TRayHit bestHit, uint sphereI)
	{
		TSphere sphere = GetSphere(sphereI);
		float3 p = sphere.position, d = ray.origin - p;
		float b = -dot(ray.direction, d), h = b * b - dot(d, d) + sqr(sphere.radius);
		if (h > 0)
		{
			h = sqrt(h); h = b + (b > h ? -h : h);
			if (h > 0 && h < bestHit.distance)
			{
				bestHit.distance = h; bestHit.position = h * ray.direction + ray.origin; bestHit.normal = normalize(bestHit.position - p);
				bestHit.specular = sphere.color;
				bestHit.diffuse = sphere.diffuse;
			}
		}
		return bestHit;
	}
	
  TBox GetBox(float3 mx, float3 mn, float diffuse, float3 color) { TBox box; box.mx = mx; box.mn = mn; box.diffuse = diffuse; box.color = color; return box; }
	
  TBox GetBox(uint i) { return GetBox(float3(4, 6, 4), float3(-4, 0, -4), g.diffuseLight, g.objectColor); }
  TRayHit IntersectBox(TRay ray, TRayHit bestHit, uint i)
	{
		TBox box = GetBox(i);
		float3 t0 = (box.mn - ray.origin) / ray.direction, t1 = (box.mx - ray.origin) / ray.direction;
		float dstA = cmax(min(t0, t1)), dstB = cmin(max(t0, t1)), dstToBox = max(0, dstA), dstInsideBox = max(0, dstB - dstToBox), eps = 0.00001f;
		if (dstA >= 0 && dstA <= dstB) 
		{
			if (dstToBox < bestHit.distance)
			{
				bestHit.distance = dstToBox;
				float3 p = bestHit.position = dstToBox * ray.direction + ray.origin;
				bestHit.normal = (abs(p - box.mx) < eps) - (abs(p - box.mn) < eps); bestHit.specular = box.color; bestHit.diffuse = box.diffuse;
			}
		}
		else if (dstA < 0 && dstB > 0) 
		{
			if (dstToBox < bestHit.distance)
			{
				float3 p = dstToBox * ray.direction + ray.origin, normal = (abs(p - box.mx) < eps) - (abs(p - box.mn) < eps);
				if (all(normal != f010))
				{
					bestHit.distance = dstToBox; bestHit.position = p; bestHit.normal = -normal;
					bestHit.specular = box.color; bestHit.diffuse = box.diffuse;
				}
			}
		}
		return bestHit;
	}
	
  TRayHit Trace(TRay ray)
	{
		TRayHit bestHit = CreateRayHit();
		uint i;
		for (i = 0; i < g.sphereN; i++) bestHit = IntersectSphere(ray, bestHit, i);
		for (i = 0; i < g.boxN; i++) bestHit = IntersectBox(ray, bestHit, i);
		if (g.useGroundPlane) bestHit = IntersectGroundPlane(ray, bestHit);
		return bestHit;
	}
	
  float3 Shade(inout TRay ray, TRayHit hit)
	{
		float3 color = f000;
		if (hit.distance < fPosInf)
		{
			float3 specular = hit.specular, albedo = specular * 0.8f;
			float hit_diffuse = hit.diffuse;
			ray.origin = hit.position + hit.normal * 0.001f; 
			ray.direction = reflect(ray.direction, hit.normal);
			ray.energy *= specular;
			TRay shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -g.directionalLight.xyz);
			TRayHit shadowHit = Trace(shadowRay);
			ray.energy *= (1 - hit_diffuse);
			if (shadowHit.distance != fPosInf) { albedo *= 1 - g.shadows; ray.energy *= 1 - g.shadows; }
			color = -dot(hit.normal, g.directionalLight.xyz) * g.directionalLight.w * hit_diffuse * albedo;
		}
		else
		{
			ray.energy = f000;
			float phi = atan2(ray.direction.x, -ray.direction.z) * 0.5f, theta = acos(ray.direction.y);
			float2 p = float2(phi, theta) * -rcp(PI) + 1;
			int2 pixId = floori(p * g.skyboxSize);
			uint pixI = id_to_i(pixId, g.skyboxSize);
			color = c32_f4(skyboxBuffer[pixI]).xyz;
		}
		return color;
	}
	
  [numthreads(numthreads2, numthreads2, 1)] void traceRay(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id.xy < g.screenSize))
	{
		float2 uv = (id.xy + 0.5f) / g.screenSize * 2 - 1;
		TRay ray = CreateCameraRay(uv);
		float3 pixColor = f000;
		float minDist = g.maxDist;
		for (uint traceI = 0; traceI < 8; traceI++)
		{
			TRayHit hit = Trace(ray);
			if (traceI == 0) minDist = hit.distance;
			pixColor += ray.energy * Shade(ray, hit);
			if (all(ray.energy == 0)) break;
		}
		pixColor = max(pixColor, g.objectColor * 0.1f);
		pix_f3(id.xy, pixColor);
		pixDepth_f(id.xy, minDist);
	}
	
    }
  }
  #pragma kernel traceRay
  #pragma kernel BDraw_AppendBuff_GetIndexes
  #pragma kernel BDraw_AppendBuff_IncSums
  #pragma kernel BDraw_AppendBuff_IncFills1
  #pragma kernel BDraw_AppendBuff_GetFills2
  #pragma kernel BDraw_AppendBuff_GetFills1
  #pragma kernel BDraw_AppendBuff_Get_Bits_Sums
  #pragma kernel BDraw_AppendBuff_Get_Existing_Sums
  #pragma kernel BDraw_AppendBuff_GetSums
  #pragma kernel BDraw_AppendBuff_Get_Existing_Bits
  #pragma kernel BDraw_AppendBuff_Get_Bits
  #pragma kernel BDraw_setDefaultTextInfo
  #pragma kernel BDraw_getTextInfo