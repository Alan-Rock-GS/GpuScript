
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define Draw_Point	0
  #define Draw_Sphere	1
  #define Draw_Line	2
  #define Draw_Arrow	3
  #define Draw_Signal	4
  #define Draw_LineSegment	5
  #define Draw_Texture_2D	6
  #define Draw_Quad	7
  #define Draw_WebCam	8
  #define Draw_Mesh	9
  #define Draw_Number	10
  #define Draw_N	11
  #define TextAlignment_BottomLeft	0
  #define TextAlignment_CenterLeft	1
  #define TextAlignment_TopLeft	2
  #define TextAlignment_BottomCenter	3
  #define TextAlignment_CenterCenter	4
  #define TextAlignment_TopCenter	5
  #define TextAlignment_BottomRight	6
  #define TextAlignment_CenterRight	7
  #define TextAlignment_TopRight	8
  #define Text_QuadType_FrontOnly	0
  #define Text_QuadType_FrontBack	1
  #define Text_QuadType_Switch	2
  #define Text_QuadType_Arrow	3
  #define Text_QuadType_Billboard	4
  #define Draw_Text3D 12
  #define LF 10
  #define TB 9
  #define ZERO 48
  #define NINE 57
  #define PERIOD 46
  #define COMMA 44
  #define PLUS 43
  #define MINUS 45
  #define SPACE 32
  #define g gBDraw[0]
  #pragma use_dxc
  struct GBDraw
  {
    uint ABuff_IndexN, ABuff_BitN, ABuff_N, ABuff_BitN1, ABuff_BitN2, omitText, includeUnicode, fontInfoN, textN, textCharN, boxEdgeN;
    float fontSize, boxThickness;
    float4 boxColor;
  };
  struct FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  groupshared uint ABuff_grp[1024];
  groupshared uint ABuff_grp0[1024];
  RWStructuredBuffer<GBDraw> gBDraw;
  RWStructuredBuffer<uint> tab_delimeted_text, ABuff_Bits, ABuff_Sums, ABuff_Indexes, ABuff_Fills1, ABuff_Fills2;
  RWStructuredBuffer<TextInfo> textInfos;
  RWStructuredBuffer<FontInfo> fontInfos;
  [numthreads(numthreads1, 1, 1)] void ABuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : ABuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = ABuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); ABuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x; if (i >= numthreads1) ABuff_Sums[i] += ABuff_Fills1[i / numthreads1 - 1]; if (i == g.ABuff_BitN - 1) g.ABuff_IndexN = ABuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN1) { uint i = id.x; if (i >= numthreads1) ABuff_Fills1[i] += ABuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.ABuff_BitN2 - 1 ? ABuff_Fills1[j] : i < g.ABuff_BitN2 ? ABuff_Fills1[g.ABuff_BitN1 - 1] : 0, s;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN2) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN2) ABuff_Fills2[i] = ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.ABuff_BitN1 - 1 ? ABuff_Sums[j] : i < g.ABuff_BitN1 ? ABuff_Sums[g.ABuff_BitN - 1] : 0, s;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN1) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN1) ABuff_Fills1[i] = ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.ABuff_BitN ? countbits(ABuff_Bits[i]) : 0, s;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN) ABuff_Sums[i] = ABuff_grp[grpI];
  }
  TextInfo textInfo(uint i) { return textInfos[i]; }
  void textInfo(uint i, TextInfo t) { textInfos[i] = t; }
  uint2 Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : ABuff_Indexes[textI - 1] + 1, textI < g.ABuff_IndexN ? ABuff_Indexes[textI] : g.textCharN); }
  uint Byte(uint i) { return TextByte(tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.textN)
    {
      uint i = id.x;
      TextInfo ti = textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = Byte(j); if (byteI >= 32) { byteI -= 32; t.x += fontInfos[byteI].advance; } }
      t.x /= g.fontSize;
      ti.uvSize = t;
      textInfo(i, ti);
    }
    }
  }
  bool ABuff_IsBitOn(uint i) { uint c = Byte(i); return c == TB || c == LF; }
  uint ABuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.ABuff_N && ABuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ABuff_Assign_Bits(k + j, j, bits); ABuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN) ABuff_Sums[i] = ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ABuff_Assign_Bits(k + j, j, bits); ABuff_Bits[i] = bits; } } } }
  [numthreads(numthreads1, 1, 1)] void setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        TextInfo t = textInfo(0), ti = textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        textInfo(i, ti);
      }
    }
    }
  }
  #pragma kernel setDefaultTextInfo
  #pragma kernel getTextInfo
  #pragma kernel ABuff_GetIndexes
  #pragma kernel ABuff_IncSums
  #pragma kernel ABuff_IncFills1
  #pragma kernel ABuff_GetFills2
  #pragma kernel ABuff_GetFills1
  #pragma kernel ABuff_Get_Bits_Sums
  #pragma kernel ABuff_GetSums
  #pragma kernel ABuff_Get_Bits