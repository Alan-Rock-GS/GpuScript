
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define BDraw_Draw_Point	0
  #define BDraw_Draw_Sphere	1
  #define BDraw_Draw_Line	2
  #define BDraw_Draw_Arrow	3
  #define BDraw_Draw_Signal	4
  #define BDraw_Draw_LineSegment	5
  #define BDraw_Draw_Texture_2D	6
  #define BDraw_Draw_Quad	7
  #define BDraw_Draw_WebCam	8
  #define BDraw_Draw_Mesh	9
  #define BDraw_Draw_Number	10
  #define BDraw_Draw_N	11
  #define BDraw_TextAlignment_BottomLeft	0
  #define BDraw_TextAlignment_CenterLeft	1
  #define BDraw_TextAlignment_TopLeft	2
  #define BDraw_TextAlignment_BottomCenter	3
  #define BDraw_TextAlignment_CenterCenter	4
  #define BDraw_TextAlignment_TopCenter	5
  #define BDraw_TextAlignment_BottomRight	6
  #define BDraw_TextAlignment_CenterRight	7
  #define BDraw_TextAlignment_TopRight	8
  #define BDraw_Text_QuadType_FrontOnly	0
  #define BDraw_Text_QuadType_FrontBack	1
  #define BDraw_Text_QuadType_Switch	2
  #define BDraw_Text_QuadType_Arrow	3
  #define BDraw_Text_QuadType_Billboard	4
  #define PaletteType_Rainbow	0
  #define PaletteType_GradientRainbow	1
  #define PaletteType_GradientRainbow10	2
  #define PaletteType_GradientRainbow20	3
  #define PaletteType_Heat	4
  #define PaletteType_GradientHeat	5
  #define PaletteType_WhiteRainbow	6
  #define PaletteType_invRainbow	7
  #define PaletteType_Green	8
  #define PaletteType_Gray	9
  #define PaletteType_DarkGray	10
  #define PaletteType_CT	11
  #define BDraw_Draw_Text3D 12
  #define BDraw_maxByteN 2097152
  #define BDraw_LF 10
  #define BDraw_TB 9
  #define BDraw_ZERO 48
  #define BDraw_NINE 57
  #define BDraw_PERIOD 46
  #define BDraw_COMMA 44
  #define BDraw_PLUS 43
  #define BDraw_MINUS 45
  #define BDraw_SPACE 32
  #define g gVGrid_Lib[0]
  #pragma use_dxc
  struct GVGrid_Lib
  {
    uint BDraw_AppendBuff_IndexN, BDraw_AppendBuff_BitN, BDraw_AppendBuff_N, BDraw_AppendBuff_BitN1, BDraw_AppendBuff_BitN2, BDraw_omitText, BDraw_includeUnicode, BDraw_fontInfoN, BDraw_textN, BDraw_textCharN, BDraw_boxEdgeN, drawGrid, drawBox, drawAxes, customAxesRangeN, zeroOrigin, drawSurface, GridDrawFront, GridDrawBack, show_slices, paletteType, twoSided, reCalc, buildText, isOrtho, showMeshVal, showMeshRange, showOutline, showSurface, showAxes, showNormalizedAxes, retrace;
    float BDraw_fontSize, BDraw_boxThickness, resolution, boxLineThickness, axesOpacity, GridLineThickness, opacity, meshVal, orthoSize, maxDist, minResolution;
    float4 BDraw_boxColor;
    float2 GridX, GridY, GridZ, textSize, paletteRange, meshRange;
    float3 axesRangeMin, axesRangeMax, axesRangeMin1, axesRangeMax1, axesRangeMin2, axesRangeMax2, axesColor, slices, sliceRotation;
    uint3 nodeN;
    uint2 viewSize;
    uint4 viewRect;
    Matrix4x4 camToWorld, cameraInvProjection;
  };
  struct BDraw_FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct BDraw_TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  struct TRay { float3 origin, direction; float4 color; float dist; };
  groupshared uint BDraw_AppendBuff_grp[1024];
  groupshared uint BDraw_AppendBuff_grp0[1024];
  RWStructuredBuffer<GVGrid_Lib> gVGrid_Lib;
  RWStructuredBuffer<uint> BDraw_tab_delimeted_text, BDraw_AppendBuff_Bits, BDraw_AppendBuff_Sums, BDraw_AppendBuff_Indexes, BDraw_AppendBuff_Fills1, BDraw_AppendBuff_Fills2;
  RWStructuredBuffer<BDraw_TextInfo> BDraw_textInfos;
  RWStructuredBuffer<BDraw_FontInfo> BDraw_fontInfos;
  RWStructuredBuffer<uint2> depthColors;
  RWStructuredBuffer<Color32> paletteBuffer;
  RWStructuredBuffer<float> Vals;
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : BDraw_AppendBuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = BDraw_AppendBuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); BDraw_AppendBuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN) { uint i = id.x; if (i >= numthreads1) BDraw_AppendBuff_Sums[i] += BDraw_AppendBuff_Fills1[i / numthreads1 - 1]; if (i == g.BDraw_AppendBuff_BitN - 1) g.BDraw_AppendBuff_IndexN = BDraw_AppendBuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN1) { uint i = id.x; if (i >= numthreads1) BDraw_AppendBuff_Fills1[i] += BDraw_AppendBuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.BDraw_AppendBuff_BitN2 - 1 ? BDraw_AppendBuff_Fills1[j] : i < g.BDraw_AppendBuff_BitN2 ? BDraw_AppendBuff_Fills1[g.BDraw_AppendBuff_BitN1 - 1] : 0, s;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN2) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN2) BDraw_AppendBuff_Fills2[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.BDraw_AppendBuff_BitN1 - 1 ? BDraw_AppendBuff_Sums[j] : i < g.BDraw_AppendBuff_BitN1 ? BDraw_AppendBuff_Sums[g.BDraw_AppendBuff_BitN - 1] : 0, s;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN1) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN1) BDraw_AppendBuff_Fills1[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.BDraw_AppendBuff_BitN ? countbits(BDraw_AppendBuff_Bits[i]) : 0, s;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_Sums[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Existing_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x;
    if (i < g.BDraw_AppendBuff_BitN)
    {
      uint s, j, k, bits = BDraw_AppendBuff_Bits[i], c = countbits(bits);
      BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
      for (s = 1; s < numthreads1; s *= 2)
      {
        if (grpI >= s && i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
        BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
      }
      if (i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_Sums[i] = BDraw_AppendBuff_grp[grpI];
    }
  }
  BDraw_TextInfo BDraw_textInfo(uint i) { return BDraw_textInfos[i]; }
  void BDraw_textInfo(uint i, BDraw_TextInfo t) { BDraw_textInfos[i] = t; }
  [numthreads(numthreads1, 1, 1)] void BDraw_setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        BDraw_TextInfo t = BDraw_textInfo(0), ti = BDraw_textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        BDraw_textInfo(i, ti);
      }
    }
    }
  }
  uint2 BDraw_Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : BDraw_AppendBuff_Indexes[textI - 1] + 1, textI < g.BDraw_AppendBuff_IndexN ? BDraw_AppendBuff_Indexes[textI] : g.BDraw_textCharN); }
  uint BDraw_Byte(uint i) { return TextByte(BDraw_tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void BDraw_getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.BDraw_textN)
    {
      uint i = id.x;
      BDraw_TextInfo ti = BDraw_textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = BDraw_Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = BDraw_Byte(j); if (byteI >= 32) { byteI -= 32; t.x += BDraw_fontInfos[byteI].advance; } }
      t.x /= g.BDraw_fontSize;
      ti.uvSize = t;
      BDraw_textInfo(i, ti);
    }
    }
  }
  TRay CreateRayHit() { TRay hit; hit.origin = f000; hit.dist = fPosInf; hit.direction = f000; hit.color = f0000; return hit; }
	
  float3 gridMin() { return float3(g.GridX.x, g.GridY.x, g.GridZ.x); }
  float3 NodeLocation3(uint3 id) { return id * g.resolution + gridMin(); }
  float3 gridMax() { return float3(g.GridX.y, g.GridY.y, g.GridZ.y); }
  void Assign(inout TRay hit, float3 position, float3 normal, float4 color, float dist) { hit.origin = position; hit.direction = normal; hit.color = color; hit.dist = dist; }
	
  void pixDepthColor(uint i, float d, float4 c) { depthColors[i] = uint2((uint)(d / g.maxDist * uint_max), c32_u(f4_c32(c))); }
  void pixDepthColor(uint2 id, float d, float4 c) { pixDepthColor(id_to_i(id, g.viewSize), d, c); }
  void Val(uint i, float v) { Vals[i] = v; }
  uint NodeI(uint3 id) { return id_to_i(id, g.nodeN); }
  bool BDraw_AppendBuff_IsBitOn(uint i) { uint c = BDraw_Byte(i); return c == BDraw_TB || c == BDraw_LF; }
  uint BDraw_AppendBuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.BDraw_AppendBuff_N && BDraw_AppendBuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = BDraw_AppendBuff_Assign_Bits(k + j, j, bits); BDraw_AppendBuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    BDraw_AppendBuff_grp0[grpI] = c; BDraw_AppendBuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_grp[grpI] = BDraw_AppendBuff_grp0[grpI] + BDraw_AppendBuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      BDraw_AppendBuff_grp0[grpI] = BDraw_AppendBuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BDraw_AppendBuff_BitN) BDraw_AppendBuff_Sums[i] = BDraw_AppendBuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Existing_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN) { uint i = id.x, j, k, bits = BDraw_AppendBuff_Bits[i]; if (i < g.BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = BDraw_AppendBuff_Assign_Bits(k + j, j, bits); BDraw_AppendBuff_Bits[i] = bits; } } } }
  [numthreads(numthreads1, 1, 1)] void BDraw_AppendBuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BDraw_AppendBuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.BDraw_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = BDraw_AppendBuff_Assign_Bits(k + j, j, bits); BDraw_AppendBuff_Bits[i] = bits; } } } }
  TRay CreateShaderCameraRay(float2 _uv)
	{
		TRay ray;
		ray.origin = mul(g.camToWorld, g.isOrtho ? float4(g.orthoSize * _uv / float2(aspect(g.viewSize), 1), 0, 1) : f0001).xyz;
		ray.direction = normalize(mul(g.camToWorld, float4(mul(g.cameraInvProjection, float4(_uv, 0, 1)).xyz, 0)).xyz);
		ray.color = f0000;
		ray.dist = 0;
		return ray;
	}
	
  TRay CreateRay(float3 origin, float3 direction) { TRay ray; ray.origin = origin; ray.direction = direction; ray.color = f0000; ray.dist = 0; return ray; }
	
  TRay CreateCameraRay(float2 _uv) { TRay ray = CreateShaderCameraRay(_uv); return CreateRay(ray.origin, ray.direction); }
	
  float Val(uint i) { return Vals[i]; }
  float4 DrawSliceColor(float4 color, float3 q) { return color; }
  float3 GetCorner_q(float3 p) { return clamp((p - gridMin()) / g.resolution, f000, (int3)g.nodeN - f111); }
  uint3 GetCorner_I(float3 q) { return (uint3)q; }
  float Interpolate_Val(float3 fq, uint4 c0, uint4 c1) { return Interpolate(Val(c0.x), Val(c0.y), Val(c0.z), Val(c0.w), Val(c1.x), Val(c1.y), Val(c1.z), Val(c1.w), fq); }
  float4 paletteBufferColor(float v) { return c32_f4(paletteBuffer[roundu(clamp(v * 255, 0, 255))]); }
  float4 GetPointColor(float3 p, float val) { return paletteBufferColor(lerp1(g.paletteRange, val)); }
  float4 GetNormalColor(TRay ray, float3 normal, float val, float3 p)
	{
		float3 lightDirection = _WorldSpaceLightPos0.xyz;
		float3 h = (lightDirection - ray.direction) / 2;
		float v = 1, gloss = 0.5f, s = sqr(abs(dot(normal, h))) * gloss, NdotL = abs(dot(normal, lightDirection));
		if (g.GridLineThickness > 0)
		{
			float w = 1 / max(0.00001f, g.GridLineThickness);
			p /= g.resolution;
			float3 blend = normalize(max((abs(normal) - 0.2f) * 7, 0.0f));
			v = csum(blend * saturate(0.5f * float3(product((1 - abs(1 - 2 * frac(p.yz))) * w), product((1 - abs(1 - 2 * frac(p.xz))) * w), product((1 - abs(1 - 2 * frac(p.xy))) * w))));
		}
		return float4(saturate((GetPointColor(p, val).xyz * (NdotL + 0.5f) + s) * v), g.opacity);
	}
	
  uint3 nodeN1() { return max(g.nodeN, u111) - u111; }
  uint GridToIndex(int3 _I) { return id_to_i(clamp(_I, u000, nodeN1()), g.nodeN); }
  uint4 GetFaceI(uint3 _I, int3 x, int3 y, int3 z, int3 w) { return new uint4(GridToIndex((int3)_I + x), GridToIndex((int3)_I + y), GridToIndex((int3)_I + z), GridToIndex((int3)_I + w)); }
  uint4 GetFaceI(uint3 _I, int3 d) { return GetFaceI(_I, i000 + d, i001 + d, i010 + d, i011 + d); }
  float Val(float3 p) { float3 q = GetCorner_q(p); uint3 _I = GetCorner_I(q); return Interpolate_Val(frac(q), GetFaceI(_I, i000), GetFaceI(_I, i100)); }
	
  float setDepth(float depth, TRay ray, inout float3 p, inout float val) { p = depth * ray.direction + ray.origin; val = Val(p); return depth; }
	
  void DrawSlice(float3 axis, TRay ray, inout TRay hit, inout float3 p, inout float val, inout float depth, inout bool found, inout float4 color, float3 normal)
	{
		float depth_slice;
		float3 axis2 = rotateZYXDeg(axis, g.sliceRotation), q = PlaneLineIntersectionPoint(axis2, g.slices, ray.origin, ray.direction);
		if (q.x != fNegInf && IsNotOutside(q, gridMin(), gridMax()))
		{
			depth_slice = setDepth(max(distance(q, ray.origin), 0.018f), ray, p, val);
			if (depth_slice < depth) { found = true; depth = depth_slice; color = DrawSliceColor(GetNormalColor(ray, axis2, val, p), q); Assign(hit, p, normal, color, depth); }
		}
	}
	
  float3 Val(float3 p, float d) { return float3(Val(p + f100 * d), Val(p + f010 * d), Val(p + f001 * d)); }
  void Val3(uint3 id, float v) { Val(NodeI(id), v); }
  [numthreads(numthreads3, numthreads3, numthreads3)] void Grid_Calc_Vals(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.nodeN))
	{
		float3 p = NodeLocation3(id);
		float R = 0.3333f, v = sqr(length(p.xz) - R) + sqr(p.y);
		Val3(id, v * 10);
	}
	
    }
  }
  float3 Normal(float3 p)
	{
		float r = g.resolution * 0.5f, margin = r * 0.02f;
		float3 normal = p <= gridMin() + margin;
		if (all(normal == f000)) normal = p >= gridMax() - margin;
		if (all(normal == f000)) normal = normalize(Val(p, r) - Val(p, -r));
		return normal;
	}
	
  float4 GetColor(TRay ray, inout float3 normal, float val, float3 p) { return GetNormalColor(ray, normal = Normal(p), val, p); }
  void TraceRay(uint3 id, bool isSimple)
	{
		TRay ray = CreateCameraRay(2.0f * id.xy / g.viewSize - 1), hit = CreateRayHit();
		float3 mn = gridMin(), mx = max(mn + 0.001f, gridMax());
		float2 dst = HitGridBox(mn, mx, ray.origin, ray.direction);
		bool hitOutside = HitOutsideGrid(dst), hitInside = HitInsideGrid(dst);
		if (hitOutside || hitInside)
		{
			float3 p = f000, normal = f100;
			float val = 0, depth = setDepth(max(dst.x, 0.018f), ray, p, val), depth2 = dst.y, step = g.resolution, d0, d2;
			bool found = false;
			float4 color = f0000;
			if (g.GridDrawFront && hitOutside) { color = GetColor(ray, normal, val, p); Assign(hit, p, normal, color, depth); }
			else
			{
				float val0 = val;
				if (isSimple)
				{
					float v = g.meshVal;
					for (uint i = 0, n = csum(g.nodeN); i < n && !found; i++)
					{
						if (val0 > v && val <= v)
						{
							val0 = val;
							for (d0 = max(0, depth - step), d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val > v) d0 = depth; else d2 = depth; }
							color = GetColor(ray, normal, val, p);
							Assign(hit, p, normal, color, depth); found = true;
						}
						else if (val0 < v && val >= v)
						{
							val0 = val;
							for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val < v) d0 = depth; else d2 = depth; }
							if (depth + step < depth2)
							{
								color = GetColor(ray, normal, val, p);
								Assign(hit, p, normal, color, depth); found = true;
							}
						}
						else val0 = val;
						if (depth + step > depth2) { depth = setDepth(depth2, ray, p, val); break; }
						depth = setDepth(depth + step, ray, p, val);
					}
				}
				else
				{
					for (uint i = 0, n = csum(g.nodeN); i < n && (g.opacity < 0.999f || !found); i++)
					{
						if (i == 0 && hitOutside && val <= g.meshRange.y && val >= g.meshRange.x)
						{
							val0 = val;
							color = GetColor(ray, normal, val, p);
							Assign(hit, p, normal, color, depth);
							found = true;
						}
						else if (val0 > g.meshRange.y && val <= g.meshRange.y)
						{
							val0 = val;
							for (d0 = max(0, depth - step), d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val > g.meshRange.y) d0 = depth; else d2 = depth; }
							color = GetColor(ray, normal, val, p);
							if (!found) { Assign(hit, p, normal, color, depth); found = true; }
							else hit.color.xyz = g.opacity * hit.color.xyz + (1 - g.opacity) * color.xyz;
						}
						else if (val0 < g.meshRange.x && val >= g.meshRange.x)
						{
							val0 = val;
							for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val < g.meshRange.x) d0 = depth; else d2 = depth; }
							if (depth + step < depth2)
							{
								color = GetColor(ray, normal, val, p);
								if (!found) { Assign(hit, p, normal, color, depth); found = true; }
								else hit.color.xyz = g.opacity * hit.color.xyz + (1 - g.opacity) * color.xyz;
							}
						}
						else if (val0 > g.meshRange.x && val <= g.meshRange.x)
						{
							val0 = val;
							for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val > g.meshRange.x) d0 = depth; else d2 = depth; }
							color = GetColor(ray, normal, val, p);
							if (!found) { Assign(hit, p, normal, color, depth); found = true; }
							else hit.color.xyz = g.opacity * hit.color.xyz + (1 - g.opacity) * color.xyz;
						}
						else if (val0 < g.meshRange.y && val >= g.meshRange.y)
						{
							val0 = val;
							for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val < g.meshRange.y) d0 = depth; else d2 = depth; }
							color = GetColor(ray, normal, val, p);
							if (!found) { Assign(hit, p, normal, color, depth); found = true; }
							else hit.color.xyz = g.opacity * hit.color.xyz + (1 - g.opacity) * color.xyz;
						}
						else if (hitInside && depth > step / 2 && val0 > g.meshRange.x && val <= g.meshRange.x)
						{
							val0 = val;
							for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = setDepth((d0 + d2) / 2, ray, p, val); if (val > g.meshRange.x) d0 = depth; else d2 = depth; }
							color = GetColor(ray, normal, val, p);
							if (!found) { Assign(hit, p, normal, color, depth); found = true; }
							else hit.color.xyz = g.opacity * hit.color.xyz + (1 - g.opacity) * color.xyz;
						}
						else val0 = val;
						if (depth + step > depth2) { depth = setDepth(depth2, ray, p, val); break; }
						depth = setDepth(depth + step, ray, p, val);
					}
				}
				if (g.show_slices) for (uint i = 0; i < 3; i++) DrawSlice(index(f000, i, 1.0f), ray, hit, p, val, depth, found, color, normal);
				if (g.GridDrawBack)
				{
					color = GetColor(ray, normal, val, p);
					if (!found) Assign(hit, p, normal, color, depth);
					else hit.color.xyz = g.opacity * hit.color.xyz + (1 - g.opacity) * color.xyz;
				}
			}
		}
		pixDepthColor(id.xy, hit.dist, hit.color);
	}
	
  [numthreads(numthreads2, numthreads2, 1)] void Grid_TraceRay(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id.xy < g.viewSize)) { TraceRay(id, false); }
	
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Grid_Simple_TraceRay(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id.xy < g.viewSize)) { TraceRay(id, true); }
	
    }
  }
  #pragma kernel Grid_Simple_TraceRay
  #pragma kernel Grid_TraceRay
  #pragma kernel Grid_Calc_Vals
  #pragma kernel BDraw_AppendBuff_GetIndexes
  #pragma kernel BDraw_AppendBuff_IncSums
  #pragma kernel BDraw_AppendBuff_IncFills1
  #pragma kernel BDraw_AppendBuff_GetFills2
  #pragma kernel BDraw_AppendBuff_GetFills1
  #pragma kernel BDraw_AppendBuff_Get_Bits_Sums
  #pragma kernel BDraw_AppendBuff_Get_Existing_Sums
  #pragma kernel BDraw_AppendBuff_GetSums
  #pragma kernel BDraw_AppendBuff_Get_Existing_Bits
  #pragma kernel BDraw_AppendBuff_Get_Bits
  #pragma kernel BDraw_setDefaultTextInfo
  #pragma kernel BDraw_getTextInfo