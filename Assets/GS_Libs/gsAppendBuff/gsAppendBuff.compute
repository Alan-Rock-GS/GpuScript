
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define g gAppendBuff[0]
  #pragma use_dxc
  struct GAppendBuff
  {
    uint IndexN, BitN, N, BitN1, BitN2;
  };
  groupshared uint grp[1024];
  groupshared uint grp0[1024];
  RWStructuredBuffer<GAppendBuff> gAppendBuff;
  RWStructuredBuffer<uint> Bits, Sums, Indexes, Fills1, Fills2;
  [numthreads(numthreads1, 1, 1)] void GetIndexes(uint3 id : SV_DispatchThreadID)
  {
    if (id.x < g.BitN)
    {
      uint i = id.x, j, sum = i == 0 ? 0 : Sums[i - 1], b, i32 = i << 5, k;
      for (k = 0, b = Bits[i]; b > 0; k++) { j = (uint)findLSB(b); Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); }
    }
  }
  [numthreads(numthreads1, 1, 1)] void IncFills1(uint3 id : SV_DispatchThreadID) { if (id.x < g.BitN1) { uint i = id.x; if (i >= numthreads1) Fills1[i] += Fills2[i / numthreads1 - 1]; } }
  [numthreads(numthreads1, 1, 1)] void GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.BitN2 - 1 ? Fills1[j] : i < g.BitN2 ? Fills1[g.BitN1 - 1] : 0, s;
    grp0[grpI] = c; grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BitN2) grp[grpI] = grp0[grpI] + grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      grp0[grpI] = grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BitN2) Fills2[i] = grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.BitN1 - 1 ? Sums[j] : i < g.BitN1 ? Sums[g.BitN - 1] : 0, s;
    grp0[grpI] = c; grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BitN1) grp[grpI] = grp0[grpI] + grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      grp0[grpI] = grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BitN1) Fills1[i] = grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.BitN ? countbits(Bits[i]) : 0, s;
    grp0[grpI] = c; grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BitN) grp[grpI] = grp0[grpI] + grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      grp0[grpI] = grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BitN) Sums[i] = grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Get_Existing_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x;
    if (i < g.BitN)
    {
      uint s, j, k, bits = Bits[i], c = countbits(bits);
      grp0[grpI] = c; grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
      for (s = 1; s < numthreads1; s *= 2)
      {
        if (grpI >= s && i < g.BitN) grp[grpI] = grp0[grpI] + grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
        grp0[grpI] = grp[grpI]; GroupMemoryBarrierWithGroupSync();
      }
      if (i < g.BitN) Sums[i] = grp[grpI];
    }
  }
  bool IsBitOn(uint i) { return i % 32 == 0; }
  uint Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.N && IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Assign_Bits(k + j, j, bits); Bits[i] = bits; c = countbits(bits); } else c = 0;
    grp0[grpI] = c; grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.BitN) grp[grpI] = grp0[grpI] + grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      grp0[grpI] = grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.BitN) Sums[i] = grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Get_Existing_Bits(uint3 id : SV_DispatchThreadID)
  {
    if (id.x < g.BitN)
    {
      uint i = id.x, j, k, bits = Bits[i];
      if (i < g.BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Assign_Bits(k + j, j, bits); Bits[i] = bits; }
    }
  }
  [numthreads(numthreads1, 1, 1)] void Get_Bits(uint3 id : SV_DispatchThreadID)
  {
    if (id.x < g.BitN)
    {
      uint i = id.x, j, k, bits = 0;
      if (i < g.BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Assign_Bits(k + j, j, bits); Bits[i] = bits; }
    }
  }
  [numthreads(numthreads1, 1, 1)] void IncSums(uint3 id : SV_DispatchThreadID) { if (id.x < g.BitN) { uint i = id.x; if (i >= numthreads1) Sums[i] += Fills1[i / numthreads1 - 1]; if (i == g.BitN - 1) g.IndexN = Sums[i]; } }
  #pragma kernel GetIndexes
  #pragma kernel IncSums
  #pragma kernel IncFills1
  #pragma kernel GetFills2
  #pragma kernel GetFills1
  #pragma kernel Get_Bits_Sums
  #pragma kernel Get_Existing_Sums
  #pragma kernel GetSums
  #pragma kernel Get_Existing_Bits
  #pragma kernel Get_Bits