
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define g gMatrix[0]
  #pragma use_dxc
  struct GMatrix
  {
    uint IntsN, col_m, row_n, XN, AI0, XsI0, BsI0;
  };
  RWStructuredBuffer<GMatrix> gMatrix;
  RWStructuredBuffer<int> Ints;
  RWStructuredBuffer<float> A_matrix, Xs, Bs;
  [numthreads(numthreads3, numthreads3, numthreads3)] void Calc_bs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.z < g.XN && id.y < g.row_n && id.x < g.col_m) { } } }
  [numthreads(numthreads2, numthreads2, 1)] void Get_Bs(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.y < g.XN && id.x < g.col_m) { }
		   
		}
	}
  [numthreads(numthreads2, numthreads2, 1)] void Set_Xs(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.y < g.XN && id.x < g.col_m) { }
		   
		}
	}
  [numthreads(numthreads2, numthreads2, 1)] void Set_A_matrix(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.y < g.row_n && id.x < g.col_m) { }
		   
		}
	}
  [numthreads(numthreads2, numthreads2, 1)] void Get_A_matrix(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.y < g.row_n && id.x < g.col_m) { }
		   
		}
	}
  [numthreads(numthreads2, numthreads2, 1)] void Zero_bs(uint3 id : SV_DispatchThreadID)
	{
		unchecked
		{
			if (id.y < g.XN && id.x < g.col_m) { }
		   
		}
	}
  #pragma kernel Calc_bs
  #pragma kernel Zero_bs
  #pragma kernel Get_Bs
  #pragma kernel Set_Xs
  #pragma kernel Set_A_matrix
  #pragma kernel Get_A_matrix