
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define g gSort_Lib[0]
  #pragma use_dxc
  struct GSort_Lib
  {
    uint numberOfArrays, arrayLength;
  };
  RWStructuredBuffer<GSort_Lib> gSort_Lib;
  RWStructuredBuffer<float> vs;
  RWStructuredBuffer<uint> counts, sorts;
  [numthreads(numthreads2, numthreads2, 1)] void counts_to_sorts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.arrayLength && id.x < g.numberOfArrays)
	{
		uint arrI = id.x, sortI = id.y, j = arrI * g.arrayLength, i = j + sortI;
		sorts[j + counts[i]] = sortI;
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void init_counts(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.numberOfArrays * g.arrayLength) { counts[id.x] = 0; sorts[id.x] = 0; }
	
    }
  }
  bool compare(uint2 u) { return vs[u.x] > vs[u.y]; }
  [numthreads(numthreads2, numthreads2, 1)] void add_counts_triangle(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.arrayLength * (g.arrayLength - 1) / 2 && id.x < g.numberOfArrays) { uint arrI = id.x, k = id.y, j = arrI * g.arrayLength; uint2 u = upperTriangularIndex(k, g.arrayLength) + u11 * j; InterlockedAdd(counts, compare(u) ? u.x : u.y, 1); }
	
    }
  }
  #pragma kernel counts_to_sorts
  #pragma kernel add_counts_triangle
  #pragma kernel init_counts