
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define ProcessorType_CPU	0
  #define ProcessorType_GPU	1
  #define g gA_AppendBuff_Doc[0]
  struct GA_AppendBuff_Doc
  {
    uint AppendBuff_N, Runtime_N, processorType, AppendBuffTest_IndexN, uintN, A_AppendBuff_IndexN, A_AppendBuff_BitN, A_AppendBuff_N, A_AppendBuff_BitRowN, A_AppendBuff_BitColN;
    float AppendBuffTest_Time_us;
  };
  RWStructuredBuffer<GA_AppendBuff_Doc> gA_AppendBuff_Doc;
  RWStructuredBuffer<uint> uints, A_AppendBuff_Bits, A_AppendBuff_Sums, A_AppendBuff_Indexes, A_AppendBuff_ColN_Sums;
  [numthreads(numthreads1, 1, 1)] void A_AppendBuff_CalcIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.A_AppendBuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : A_AppendBuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = A_AppendBuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); A_AppendBuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads2, numthreads2, 1)] void A_AppendBuff_CalcSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.A_AppendBuff_BitColN * (g.A_AppendBuff_BitColN - 1) / 2 && id.x < g.A_AppendBuff_BitRowN) { uint i = id.x, k = id.y, j = i * g.A_AppendBuff_BitColN; uint2 u = upperTriangularIndex(k, g.A_AppendBuff_BitColN) + u11 * j; if (u.x < g.A_AppendBuff_BitN && u.y < g.A_AppendBuff_BitN) InterlockedAdd(A_AppendBuff_Sums, u.y, countbits(A_AppendBuff_Bits[u.x])); } } }
  [numthreads(numthreads1, 1, 1)] void A_AppendBuff_InitSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.A_AppendBuff_BitN) { A_AppendBuff_Sums[id.x] = countbits(A_AppendBuff_Bits[id.x]); } } }
  [numthreads(numthreads1, 1, 1)] void A_AppendBuff_Init_Bits_32(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.A_AppendBuff_BitN) { A_AppendBuff_Bits[id.x] = 0; } } }
  [numthreads(numthreads1, 1, 1)] void calc_uints(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.uintN) { } } }
  uint A_AppendBuff_SumI(uint rowI, uint colJ) { return rowI * g.A_AppendBuff_BitColN + colJ; }
  [numthreads(numthreads1, 1, 1)] void A_AppendBuff_Calc_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.A_AppendBuff_BitRowN * (g.A_AppendBuff_BitRowN - 1) / 2) { uint2 u = upperTriangularIndex(id.x, g.A_AppendBuff_BitColN); if (u.x < g.A_AppendBuff_BitRowN) InterlockedAdd(A_AppendBuff_ColN_Sums, u.y, A_AppendBuff_Sums[min(A_AppendBuff_SumI(u.x, g.A_AppendBuff_BitColN - 1), g.A_AppendBuff_BitN - 1)]); } } }
  [numthreads(numthreads1, 1, 1)] void A_AppendBuff_Init_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.A_AppendBuff_BitRowN) { A_AppendBuff_ColN_Sums[id.x] = A_AppendBuff_Sums[min(A_AppendBuff_SumI(id.x, g.A_AppendBuff_BitColN - 1), g.A_AppendBuff_BitN - 1)]; } } }
  bool A_AppendBuff_IsBitOn(uint i) { return i % 32 == 0; }
  uint A_AppendBuff_Assign_Bit(uint i, uint j) { return Is(i < g.A_AppendBuff_N && A_AppendBuff_IsBitOn(i)) << (int)j; }
  [numthreads(numthreads2, numthreads2, 1)] void A_AppendBuff_Get_Bits_32(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < 32 && id.x < g.A_AppendBuff_BitN) { uint i = id.x, j = id.y, k = i * 32 + j, bits; if (i < g.A_AppendBuff_BitN && (bits = A_AppendBuff_Assign_Bit(k, j)) != 0) InterlockedOr(A_AppendBuff_Bits, i, bits); } } }
  uint A_AppendBuff_Assign_Bits(uint i, uint j, uint bits) { return bits | A_AppendBuff_Assign_Bit(i, j); }
  [numthreads(numthreads1, 1, 1)] void A_AppendBuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.A_AppendBuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.A_AppendBuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = A_AppendBuff_Assign_Bits(k + j, j, bits); A_AppendBuff_Bits[i] = bits; } } } }
  [numthreads(numthreads2, numthreads2, 1)] void A_AppendBuff_Add_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.A_AppendBuff_BitColN && id.x < g.A_AppendBuff_BitRowN - 1) { uint rowI = id.x + 1, i = A_AppendBuff_SumI(rowI, id.y); if (i < g.A_AppendBuff_BitN) InterlockedAdd(A_AppendBuff_Sums, i, A_AppendBuff_ColN_Sums[rowI - 1]); } } }
  #pragma kernel A_AppendBuff_CalcIndexes
  #pragma kernel A_AppendBuff_Add_ColN_Sums
  #pragma kernel A_AppendBuff_Calc_ColN_Sums
  #pragma kernel A_AppendBuff_Init_ColN_Sums
  #pragma kernel A_AppendBuff_CalcSums
  #pragma kernel A_AppendBuff_InitSums
  #pragma kernel A_AppendBuff_Get_Bits_32
  #pragma kernel A_AppendBuff_Init_Bits_32
  #pragma kernel A_AppendBuff_Get_Bits
  #pragma kernel calc_uints