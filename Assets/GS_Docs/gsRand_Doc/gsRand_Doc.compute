
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define g gRand_Doc[0]
  #pragma use_dxc
  struct GRand_Doc
  {
    float f2i, Avg_Val, Avg_Val_Runtime, Avg_Val_TFlops, Area_PI_Val, Area_PI_Error, Area_PI_Runtime, Area_PI_TFlops, Integral_PI_Val, Integral_PI_Error, Integral_PI_Runtime, Integral_PI_TFlops;
    uint pntN, Rand_N, Rand_I, Rand_J;
    uint4 Rand_seed4;
  };
  groupshared uint4 Rand_grp[1024];
  RWStructuredBuffer<GRand_Doc> gRand_Doc;
  RWStructuredBuffer<uint> uints;
  RWStructuredBuffer<int> ints;
  RWStructuredBuffer<uint4> Rand_rs;
  [numthreads(numthreads1, 1, 1)] void Rand_initSeed(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Rand_N) { uint i = id.x; Rand_rs[i] = i == 0 ? g.Rand_seed4 : u0000; } } }
  [numthreads(numthreads1, 1, 1)] void Rand_grp_fill_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
  [numthreads(numthreads1, 1, 1)] void Rand_grp_init_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void Rand_grp_init_1M(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  uint Rand_UV(uint4 r) { return cxor(r); }
  float Rand_FV(uint4 r) { return 2.3283064365387e-10f * Rand_UV(r); }
  uint Rand_u(uint a, int b, int c, int d, uint e) { return ((a & e) << d) ^ (((a << b) ^ a) >> c); }
  uint4 Rand_U4(uint4 r) { return uint4(Rand_u(r.x, 13, 19, 12, 4294967294u), Rand_u(r.y, 2, 25, 4, 4294967288u), Rand_u(r.z, 3, 11, 17, 4294967280u), r.w * 1664525 + 1013904223u); }
  uint4 Rand_rUInt4(uint i) { return Rand_U4(Rand_rs[i]); }
  uint4 Rand_UInt4(uint i) { return Rand_rs[i] = Rand_rUInt4(i); }
  float Rand_Float(uint i) { return Rand_FV(Rand_UInt4(i)); }
  [numthreads(numthreads1, 1, 1)] void Count_Pnts_out_of_Circle(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.pntN)
	{
		uint j = id.x << 1;
		if (distance(2 * float2(Rand_Float(j), Rand_Float(j + 1)), f11) > 1) InterlockedAdd(uints, 0, 1);
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Count_Pnts_in_Circle(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.pntN)
	{
		uint i = id.x << 1;
		if (distance(2 * float2(Rand_Float(i), Rand_Float(i + 1)), f11) < 1) InterlockedAdd(uints, 0, 1);
	}
	
    }
  }
  float Rand_Float(uint i, float A, float B) { return lerp(A, B, Rand_Float(i)); }
  [numthreads(numthreads1, 1, 1)] void Calc_Average(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.pntN) { InterlockedAdd(ints, 0, roundi(Rand_Float(id.x, -1, 1) * g.f2i)); } } }
  uint Rand_UInt(uint i, uint A, uint B) { return flooru(Rand_Float(i, A, B)); }
  [numthreads(numthreads1, 1, 1)] void Rand_initState(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Rand_I) { uint i = id.x + g.Rand_I; if (i < g.Rand_N) Rand_rs[i] = index(Rand_rs[i], g.Rand_J, Rand_UInt(id.x, 0, uint_max)); } } }
  [numthreads(numthreads1, 1, 1)] void Integral_Avg(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.pntN) { InterlockedAdd(ints, 0, roundi((sqrt(1 - sqr(Rand_Float(id.x))) - PIo4) * g.f2i)); } } }
  #pragma kernel Integral_Avg
  #pragma kernel Count_Pnts_out_of_Circle
  #pragma kernel Count_Pnts_in_Circle
  #pragma kernel Calc_Average
  #pragma kernel Rand_initState
  #pragma kernel Rand_initSeed
  #pragma kernel Rand_grp_fill_1K
  #pragma kernel Rand_grp_init_1K
  #pragma kernel Rand_grp_init_1M