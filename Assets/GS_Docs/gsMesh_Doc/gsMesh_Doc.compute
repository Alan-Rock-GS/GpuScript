
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define Mesh_Lib_BDraw_Draw_Point	0
  #define Mesh_Lib_BDraw_Draw_Sphere	1
  #define Mesh_Lib_BDraw_Draw_Line	2
  #define Mesh_Lib_BDraw_Draw_Arrow	3
  #define Mesh_Lib_BDraw_Draw_Signal	4
  #define Mesh_Lib_BDraw_Draw_LineSegment	5
  #define Mesh_Lib_BDraw_Draw_Texture_2D	6
  #define Mesh_Lib_BDraw_Draw_Quad	7
  #define Mesh_Lib_BDraw_Draw_WebCam	8
  #define Mesh_Lib_BDraw_Draw_Mesh	9
  #define Mesh_Lib_BDraw_Draw_Number	10
  #define Mesh_Lib_BDraw_Draw_N	11
  #define Mesh_Lib_BDraw_TextAlignment_BottomLeft	0
  #define Mesh_Lib_BDraw_TextAlignment_CenterLeft	1
  #define Mesh_Lib_BDraw_TextAlignment_TopLeft	2
  #define Mesh_Lib_BDraw_TextAlignment_BottomCenter	3
  #define Mesh_Lib_BDraw_TextAlignment_CenterCenter	4
  #define Mesh_Lib_BDraw_TextAlignment_TopCenter	5
  #define Mesh_Lib_BDraw_TextAlignment_BottomRight	6
  #define Mesh_Lib_BDraw_TextAlignment_CenterRight	7
  #define Mesh_Lib_BDraw_TextAlignment_TopRight	8
  #define Mesh_Lib_BDraw_Text_QuadType_FrontOnly	0
  #define Mesh_Lib_BDraw_Text_QuadType_FrontBack	1
  #define Mesh_Lib_BDraw_Text_QuadType_Switch	2
  #define Mesh_Lib_BDraw_Text_QuadType_Arrow	3
  #define Mesh_Lib_BDraw_Text_QuadType_Billboard	4
  #define Mesh_Lib_PaletteType_Rainbow	0
  #define Mesh_Lib_PaletteType_GradientRainbow	1
  #define Mesh_Lib_PaletteType_GradientRainbow10	2
  #define Mesh_Lib_PaletteType_GradientRainbow20	3
  #define Mesh_Lib_PaletteType_Heat	4
  #define Mesh_Lib_PaletteType_GradientHeat	5
  #define Mesh_Lib_PaletteType_WhiteRainbow	6
  #define Mesh_Lib_PaletteType_invRainbow	7
  #define Mesh_Lib_PaletteType_Green	8
  #define Mesh_Lib_PaletteType_Gray	9
  #define Mesh_Lib_PaletteType_DarkGray	10
  #define Mesh_Lib_PaletteType_CT	11
  #define Views_Lib_ProjectionMode_Automatic	0
  #define Views_Lib_ProjectionMode_Perspective	1
  #define Views_Lib_ProjectionMode_Orthographic	2
  #define Mesh_Lib_BDraw_Draw_Text3D 12
  #define Mesh_Lib_BDraw_LF 10
  #define Mesh_Lib_BDraw_TB 9
  #define Mesh_Lib_BDraw_ZERO 48
  #define Mesh_Lib_BDraw_NINE 57
  #define Mesh_Lib_BDraw_PERIOD 46
  #define Mesh_Lib_BDraw_COMMA 44
  #define Mesh_Lib_BDraw_PLUS 43
  #define Mesh_Lib_BDraw_MINUS 45
  #define Mesh_Lib_BDraw_SPACE 32
  #define g gMesh_Doc[0]
  #pragma use_dxc
  struct GMesh_Doc
  {
    float sphere, cube, torus, box, roundBox, boxFrame, Mesh_Lib_BDraw_fontSize, Mesh_Lib_BDraw_boxThickness, Mesh_Lib_resolution, Mesh_Lib_boxLineThickness, Mesh_Lib_axesOpacity, Mesh_Lib_GridLineThickness, Mesh_Lib_opacity, Mesh_Lib_meshVal, Mesh_Lib_orthoSize, Mesh_Lib_maxDist, Mesh_Lib_minResolution;
    uint Mesh_Lib_BDraw_ABuff_IndexN, Mesh_Lib_BDraw_ABuff_BitN, Mesh_Lib_BDraw_ABuff_N, Mesh_Lib_BDraw_ABuff_BitN1, Mesh_Lib_BDraw_ABuff_BitN2, Mesh_Lib_BDraw_omitText, Mesh_Lib_BDraw_includeUnicode, Mesh_Lib_BDraw_fontInfoN, Mesh_Lib_BDraw_textN, Mesh_Lib_BDraw_textCharN, Mesh_Lib_BDraw_boxEdgeN, Mesh_Lib_drawGrid, Mesh_Lib_drawBox, Mesh_Lib_drawAxes, Mesh_Lib_customAxesRangeN, Mesh_Lib_zeroOrigin, Mesh_Lib_drawSurface, Mesh_Lib_GridDrawFront, Mesh_Lib_GridDrawBack, Mesh_Lib_show_slices, Mesh_Lib_paletteType, Mesh_Lib_reCalc, Mesh_Lib_buildText, Mesh_Lib_isOrtho, Mesh_Lib_showMeshVal, Mesh_Lib_showMeshRange, Mesh_Lib_showOutline, Mesh_Lib_showSurface, Mesh_Lib_showAxes, Mesh_Lib_showNormalizedAxes, Mesh_Lib_retrace;
    float4 Mesh_Lib_BDraw_boxColor;
    float2 Mesh_Lib_GridX, Mesh_Lib_GridY, Mesh_Lib_GridZ, Mesh_Lib_textSize, Mesh_Lib_paletteRange;
    float3 Mesh_Lib_axesRangeMin, Mesh_Lib_axesRangeMax, Mesh_Lib_axesRangeMin1, Mesh_Lib_axesRangeMax1, Mesh_Lib_axesRangeMin2, Mesh_Lib_axesRangeMax2, Mesh_Lib_axesColor, Mesh_Lib_slices, Mesh_Lib_sliceRotation;
    uint3 Mesh_Lib_nodeN;
    uint2 Mesh_Lib_viewSize;
    uint4 Mesh_Lib_viewRect;
    Matrix4x4 Mesh_Lib_camToWorld, Mesh_Lib_cameraInvProjection;
  };
  struct Mesh_Lib_BDraw_FontInfo { float2 uvBottomLeft, uvBottomRight, uvTopLeft, uvTopRight; int advance, bearing, minX, minY, maxX, maxY; };
  struct Mesh_Lib_BDraw_TextInfo { float3 p, right, up, p0, p1; float2 size, uvSize; float4 color, backColor; uint justification, textI, quadType, axis; float height; };
  struct Mesh_Lib_TRay { float3 origin, direction; float4 color; float dist; };
  struct Views_Lib_CamView { string viewName; float3 viewCenter; float viewDist; float2 viewTiltSpin; uint viewProjection; float view_sphere, view_cube, view_torus, view_box, view_roundBox, view_boxFrame, view_meshVal; };
  groupshared uint Mesh_Lib_BDraw_ABuff_grp[1024];
  groupshared uint Mesh_Lib_BDraw_ABuff_grp0[1024];
  RWStructuredBuffer<GMesh_Doc> gMesh_Doc;
  RWStructuredBuffer<uint> Mesh_Lib_BDraw_tab_delimeted_text, Mesh_Lib_BDraw_ABuff_Bits, Mesh_Lib_BDraw_ABuff_Sums, Mesh_Lib_BDraw_ABuff_Indexes, Mesh_Lib_BDraw_ABuff_Fills1, Mesh_Lib_BDraw_ABuff_Fills2;
  RWStructuredBuffer<Mesh_Lib_BDraw_TextInfo> Mesh_Lib_BDraw_textInfos;
  RWStructuredBuffer<Mesh_Lib_BDraw_FontInfo> Mesh_Lib_BDraw_fontInfos;
  RWStructuredBuffer<uint2> Mesh_Lib_depthColors;
  RWStructuredBuffer<Color32> Mesh_Lib_paletteBuffer;
  RWStructuredBuffer<float> Mesh_Lib_Vals;
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Mesh_Lib_BDraw_ABuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : Mesh_Lib_BDraw_ABuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = Mesh_Lib_BDraw_ABuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); Mesh_Lib_BDraw_ABuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Mesh_Lib_BDraw_ABuff_BitN) { uint i = id.x; if (i >= numthreads1) Mesh_Lib_BDraw_ABuff_Sums[i] += Mesh_Lib_BDraw_ABuff_Fills1[i / numthreads1 - 1]; if (i == g.Mesh_Lib_BDraw_ABuff_BitN - 1) g.Mesh_Lib_BDraw_ABuff_IndexN = Mesh_Lib_BDraw_ABuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Mesh_Lib_BDraw_ABuff_BitN1) { uint i = id.x; if (i >= numthreads1) Mesh_Lib_BDraw_ABuff_Fills1[i] += Mesh_Lib_BDraw_ABuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.Mesh_Lib_BDraw_ABuff_BitN2 - 1 ? Mesh_Lib_BDraw_ABuff_Fills1[j] : i < g.Mesh_Lib_BDraw_ABuff_BitN2 ? Mesh_Lib_BDraw_ABuff_Fills1[g.Mesh_Lib_BDraw_ABuff_BitN1 - 1] : 0, s;
    Mesh_Lib_BDraw_ABuff_grp0[grpI] = c; Mesh_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Mesh_Lib_BDraw_ABuff_BitN2) Mesh_Lib_BDraw_ABuff_grp[grpI] = Mesh_Lib_BDraw_ABuff_grp0[grpI] + Mesh_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Mesh_Lib_BDraw_ABuff_grp0[grpI] = Mesh_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Mesh_Lib_BDraw_ABuff_BitN2) Mesh_Lib_BDraw_ABuff_Fills2[i] = Mesh_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.Mesh_Lib_BDraw_ABuff_BitN1 - 1 ? Mesh_Lib_BDraw_ABuff_Sums[j] : i < g.Mesh_Lib_BDraw_ABuff_BitN1 ? Mesh_Lib_BDraw_ABuff_Sums[g.Mesh_Lib_BDraw_ABuff_BitN - 1] : 0, s;
    Mesh_Lib_BDraw_ABuff_grp0[grpI] = c; Mesh_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Mesh_Lib_BDraw_ABuff_BitN1) Mesh_Lib_BDraw_ABuff_grp[grpI] = Mesh_Lib_BDraw_ABuff_grp0[grpI] + Mesh_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Mesh_Lib_BDraw_ABuff_grp0[grpI] = Mesh_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Mesh_Lib_BDraw_ABuff_BitN1) Mesh_Lib_BDraw_ABuff_Fills1[i] = Mesh_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.Mesh_Lib_BDraw_ABuff_BitN ? countbits(Mesh_Lib_BDraw_ABuff_Bits[i]) : 0, s;
    Mesh_Lib_BDraw_ABuff_grp0[grpI] = c; Mesh_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Mesh_Lib_BDraw_ABuff_BitN) Mesh_Lib_BDraw_ABuff_grp[grpI] = Mesh_Lib_BDraw_ABuff_grp0[grpI] + Mesh_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Mesh_Lib_BDraw_ABuff_grp0[grpI] = Mesh_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Mesh_Lib_BDraw_ABuff_BitN) Mesh_Lib_BDraw_ABuff_Sums[i] = Mesh_Lib_BDraw_ABuff_grp[grpI];
  }
  float sdTorus(float3 p, float R, float r) { return (length(float2(length(p.xz) - R, p.y)) - r) / 0.606f; }
  float sdCube(float3 p) { return cmax(abs(p)) * 2; }
  float sdBox(float3 p, float3 b) { float3 q = abs(p) - b; return length(max(q, f000)) + min(cmax(q), 0); }
  float sdRoundBox(float3 p, float3 b, float r) { float3 q = abs(p) - b + r; return length(max(q, f000)) + min(cmax(q), 0) - r; }
  float sdBoxFrame(float3 p, float3 b, float e)
  {
    p = abs(p) - b;
    float3 q = abs(p + e) - e, pqq = float3(p.x, q.yz), qpq = float3(q.x, p.y, q.z), qqp = float3(q.xy, p.z);
    return cmin(float3(length(max(pqq, f000)) + min(cmax(pqq), 0), length(max(qpq, f000)) + min(cmax(qpq), 0), length(max(qqp, f000)) + min(cmax(qqp), 0)));
  }
  Mesh_Lib_BDraw_TextInfo Mesh_Lib_BDraw_textInfo(uint i) { return Mesh_Lib_BDraw_textInfos[i]; }
  void Mesh_Lib_BDraw_textInfo(uint i, Mesh_Lib_BDraw_TextInfo t) { Mesh_Lib_BDraw_textInfos[i] = t; }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_setDefaultTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.Mesh_Lib_BDraw_textN)
    {
      uint i = id.x;
      if (i > 0)
      {
        Mesh_Lib_BDraw_TextInfo t = Mesh_Lib_BDraw_textInfo(0), ti = Mesh_Lib_BDraw_textInfo(i);
        ti.color = t.color; ti.backColor = t.backColor; ti.p = t.p; ti.p0 = t.p0; ti.p1 = t.p1; ti.height = t.height;
        ti.quadType = (uint)t.quadType; ti.axis = t.axis; ti.right = t.right; ti.up = t.up; ti.justification = t.justification;
        Mesh_Lib_BDraw_textInfo(i, ti);
      }
    }
    }
  }
  uint2 Mesh_Lib_BDraw_Get_text_indexes(uint textI) { return uint2(textI == 0 ? 0 : Mesh_Lib_BDraw_ABuff_Indexes[textI - 1] + 1, textI < g.Mesh_Lib_BDraw_ABuff_IndexN ? Mesh_Lib_BDraw_ABuff_Indexes[textI] : g.Mesh_Lib_BDraw_textCharN); }
  uint Mesh_Lib_BDraw_Byte(uint i) { return TextByte(Mesh_Lib_BDraw_tab_delimeted_text, i); }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_getTextInfo(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.Mesh_Lib_BDraw_textN)
    {
      uint i = id.x;
      Mesh_Lib_BDraw_TextInfo ti = Mesh_Lib_BDraw_textInfo(i);
      ti.textI = i;
      ti.uvSize = f01;
      uint2 textIs = Mesh_Lib_BDraw_Get_text_indexes(i);
      float2 t = ti.uvSize;
      for (uint j = textIs.x; j < textIs.y; j++) { uint byteI = Mesh_Lib_BDraw_Byte(j); if (byteI >= 32) { byteI -= 32; t.x += Mesh_Lib_BDraw_fontInfos[byteI].advance; } }
      t.x /= g.Mesh_Lib_BDraw_fontSize;
      ti.uvSize = t;
      Mesh_Lib_BDraw_textInfo(i, ti);
    }
    }
  }
  float3 Mesh_Lib_gridMin() { return float3(g.Mesh_Lib_GridX.x, g.Mesh_Lib_GridY.x, g.Mesh_Lib_GridZ.x); }
  float3 Mesh_Lib_NodeLocation3(uint3 id) { return id * g.Mesh_Lib_resolution + Mesh_Lib_gridMin(); }
  float sdSphere(float3 p, float s) { return (length(p) - s) * 0.866f; }
  float sdSphere(float3 p) { return sdSphere(p, 0); }
  void Mesh_Lib_Val(uint i, float v) { Mesh_Lib_Vals[i] = v; }
  uint Mesh_Lib_NodeI(uint3 id) { return id_to_i(id, g.Mesh_Lib_nodeN); }
  bool Mesh_Lib_BDraw_ABuff_IsBitOn(uint i) { uint c = Mesh_Lib_BDraw_Byte(i); return c == Mesh_Lib_BDraw_TB || c == Mesh_Lib_BDraw_LF; }
  uint Mesh_Lib_BDraw_ABuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.Mesh_Lib_BDraw_ABuff_N && Mesh_Lib_BDraw_ABuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.Mesh_Lib_BDraw_ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Mesh_Lib_BDraw_ABuff_Assign_Bits(k + j, j, bits); Mesh_Lib_BDraw_ABuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    Mesh_Lib_BDraw_ABuff_grp0[grpI] = c; Mesh_Lib_BDraw_ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.Mesh_Lib_BDraw_ABuff_BitN) Mesh_Lib_BDraw_ABuff_grp[grpI] = Mesh_Lib_BDraw_ABuff_grp0[grpI] + Mesh_Lib_BDraw_ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      Mesh_Lib_BDraw_ABuff_grp0[grpI] = Mesh_Lib_BDraw_ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.Mesh_Lib_BDraw_ABuff_BitN) Mesh_Lib_BDraw_ABuff_Sums[i] = Mesh_Lib_BDraw_ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void Mesh_Lib_BDraw_ABuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.Mesh_Lib_BDraw_ABuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.Mesh_Lib_BDraw_ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Mesh_Lib_BDraw_ABuff_Assign_Bits(k + j, j, bits); Mesh_Lib_BDraw_ABuff_Bits[i] = bits; } } } }
  Mesh_Lib_TRay Mesh_Lib_CreateRayHit() { Mesh_Lib_TRay hit; hit.origin = f000; hit.dist = fPosInf; hit.direction = f000; hit.color = f0000; return hit; }
  float3 Mesh_Lib_gridMax() { return float3(g.Mesh_Lib_GridX.y, g.Mesh_Lib_GridY.y, g.Mesh_Lib_GridZ.y); }
  void Mesh_Lib_Assign(inout Mesh_Lib_TRay hit, float3 position, float3 normal, float4 color, float dist) { hit.origin = position; hit.direction = normal; hit.color = color; hit.dist = dist; }
  void Mesh_Lib_pixDepthColor(uint i, float d, float4 c) { Mesh_Lib_depthColors[i] = uint2((uint)(d / g.Mesh_Lib_maxDist * uint_max), c32_u(f4_c32(c))); }
  void Mesh_Lib_pixDepthColor(uint2 id, float d, float4 c) { Mesh_Lib_pixDepthColor(id_to_i(id, g.Mesh_Lib_viewSize), d, c); }
  float Mesh_Lib_Val(uint i) { return Mesh_Lib_Vals[i]; }
  Mesh_Lib_TRay Mesh_Lib_CreateShaderCameraRay(float2 _uv)
  {
    Mesh_Lib_TRay ray;
    ray.origin = mul(g.Mesh_Lib_camToWorld, g.Mesh_Lib_isOrtho ? float4(g.Mesh_Lib_orthoSize * _uv / float2(aspect(g.Mesh_Lib_viewSize), 1), 0, 1) : f0001).xyz;
    ray.direction = normalize(mul(g.Mesh_Lib_camToWorld, float4(mul(g.Mesh_Lib_cameraInvProjection, float4(_uv, 0, 1)).xyz, 0)).xyz);
    ray.color = f0000;
    ray.dist = 0;
    return ray;
  }
  Mesh_Lib_TRay Mesh_Lib_CreateRay(float3 origin, float3 direction) { Mesh_Lib_TRay ray; ray.origin = origin; ray.direction = direction; ray.color = f0000; ray.dist = 0; return ray; }
  Mesh_Lib_TRay Mesh_Lib_CreateCameraRay(float2 _uv) { Mesh_Lib_TRay ray = Mesh_Lib_CreateShaderCameraRay(_uv); return Mesh_Lib_CreateRay(ray.origin, ray.direction); }
  float4 Mesh_Lib_DrawSliceColor(float4 color, float3 q) { return color; }
  float3 Mesh_Lib_GetCorner_q(float3 p) { return clamp((p - Mesh_Lib_gridMin()) / g.Mesh_Lib_resolution, f000, (int3)g.Mesh_Lib_nodeN - f111); }
  uint3 Mesh_Lib_GetCorner_I(float3 q) { return (uint3)q; }
  float Mesh_Lib_Interpolate_Val(float3 fq, uint4 c0, uint4 c1) { return Interpolate(Mesh_Lib_Val(c0.x), Mesh_Lib_Val(c0.y), Mesh_Lib_Val(c0.z), Mesh_Lib_Val(c0.w), Mesh_Lib_Val(c1.x), Mesh_Lib_Val(c1.y), Mesh_Lib_Val(c1.z), Mesh_Lib_Val(c1.w), fq); }
  float4 Mesh_Lib_paletteBufferColor(float v) { return c32_f4(Mesh_Lib_paletteBuffer[roundu(clamp(v * 255, 0, 255))]); }
  float4 Mesh_Lib_GetPointColor(float3 p, float val) { return Mesh_Lib_paletteBufferColor(lerp1(g.Mesh_Lib_paletteRange, val)); }
  float4 Mesh_Lib_GetNormalColor(Mesh_Lib_TRay ray, float3 normal, float val, float3 p)
  {
    float3 lightDirection = _WorldSpaceLightPos0.xyz;
    float3 h = (lightDirection - ray.direction) / 2;
    float v = 1, gloss = 0.5f, s = sqr(abs(dot(normal, h))) * gloss, NdotL = abs(dot(normal, lightDirection));
    if (g.Mesh_Lib_GridLineThickness > 0)
    {
      float w = 1 / max(0.00001f, g.Mesh_Lib_GridLineThickness);
      p /= g.Mesh_Lib_resolution;
      float3 blend = normalize(max((abs(normal) - 0.2f) * 7, 0.0f));
      v = csum(blend * saturate(0.5f * float3(product((1 - abs(1 - 2 * frac(p.yz))) * w), product((1 - abs(1 - 2 * frac(p.xz))) * w), product((1 - abs(1 - 2 * frac(p.xy))) * w))));
    }
    return float4(saturate((Mesh_Lib_GetPointColor(p, val).xyz * (NdotL + 0.5f) + s) * v), g.Mesh_Lib_opacity);
  }
  uint3 Mesh_Lib_nodeN1() { return max(g.Mesh_Lib_nodeN, u111) - u111; }
  uint Mesh_Lib_GridToIndex(int3 _I) { return id_to_i(clamp(_I, u000, Mesh_Lib_nodeN1()), g.Mesh_Lib_nodeN); }
  uint4 Mesh_Lib_GetFaceI(uint3 _I, int3 x, int3 y, int3 z, int3 w) { return new uint4(Mesh_Lib_GridToIndex((int3)_I + x), Mesh_Lib_GridToIndex((int3)_I + y), Mesh_Lib_GridToIndex((int3)_I + z), Mesh_Lib_GridToIndex((int3)_I + w)); }
  uint4 Mesh_Lib_GetFaceI(uint3 _I, int3 d) { return Mesh_Lib_GetFaceI(_I, i000 + d, i001 + d, i010 + d, i011 + d); }
  float Mesh_Lib_Val(float3 p) { float3 q = Mesh_Lib_GetCorner_q(p); uint3 _I = Mesh_Lib_GetCorner_I(q); return Mesh_Lib_Interpolate_Val(frac(q), Mesh_Lib_GetFaceI(_I, i000), Mesh_Lib_GetFaceI(_I, i100)); }
  float3 Mesh_Lib_Val(float3 p, float d) { return float3(Mesh_Lib_Val(p + f100 * d), Mesh_Lib_Val(p + f010 * d), Mesh_Lib_Val(p + f001 * d)); }
  void Mesh_Lib_Val3(uint3 id, float v) { Mesh_Lib_Val(Mesh_Lib_NodeI(id), v); }
  float Mesh_Lib_setDepth(float depth, Mesh_Lib_TRay ray, inout float3 p, inout float val) { p = depth * ray.direction + ray.origin; val = Mesh_Lib_Val(p); return depth; }
  void Mesh_Lib_DrawSlice(float3 axis, Mesh_Lib_TRay ray, inout Mesh_Lib_TRay hit, inout float3 p, inout float val, inout float depth, inout bool found, inout float4 color, float3 normal)
  {
    float depth_slice;
    float3 axis2 = rotateZYXDeg(axis, g.Mesh_Lib_sliceRotation), q = PlaneLineIntersectionPoint(axis2, g.Mesh_Lib_slices, ray.origin, ray.direction);
    if (q.x != fNegInf && IsNotOutside(q, Mesh_Lib_gridMin(), Mesh_Lib_gridMax()))
    {
      depth_slice = Mesh_Lib_setDepth(max(distance(q, ray.origin), 0.018f), ray, p, val);
      if (depth_slice < depth) { found = true; depth = depth_slice; color = Mesh_Lib_DrawSliceColor(Mesh_Lib_GetNormalColor(ray, axis2, val, p), q); Mesh_Lib_Assign(hit, p, normal, color, depth); }
    }
  }
  float3 Mesh_Lib_Normal(float3 p)
  {
    float r = g.Mesh_Lib_resolution * 0.5f, margin = r * 0.02f;
    float3 normal = p <= Mesh_Lib_gridMin() + margin;
    if (all(normal == f000)) normal = p >= Mesh_Lib_gridMax() - margin;
    if (all(normal == f000)) normal = normalize(Mesh_Lib_Val(p, r) - Mesh_Lib_Val(p, -r));
    return normal;
  }
  float4 Mesh_Lib_GetColor(Mesh_Lib_TRay ray, inout float3 normal, float val, float3 p) { return Mesh_Lib_GetNormalColor(ray, normal = Mesh_Lib_Normal(p), val, p); }
  void Mesh_Lib_TraceRay(uint3 id)
  {
    Mesh_Lib_TRay ray = Mesh_Lib_CreateCameraRay(2.0f * id.xy / g.Mesh_Lib_viewSize - 1), hit = Mesh_Lib_CreateRayHit();
    float3 mn = Mesh_Lib_gridMin(), mx = max(mn + 0.001f, Mesh_Lib_gridMax());
    float2 dst = HitGridBox(mn, mx, ray.origin, ray.direction);
    bool hitOutside = HitOutsideGrid(dst), hitInside = HitInsideGrid(dst);
    if (hitOutside || hitInside)
    {
      float3 p = f000, normal = f100;
      float val = 0, depth = Mesh_Lib_setDepth(max(dst.x, 0.018f), ray, p, val), depth2 = dst.y, step = g.Mesh_Lib_resolution, d0, d2;
      bool found = false;
      float4 color = f0000;
      if (g.Mesh_Lib_GridDrawFront && hitOutside) { color = Mesh_Lib_GetColor(ray, normal, val, p); Mesh_Lib_Assign(hit, p, normal, color, depth); }
      else
      {
        float val0 = val, v = g.Mesh_Lib_meshVal;
        for (uint i = 0, n = csum(g.Mesh_Lib_nodeN); i < n && !found; i++)
        {
          if (val0 > v && val <= v)
          {
            val0 = val;
            for (d0 = max(0, depth - step), d2 = depth; d2 - d0 > step / 100;) { depth = Mesh_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val > v) d0 = depth; else d2 = depth; }
            color = Mesh_Lib_GetColor(ray, normal, val, p);
            Mesh_Lib_Assign(hit, p, normal, color, depth); found = true;
          }
          else if (val0 < v && val >= v)
          {
            val0 = val;
            for (d0 = depth - step, d2 = depth; d2 - d0 > step / 100;) { depth = Mesh_Lib_setDepth((d0 + d2) / 2, ray, p, val); if (val < v) d0 = depth; else d2 = depth; }
            if (depth + step < depth2)
            {
              color = Mesh_Lib_GetColor(ray, normal, val, p);
              Mesh_Lib_Assign(hit, p, normal, color, depth); found = true;
            }
          }
          else val0 = val;
          if (depth + step > depth2) { depth = Mesh_Lib_setDepth(depth2, ray, p, val); break; }
          depth = Mesh_Lib_setDepth(depth + step, ray, p, val);
        }
        if (g.Mesh_Lib_show_slices) for (uint i = 0; i < 3; i++) Mesh_Lib_DrawSlice(index(f000, i, 1.0f), ray, hit, p, val, depth, found, color, normal);
        if (g.Mesh_Lib_GridDrawBack)
        {
          color = Mesh_Lib_GetColor(ray, normal, val, p);
          if (!found) Mesh_Lib_Assign(hit, p, normal, color, depth);
          else hit.color.xyz = g.Mesh_Lib_opacity * hit.color.xyz + (1 - g.Mesh_Lib_opacity) * color.xyz;
        }
      }
    }
    Mesh_Lib_pixDepthColor(id.xy, hit.dist, hit.color);
  }
  [numthreads(numthreads2, numthreads2, 1)] void Mesh_Lib_Grid_Simple_TraceRay(uint3 id : SV_DispatchThreadID) { unchecked { if (all(id.xy < g.Mesh_Lib_viewSize)) { Mesh_Lib_TraceRay(id); } } }
  [numthreads(numthreads3, numthreads3, numthreads3)] void Mesh_Lib_Grid_Calc_Vals(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (all(id < g.Mesh_Lib_nodeN))
    {
      float3 p = Mesh_Lib_NodeLocation3(id);
      float torus_v = sdTorus(p, 0.33f, 0), sphere_v = sdSphere(p), cube_v = sdCube(p), box_v = 0.3f + sdBox(p, f111 / 3),
        roundBox_v = 0.3f + sdRoundBox(p, f111 / 3, 0.05f), boxFrame_v = 0.3f + sdBoxFrame(p, f111 / 3, 0.05f),
        d = max(0.001f, g.torus + g.sphere + g.cube + g.box + g.roundBox + g.boxFrame),
        v = (g.torus * torus_v + g.sphere * sphere_v + g.cube * cube_v + g.box * box_v + g.roundBox * roundBox_v + g.boxFrame * boxFrame_v) / d;
      Mesh_Lib_Val3(id, v);
    }
    }
  }
  #pragma kernel Mesh_Lib_Grid_Calc_Vals
  #pragma kernel Mesh_Lib_BDraw_ABuff_GetIndexes
  #pragma kernel Mesh_Lib_BDraw_ABuff_IncSums
  #pragma kernel Mesh_Lib_BDraw_ABuff_IncFills1
  #pragma kernel Mesh_Lib_BDraw_ABuff_GetFills2
  #pragma kernel Mesh_Lib_BDraw_ABuff_GetFills1
  #pragma kernel Mesh_Lib_BDraw_ABuff_Get_Bits_Sums
  #pragma kernel Mesh_Lib_BDraw_ABuff_GetSums
  #pragma kernel Mesh_Lib_BDraw_ABuff_Get_Bits
  #pragma kernel Mesh_Lib_BDraw_setDefaultTextInfo
  #pragma kernel Mesh_Lib_BDraw_getTextInfo
  #pragma kernel Mesh_Lib_Grid_Simple_TraceRay