
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define RunOn_Gpu	0
  #define RunOn_Cpu	1
  #define UInts_maxAbs	0
  #define UInts_maxElementRow	1
  #define UInts_maxElementVal	2
  #define UInts_N	3
  #define g gMatrix_Doc[0]
  #pragma use_dxc
  struct GMatrix_Doc
  {
    uint MatN, MatRowN, runOn, useInterlocked, debug, repeatN, Matrix_IntsN, Matrix_col_m, Matrix_row_n, Matrix_XN, Matrix_AI0, Matrix_XsI0, Matrix_BsI0, ARand_N, ARand_I, ARand_J, N, focusedColumn, focusedRow;
    uint4 ARand_seed4, LowerTriangleBounds;
    float maxAbs, rowMultiplier, scale;
  };
  groupshared uint4 ARand_grp[1024];
  groupshared float grp_f_4096[4096];
  RWStructuredBuffer<GMatrix_Doc> gMatrix_Doc;
  RWStructuredBuffer<uint4> ARand_rs;
  RWStructuredBuffer<int> Mat_A, Mat_x, Mat_b, Matrix_Ints, ia, sums;
  RWStructuredBuffer<float> Matrix_A_matrix, Matrix_Xs, Matrix_Bs, a, X, Y, b, row_maxAbs;
  RWStructuredBuffer<uint> P, uints;
  [numthreads(numthreads1, 1, 1)] void InitP(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.N) { uint i = id.x; P[i] = i; }  } }
  [numthreads(numthreads1, 1, 1)] void A_times_B_to_X(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N)
	{
		uint i = id.x;
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Zero_B(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N) { uint i = id.x; b[i] = 0; }
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void ARand_initSeed(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ARand_N) { uint i = id.x; ARand_rs[i] = i == 0 ? g.ARand_seed4 : u0000; } } }
  [numthreads(numthreads1, 1, 1)] void Divide_by_maxAbs(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.N * g.N) { } } }
  [numthreads(numthreads1, 1, 1)] void MakeLowerTriangleZeroAndFillWithL(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N) { }
     
    }
  }
  [numthreads(numthreads1, 1, 1)] void ARand_grp_fill_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void ARand_grp_init_1K(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads1, 1, 1)] void ARand_grp_init_1M(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex) { null; }
   
  [numthreads(numthreads3, numthreads3, numthreads3)] void Matrix_Calc_bs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.z < g.Matrix_XN && id.y < g.Matrix_row_n && id.x < g.Matrix_col_m) { }
     
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Matrix_Zero_bs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.Matrix_XN && id.x < g.Matrix_col_m) { }
     
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Matrix_Get_Bs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.Matrix_XN && id.x < g.Matrix_col_m) { }
     
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Matrix_Set_Xs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.Matrix_XN && id.x < g.Matrix_col_m) { }
     
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Matrix_Set_A_matrix(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.Matrix_row_n && id.x < g.Matrix_col_m) { }
     
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Matrix_Get_A_matrix(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.Matrix_row_n && id.x < g.Matrix_col_m) { }
     
    }
  }
  float B(uint i) { return b[P[i]]; }
	
  [numthreads(numthreads1, 1, 1)] void Interlock_SolveYfromLYequalB(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		float sum = sums[0] / 1000000.0f;
		Y[g.focusedRow] = B(g.focusedRow) - sum;
	}
	
    }
  }
  uint Mat_Index(uint matI, uint i) { return id_to_i(matI, i, g.MatN, g.MatRowN); }
  int Matx(uint matI, uint i) { return Mat_x[Mat_Index(matI, i)]; }
  void Matx(uint matI, uint i, int V) { Mat_x[Mat_Index(matI, i)] = V; }
  [numthreads(numthreads2, numthreads2, 1)] void Init_Mat_b(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.MatRowN && id.x < g.MatN) { uint matI = id.x, i = id.y; Matx(matI, i, 0); }
	
    }
  }
  [numthreads(numthreads2, numthreads2, 1)] void Init_Mat_x(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.MatRowN && id.x < g.MatN) { uint matI = id.x, i = id.y; Matx(matI, i, 1); }
	
    }
  }
  uint Ai(uint i, uint j) { return id_to_i(uint2(i, P[j]), g.N); }
	
  float A(uint i, uint j) { return a[Ai(i, j)]; }
	
  [numthreads(numthreads1, 1, 1)] void Find_row_maxAbs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N) { uint i = id.x, n = g.N; float v = fNegInf; for (uint j = g.focusedColumn; j < n; j++) v = max(v, abs(A(i, j))); row_maxAbs[i] = v; }
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Find_maxElementRow(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		float maxV = fNegInf;
		uint maxRow = 0;
		for (uint i = g.focusedColumn; i < g.N; i++) { float v = abs(A(g.focusedColumn, i)); if (maxV < v) { maxV = v; maxRow = i; } }
		uints[UInts_maxElementRow] = maxRow;
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Interlock_Find_maxElementRow(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N) { uint i = id.x; if (i >= g.focusedColumn && uints[UInts_maxElementVal] == roundu(abs(A(g.focusedColumn, i)) * 1000000)) uints[UInts_maxElementRow] = i; }
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Interlock_Find_maxElementVal(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N) { uint i = id.x; if (i >= g.focusedColumn) InterlockedMax(uints, UInts_maxElementVal, roundu(abs(A(g.focusedColumn, i)) * 1000000)); }
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Find_rowMultiplier(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		g.rowMultiplier = A(g.focusedColumn, g.focusedRow) / A(g.focusedColumn, g.focusedColumn);
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Interlock_SolveXfromUXequalY(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		float Arr = A(g.focusedRow, g.focusedRow);
		if (Arr == 0) X[g.focusedRow] = 0;
		else { float sum = sums[0] / 1000000.0f; X[g.focusedRow] = (Y[g.focusedRow] - sum) / Arr; }
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Interlock_Sum_SolveXfromUXequalY(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N)
	{
		uint column = id.x;
		if (column > g.focusedRow)
			InterlockedAdd(sums, 0, roundi(X[column] * A(column, g.focusedRow) * 1000000));
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void Interlock_Sum_SolveYfromLYequalB(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N)
	{
		uint column = id.x;
		if (column < g.focusedRow)
			InterlockedAdd(sums, 0, roundi(Y[column] * A(column, g.focusedRow) * 1000000));
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void SolveXfromUXequalY(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		float Arr = A(g.focusedRow, g.focusedRow);
		if (Arr == 0) X[g.focusedRow] = 0;
		else
		{
			float sum = 0;
			for (uint column = g.focusedRow + 1; column < g.N; column++) sum += X[column] * A(column, g.focusedRow);
			X[g.focusedRow] = (Y[g.focusedRow] - sum) / Arr;
		}
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void SolveYfromLYequalB(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		float sum = 0;
		for (uint column = 0; column < g.focusedRow; column++) sum += Y[column] * A(column, g.focusedRow);
		Y[g.focusedRow] = B(g.focusedRow) - sum;
	}
	
    }
  }
  void A(uint i, uint j, float v) { a[Ai(i, j)] = v; }
	
  [numthreads(numthreads1, 1, 1)] void Set_rowMultiplier(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1)
	{
		A(g.focusedColumn, g.focusedRow, g.rowMultiplier); 
	}
	
    }
  }
  [numthreads(numthreads1, 1, 1)] void MakeElementZeroAndFillWithLowerMatrixElement(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < g.N)
	{                        
		uint i = id.x;         
		if (i >= g.focusedColumn)
			A(i, g.focusedRow, A(i, g.focusedRow) - g.rowMultiplier * A(i, g.focusedColumn));
	}
	
    }
  }
  uint MatA_Index(uint matI, uint i, uint colI) { return id_to_i(matI, i, colI, g.MatN, g.MatRowN); }
  int MatA(uint matI, uint i, uint j) { return Mat_A[MatA_Index(matI, i, j)]; }
  [numthreads(numthreads3, numthreads3, numthreads3)] void Multiply_Mat_A_x(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.z < g.MatRowN && id.y < g.MatRowN && id.x < g.MatN)
	{
		uint matI = id.x, i = id.y, j = id.z;
		InterlockedAdd(Mat_b, Mat_Index(matI, j), MatA(matI, i, j) * Matx(matI, j));
	}
	
    }
  }
  void MatA(uint matI, uint i, uint j, int V) { Mat_A[MatA_Index(matI, i, j)] = V; }
  [numthreads(numthreads3, numthreads3, numthreads3)] void Init_Mat_A(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.z < g.MatRowN && id.y < g.MatRowN && id.x < g.MatN) { uint matI = id.x, i = id.y, j = id.z; MatA(matI, i, j, 1); }
	
    }
  }
  uint ARand_UV(uint4 r) { return cxor(r); }
  float ARand_FV(uint4 r) { return 2.3283064365387e-10f * ARand_UV(r); }
  uint ARand_u(uint a, int b, int c, int d, uint e) { return ((a & e) << d) ^ (((a << b) ^ a) >> c); }
  uint4 ARand_U4(uint4 r) { return uint4(ARand_u(r.x, 13, 19, 12, 4294967294u), ARand_u(r.y, 2, 25, 4, 4294967288u), ARand_u(r.z, 3, 11, 17, 4294967280u), r.w * 1664525 + 1013904223u); }
  uint4 ARand_rUInt4(uint i) { return ARand_U4(ARand_rs[i]); }
  uint4 ARand_UInt4(uint i) { return ARand_rs[i] = ARand_rUInt4(i); }
  float ARand_Float(uint i) { return ARand_FV(ARand_UInt4(i)); }
  float ARand_Float(uint i, float A, float B) { return lerp(A, B, ARand_Float(i)); }
  uint ARand_UInt(uint i, uint A, uint B) { return flooru(ARand_Float(i, A, B)); }
  [numthreads(numthreads1, 1, 1)] void ARand_initState(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ARand_I) { uint i = id.x + g.ARand_I; if (i < g.ARand_N) ARand_rs[i] = index(ARand_rs[i], g.ARand_J, ARand_UInt(id.x, 0, uint_max)); } } }
  [numthreads(numthreads1, 1, 1)] void Find_maxAbs(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.x < 1) { float v = fNegInf; for (uint i = g.focusedColumn; i < g.N; i++) v = max(v, row_maxAbs[i]); g.maxAbs = v; }
	
    }
  }
  #pragma kernel InitP
  #pragma kernel Find_maxAbs
  #pragma kernel Find_row_maxAbs
  #pragma kernel Find_maxElementRow
  #pragma kernel Interlock_Find_maxElementRow
  #pragma kernel Interlock_Find_maxElementVal
  #pragma kernel Set_rowMultiplier
  #pragma kernel MakeElementZeroAndFillWithLowerMatrixElement
  #pragma kernel Find_rowMultiplier
  #pragma kernel Interlock_SolveXfromUXequalY
  #pragma kernel Interlock_Sum_SolveXfromUXequalY
  #pragma kernel Interlock_SolveYfromLYequalB
  #pragma kernel Interlock_Sum_SolveYfromLYequalB
  #pragma kernel SolveXfromUXequalY
  #pragma kernel SolveYfromLYequalB
  #pragma kernel A_times_B_to_X
  #pragma kernel Zero_B
  #pragma kernel Multiply_Mat_A_x
  #pragma kernel Init_Mat_b
  #pragma kernel Init_Mat_x
  #pragma kernel Init_Mat_A
  #pragma kernel ARand_initState
  #pragma kernel ARand_initSeed
  #pragma kernel Divide_by_maxAbs
  #pragma kernel MakeLowerTriangleZeroAndFillWithL
  #pragma kernel ARand_grp_fill_1K
  #pragma kernel ARand_grp_init_1K
  #pragma kernel ARand_grp_init_1M
  #pragma kernel Matrix_Calc_bs
  #pragma kernel Matrix_Zero_bs
  #pragma kernel Matrix_Get_Bs
  #pragma kernel Matrix_Set_Xs
  #pragma kernel Matrix_Set_A_matrix
  #pragma kernel Matrix_Get_A_matrix