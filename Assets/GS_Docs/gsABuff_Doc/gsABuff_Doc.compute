
  #include "UnityCG.cginc"
  #include "Lighting.cginc"
  #include "../../GS/GS_Compute.cginc"
  #define ProcessorType_CPU	0
  #define ProcessorType_GPU	1
  #define g gABuff_Doc[0]
  #pragma use_dxc
  struct GABuff_Doc
  {
    uint maxPrimeN, ABuffTest_N, ABuffTest_Runtime_N, processorType, runOnGpu, ABuffTest_IndexN, IndexN, BitN, N, BitRowN, BitColN, primeFactor, pN, piN, pjN, ABuff_IndexN, ABuff_BitN, ABuff_N, ABuff_BitN1, ABuff_BitN2;
    float ABuffTest_Time_us;
  };
  groupshared uint ABuff_grp[1024];
  groupshared uint ABuff_grp0[1024];
  RWStructuredBuffer<GABuff_Doc> gABuff_Doc;
  RWStructuredBuffer<uint> Bits, Sums, Indexes, ColN_Sums, primes, ABuff_Bits, ABuff_Sums, ABuff_Indexes, ABuff_Fills1, ABuff_Fills2;
  [numthreads(numthreads1, 1, 1)] void CalcIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BitN) { uint i = id.x, j, sum = i == 0 ? 0 : Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = Bits[i]; b > 0; k++) { j = (uint)findLSB(b); Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads2, numthreads2, 1)] void CalcSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.BitColN * (g.BitColN - 1) / 2 && id.x < g.BitRowN) { uint i = id.x, k = id.y, j = i * g.BitColN; uint2 u = upperTriangularIndex(k, g.BitColN) + u11 * j; if (u.x < g.BitN && u.y < g.BitN) InterlockedAdd(Sums, u.y, countbits(Bits[u.x])); } } }
  [numthreads(numthreads1, 1, 1)] void InitSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BitN) { Sums[id.x] = countbits(Bits[id.x]); } } }
  [numthreads(numthreads1, 1, 1)] void Init_Bits_32(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BitN) { Bits[id.x] = 0; } } }
  [numthreads(numthreads2, numthreads2, 1)] void calc_primes(uint3 id : SV_DispatchThreadID)
  {
    unchecked
    {
      if (id.y < g.pjN / 2 && id.x < g.piN / 2)
    {
      uint i = id.x, j = id.y + 2, i2 = i * 2 + 1, j2 = id.y * 2 + 3;
      if (i2 > j2 && (i2 % j2) == 0) InterlockedAnd(ABuff_Bits, i / 32, ~(1u << (int)(i % 32)));
    }
    }
  }
  [numthreads(numthreads1, 1, 1)] void init_Primes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { ABuff_Bits[id.x] = uint_max; } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_Get_Existing_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x;
    if (i < g.ABuff_BitN)
    {
      uint s, bits = ABuff_Bits[i], c = countbits(bits);
      ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
      for (s = 1; s < numthreads1; s *= 2)
      {
        if (grpI >= s && i < g.ABuff_BitN) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
        ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
      }
      if (i < g.ABuff_BitN) ABuff_Sums[i] = ABuff_grp[grpI];
    }
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetIndexes(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x, j, sum = i == 0 ? 0 : ABuff_Sums[i - 1], b, i32 = i << 5, k; for (k = 0, b = ABuff_Bits[i]; b > 0; k++) { j = (uint)findLSB(b); ABuff_Indexes[sum + k] = i32 + j; b = SetBitu(b, j, 0); } } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_IncSums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x; if (i >= numthreads1) ABuff_Sums[i] += ABuff_Fills1[i / numthreads1 - 1]; if (i == g.ABuff_BitN - 1) g.ABuff_IndexN = ABuff_Sums[i]; } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_IncFills1(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN1) { uint i = id.x; if (i >= numthreads1) ABuff_Fills1[i] += ABuff_Fills2[i / numthreads1 - 1]; } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetFills2(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.ABuff_BitN2 - 1 ? ABuff_Fills1[j] : i < g.ABuff_BitN2 ? ABuff_Fills1[g.ABuff_BitN1 - 1] : 0, s;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN2) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN2) ABuff_Fills2[i] = ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetFills1(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, k = i + 1, j = k * numthreads1 - 1, c = i < g.ABuff_BitN1 - 1 ? ABuff_Sums[j] : i < g.ABuff_BitN1 ? ABuff_Sums[g.ABuff_BitN - 1] : 0, s;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN1) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN1) ABuff_Fills1[i] = ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_Get_Bits_Sums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c = i < g.ABuff_BitN ? countbits(ABuff_Bits[i]) : 0, s;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN) ABuff_Sums[i] = ABuff_grp[grpI];
  }
  uint SumI(uint rowI, uint colJ) { return rowI * g.BitColN + colJ; }
  [numthreads(numthreads1, 1, 1)] void Calc_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BitRowN * (g.BitRowN - 1) / 2) { uint2 u = upperTriangularIndex(id.x, g.BitColN); if (u.x < g.BitRowN) InterlockedAdd(ColN_Sums, u.y, Sums[min(SumI(u.x, g.BitColN - 1), g.BitN - 1)]); } } }
  [numthreads(numthreads1, 1, 1)] void Init_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BitRowN) { ColN_Sums[id.x] = Sums[min(SumI(id.x, g.BitColN - 1), g.BitN - 1)]; } } }
  bool IsBitOn(uint i) { return i % 32 == 0; }
  uint Assign_Bit(uint i, uint j) { return Is(i < g.N && IsBitOn(i)) << (int)j; }
  [numthreads(numthreads2, numthreads2, 1)] void Get_Bits_32(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < 32 && id.x < g.BitN) { uint i = id.x, j = id.y, k = i * 32 + j, bits; if (i < g.BitN && (bits = Assign_Bit(k, j)) != 0) InterlockedOr(Bits, i, bits); } } }
  uint Assign_Bits(uint i, uint j, uint bits) { return bits | Assign_Bit(i, j); }
  [numthreads(numthreads1, 1, 1)] void Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.BitN) { uint i = id.x, j, k, bits = 0; if (i < g.BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = Assign_Bits(k + j, j, bits); Bits[i] = bits; } } } }
  bool ABuff_IsBitOn(uint i) { return i % 32 == 0; }
  uint ABuff_Assign_Bits(uint i, uint j, uint bits) { return bits | (Is(i < g.ABuff_N && ABuff_IsBitOn(i)) << (int)j); }
  [numthreads(numthreads1, 1, 1)] void ABuff_Get_Existing_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x, j, k, bits = ABuff_Bits[i]; if (i < g.ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ABuff_Assign_Bits(k + j, j, bits); ABuff_Bits[i] = bits; } } } }
  [numthreads(numthreads1, 1, 1)] void ABuff_GetSums(uint3 grp_tid : SV_GroupThreadID, uint3 grp_id : SV_GroupID, uint3 id : SV_DispatchThreadID, uint grpI : SV_GroupIndex)
  {
    uint i = id.x, c, s, j, k, bits = 0;
    if (i < g.ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ABuff_Assign_Bits(k + j, j, bits); ABuff_Bits[i] = bits; c = countbits(bits); } else c = 0;
    ABuff_grp0[grpI] = c; ABuff_grp[grpI] = c; GroupMemoryBarrierWithGroupSync();
    for (s = 1; s < numthreads1; s *= 2)
    {
      if (grpI >= s && i < g.ABuff_BitN) ABuff_grp[grpI] = ABuff_grp0[grpI] + ABuff_grp0[grpI - s]; GroupMemoryBarrierWithGroupSync();
      ABuff_grp0[grpI] = ABuff_grp[grpI]; GroupMemoryBarrierWithGroupSync();
    }
    if (i < g.ABuff_BitN) ABuff_Sums[i] = ABuff_grp[grpI];
  }
  [numthreads(numthreads1, 1, 1)] void ABuff_Get_Bits(uint3 id : SV_DispatchThreadID) { unchecked { if (id.x < g.ABuff_BitN) { uint i = id.x, j, k, bits = 0; if (i < g.ABuff_BitN) { for (j = 0, k = i * 32; j < 32; j++) bits = ABuff_Assign_Bits(k + j, j, bits); ABuff_Bits[i] = bits; } } } }
  [numthreads(numthreads2, numthreads2, 1)] void Add_ColN_Sums(uint3 id : SV_DispatchThreadID) { unchecked { if (id.y < g.BitColN && id.x < g.BitRowN - 1) { uint rowI = id.x + 1, i = SumI(rowI, id.y); if (i < g.BitN) InterlockedAdd(Sums, i, ColN_Sums[rowI - 1]); } } }
  #pragma kernel CalcIndexes
  #pragma kernel Add_ColN_Sums
  #pragma kernel Calc_ColN_Sums
  #pragma kernel Init_ColN_Sums
  #pragma kernel CalcSums
  #pragma kernel InitSums
  #pragma kernel Get_Bits_32
  #pragma kernel Init_Bits_32
  #pragma kernel Get_Bits
  #pragma kernel calc_primes
  #pragma kernel init_Primes
  #pragma kernel ABuff_Get_Existing_Sums
  #pragma kernel ABuff_Get_Existing_Bits
  #pragma kernel ABuff_GetIndexes
  #pragma kernel ABuff_IncSums
  #pragma kernel ABuff_IncFills1
  #pragma kernel ABuff_GetFills2
  #pragma kernel ABuff_GetFills1
  #pragma kernel ABuff_Get_Bits_Sums
  #pragma kernel ABuff_GetSums
  #pragma kernel ABuff_Get_Bits